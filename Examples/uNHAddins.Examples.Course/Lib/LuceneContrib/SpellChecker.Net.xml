<?xml version="1.0"?>
<doc>
    <assembly>
        <name>SpellChecker.Net</name>
    </assembly>
    <members>
        <!-- Badly formed XML comment ignored for member "T:SpellChecker.Net.Search.Spell.PlainTextDictionary" -->
        <member name="T:SpellChecker.Net.Search.Spell.Dictionary">
            <summary> A simple interface representing a Dictionary</summary>
            <author>  Nicolas Maisonneuve
            </author>
            <version>  1.0
            </version>
        </member>
        <member name="M:SpellChecker.Net.Search.Spell.Dictionary.GetWordsIterator">
            <summary> return all the words present in the dictionnary</summary>
            <returns> Iterator
            </returns>
        </member>
        <!-- Badly formed XML comment ignored for member "T:SpellChecker.Net.Search.Spell.SpellChecker" -->
        <member name="F:SpellChecker.Net.Search.Spell.SpellChecker.F_WORD">
            <summary> Field name for each word in the ngram index.</summary>
        </member>
        <member name="M:SpellChecker.Net.Search.Spell.SpellChecker.SetAccuraty(System.Single)">
            <summary>  Set the accuracy 0 &lt; min &lt; 1; default 0.5</summary>
        </member>
        <member name="F:SpellChecker.Net.Search.Spell.SpellChecker.spellindex">
            <summary> the spell index</summary>
        </member>
        <member name="F:SpellChecker.Net.Search.Spell.SpellChecker.bStart">
            <summary> Boost value for start and end grams</summary>
        </member>
        <member name="M:SpellChecker.Net.Search.Spell.SpellChecker.SuggestSimilar(System.String,System.Int32)">
            <summary> Suggest similar words</summary>
            <param name="word">String the word you want a spell check done on
            </param>
            <param name="num_sug">int the number of suggest words
            </param>
            <throws>  IOException </throws>
            <returns> String[]
            </returns>
        </member>
        <member name="M:SpellChecker.Net.Search.Spell.SpellChecker.SuggestSimilar(System.String,System.Int32,Lucene.Net.Index.IndexReader,System.String,System.Boolean)">
            <summary> Suggest similar words (restricted or not to a field of a user index)</summary>
            <param name="word">String the word you want a spell check done on
            </param>
            <param name="num_sug">int the number of suggest words
            </param>
            <param name="ir">the indexReader of the user index (can be null see field param)
            </param>
            <param name="field">String the field of the user index: if field is not null, the suggested
            words are restricted to the words present in this field.
            </param>
            <param name="morePopular">boolean return only the suggest words that are more frequent than the searched word
            (only if restricted mode = (indexReader!=null and field!=null)
            </param>
            <throws>  IOException </throws>
            <returns> String[] the sorted list of the suggest words with this 2 criteria:
            first criteria: the edit distance, second criteria (only if restricted mode): the popularity
            of the suggest words in the field of the user index
            </returns>
        </member>
        <member name="M:SpellChecker.Net.Search.Spell.SpellChecker.Add(Lucene.Net.Search.BooleanQuery,System.String,System.String,System.Single)">
            <summary> Add a clause to a boolean query.</summary>
        </member>
        <member name="M:SpellChecker.Net.Search.Spell.SpellChecker.Add(Lucene.Net.Search.BooleanQuery,System.String,System.String)">
            <summary> Add a clause to a boolean query.</summary>
        </member>
        <member name="M:SpellChecker.Net.Search.Spell.SpellChecker.FormGrams(System.String,System.Int32)">
            <summary> Form all ngrams for a given word.</summary>
            <param name="text">the word to parse
            </param>
            <param name="ng">the ngram length e.g. 3
            </param>
            <returns> an array of all ngrams in the word and note that duplicates are not removed
            </returns>
        </member>
        <member name="M:SpellChecker.Net.Search.Spell.SpellChecker.Exist(System.String)">
            <summary> Check whether the word exists in the index.</summary>
            <param name="word">String
            </param>
            <throws>  IOException </throws>
            <returns> true iff the word exists in the index
            </returns>
        </member>
        <member name="M:SpellChecker.Net.Search.Spell.SpellChecker.IndexDictionary(SpellChecker.Net.Search.Spell.Dictionary)">
            <summary> Index a Dictionary</summary>
            <param name="dict">the dictionary to index
            </param>
            <throws>  IOException </throws>
        </member>
        <member name="T:SpellChecker.Net.Search.Spell.SuggestWord">
            <summary>  SuggestWord Class, used in suggestSimilar method in SpellChecker class.
            
            </summary>
            <author>  Nicolas Maisonneuve
            </author>
        </member>
        <member name="F:SpellChecker.Net.Search.Spell.SuggestWord.score">
            <summary> the score of the word</summary>
        </member>
        <member name="F:SpellChecker.Net.Search.Spell.SuggestWord.freq">
            <summary> The freq of the word</summary>
        </member>
        <member name="F:SpellChecker.Net.Search.Spell.SuggestWord.string_Renamed">
            <summary> the suggested word</summary>
        </member>
        <member name="T:SpellChecker.Net.Search.Spell.LuceneDictionary">
            <summary> Lucene Dictionary
            
            </summary>
            <author>  Nicolas Maisonneuve
            </author>
        </member>
        <member name="T:SpellChecker.Net.Search.Spell.TRStringDistance">
            <summary> Edit distance  class</summary>
        </member>
        <member name="M:SpellChecker.Net.Search.Spell.TRStringDistance.#ctor(System.String)">
            <summary> Optimized to run a bit faster than the static getDistance().
            In one benchmark times were 5.3sec using ctr vs 8.5sec w/ static method, thus 37% faster.
            </summary>
        </member>
        <member name="M:SpellChecker.Net.Search.Spell.TRStringDistance.Form(System.Int32,System.Int32)">
            <summary> </summary>
        </member>
    </members>
</doc>
