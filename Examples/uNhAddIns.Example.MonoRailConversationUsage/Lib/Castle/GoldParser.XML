<?xml version="1.0"?>
<doc>
    <assembly>
        <name>GoldParser</name>
    </assembly>
    <members>
        <member name="T:GoldParser.IGoldVisitor">
            This is a visitor-interface for the parse tree generated by GoldParser.
            See the sample project for more information.
        </member>
        <member name="M:GoldParser.IGoldVisitor.Visit(GoldParser.Reduction)">
            Visits the specified <c>Reduction</c>.
        </member>
        <member name="T:GoldParser.FAEdge">
            Each state in the Determinstic Finite Automata contains multiple edges which
            link to other states in the automata. This class is used to represent an edge.
        </member>
        <member name="T:GoldParser.FAState">
            Represents a state in the Deterministic Finite Automata which is used by
            the tokenizer.
        </member>
        <member name="T:GoldParser.Rule">
            The Rule class is used to represent the logical structures of the grammar.
            Rules consist of a head containing a nonterminal followed by a series of
            both nonterminals and terminals.
        </member>
        <member name="M:GoldParser.Rule.#ctor(System.Int32,GoldParser.Symbol)">
            Creates a new Rule.
        </member>
        <member name="M:GoldParser.Rule.GetSymbol(System.Int32)">
            Returns the symbol in the body of the rule with the specified index. 
        </member>
        <member name="M:GoldParser.Rule.ToString">
            Returns the Backus-Noir representation of this <c>Rule</c>.
        </member>
        <member name="M:GoldParser.Rule.AddItem(GoldParser.Symbol)">
            
        </member>
        <member name="P:GoldParser.Rule.TableIndex">
            Gets the index of this <c>Rule</c> in the GoldParser's rule-table.
        </member>
        <member name="P:GoldParser.Rule.RuleNonTerminal">
            Gets the head symbol of this rule.
        </member>
        <member name="P:GoldParser.Rule.SymbolCount">
            Gets the number of symbols in the body (right-hand-side) of the rule.
        </member>
        <member name="P:GoldParser.Rule.Name">
            The name of this rule.
        </member>
        <member name="P:GoldParser.Rule.Definition">
            The definition of this rule.
        </member>
        <member name="P:GoldParser.Rule.ContainsOneNonTerminal">
            
        </member>
        <member name="T:GoldParser.LRActionTable">
            This class contains the actions (reduce/shift) and goto information
            for a STATE in a LR parser. Essentially, this is just a row of actions in
            the LR state transition table. The only data structure is a list of
            LR Actions.
        </member>
        <member name="M:GoldParser.LRActionTable.AddItem(GoldParser.Symbol,GoldParser.Action,System.Int32)">
            <summary>Adds an new LRAction to this table.</summary>
            <param name="p_symbol">The Symbol.</param>
            <param name="p_action">The Action.</param>
            <param name="p_value">The value.</param>
        </member>
        <member name="T:GoldParser.LRAction">
            This class represents an action in a LALR State. 
            There is one and only one action for any given symbol.
        </member>
        <member name="T:GoldParser.Parser">
            This is the main class in the GoldParser Engine and is used to perform
            all duties required to the parsing of a source text string. This class
            contains the LALR(1) State Machine code, the DFA State Machine code,
            character table (used by the DFA algorithm) and all other structures and
            methods needed to interact with the developer.
        </member>
        <member name="M:GoldParser.Parser.#ctor(System.String)">
            <summary>
            Creates a new <c>Parser</c> object for the specified CGT file.
            </summary>
            <param name="p_filename">The name of the CGT file.</param>
        </member>
        <member name="M:GoldParser.Parser.#ctor(System.IO.BinaryReader)">
            <summary>
            Creates a new <c>Parser</c> object for the specified CGT file.
            </summary>
            <param name="reader">The CGT file.</param>
        </member>
        <member name="M:GoldParser.Parser.PushInputToken(GoldParser.Token)">
            <summary>
            Pushes the specified token onto the internal input queue. 
            It will be the next token analyzed by the parsing engine.
            </summary>
        </member>
        <member name="M:GoldParser.Parser.PopInputToken">
            <summary>
            Pops the next token from the internal input queue.
            </summary>
        </member>
        <member name="M:GoldParser.Parser.GetTokens">
            <summary>
            Returns a <c>TokenStack</c> containing the tokens for the reduced rule or
            the tokens that where expected when a syntax error occures.
            </summary>
        </member>
        <member name="M:GoldParser.Parser.GetParameter(System.String)">
            <summary>Returns a string containing the value of the specified parameter.</summary>
            <remarks>These parameters include: Name, Version, Author, About, Case Sensitive 
            and Start Symbol. If the name specified is invalid, this method will 
            return an empty string.</remarks>
        </member>
        <member name="M:GoldParser.Parser.OpenFile(System.String)">
            <summary>
            Opens the file with the specified name for parsing.
            </summary>
        </member>
        <member name="M:GoldParser.Parser.OpenStream(System.IO.TextReader)">
            <summary>
            Opens the file with the specified name for parsing.
            </summary>
        </member>
        <member name="M:GoldParser.Parser.CloseFile">
            <summary>
            Closes the file opened with <c>OpenFile</c>.
            </summary>
        </member>
        <member name="M:GoldParser.Parser.Parse">
            <summary>Executes a parse-action.</summary>
            <remarks>When this method is called, the parsing engine 
            reads information from the source text and then reports what action was taken. 
            This ranges from a token being read and recognized from the source, a parse 
            reduction, or some type of error.</remarks>
        </member>
        <member name="M:GoldParser.Parser.LoadTables(GoldParser.GrammarReader)">
            <summary>
            Loads the grammar tables from the CGT.
            </summary>
            <param name="reader">The grammar reader.</param>
        </member>
        <member name="M:GoldParser.Parser.CommentToken(GoldParser.Token)">
            <summary>
            Returns true if the specified token is a CommentLine or CommentStart-symbol.
            </summary>
        </member>
        <member name="M:GoldParser.Parser.ParseToken(GoldParser.Token)">
            <summary>
            This function analyzes a token and either:
              1. Makes a SINGLE reduction and pushes a complete Reduction object on the stack
              2. Accepts the token and shifts
              3. Errors and places the expected symbol indexes in the Tokens list
            The Token is assumed to be valid and WILL be checked
            </summary>
        </member>
        <member name="M:GoldParser.Parser.Reduce(GoldParser.Rule)">
            <summary>Produces a reduction.</summary>
            <remarks>Removes as many tokens as members in the rule and pushes a 
                     non-terminal token.</remarks>
        </member>
        <member name="M:GoldParser.Parser.RetrieveToken">
            <summary>
            This method implements the DFA algorithm and returns a token
            to the LALR state machine.
            </summary>
        </member>
        <member name="P:GoldParser.Parser.TrimReductions">
            <summary>
            Gets or sets whether or not to trim reductions which contain 
            only one non-terminal.
            </summary>
        </member>
        <member name="P:GoldParser.Parser.CurrentToken">
            <summary>
            Gets the current token.
            </summary>
        </member>
        <member name="P:GoldParser.Parser.CurrentReduction">
            <summary>Gets the <c>Reduction</c> made by the parsing engine.</summary>
            <remarks>The value of this property is only valid when the Parse-method
                     returns <c>ParseMessage.Reduction</c>.</remarks>
        </member>
        <member name="P:GoldParser.Parser.CurrentLineNumber">
            <summary>
            Gets the line number that is currently being processed.
            </summary>
        </member>
        <member name="T:GoldParser.ParseMessage">
            The result of the Parser.Parse method.
        </member>
        <member name="F:GoldParser.ParseMessage.TokenRead">
            This message is returned each time a token is read.
        </member>
        <member name="F:GoldParser.ParseMessage.Reduction">
            When the engine is able to reduce a rule, this message is returned. 
            The rule that was reduced is set in the <c>Parser.Reduction</c> property. 
            The tokens that are reduced and correspond to the rule's definition 
            can be acquired using the <c>GetToken</c> or <c>GetTokens</c> methods.
        </member>
        <member name="F:GoldParser.ParseMessage.Accept">
            The engine will returns this message when the source text has been 
            accepted as both complete and correct. In other words, the source 
            text was successfully analyzed.
        </member>
        <member name="F:GoldParser.ParseMessage.LexicalError">
            The tokenizer will generate this message when it is unable to 
            recognize a series of characters as a valid token. To recover, pop the 
            invalid token from the input queue using <c>Parser.PopInputToken</c>.
        </member>
        <member name="F:GoldParser.ParseMessage.SyntaxError">
            Often the parser will read a token that is not expected in the 
            grammar. When this happens, you can acquire the expected tokens using
            the <c>GetToken</c> or <c>GetTokens</c> methods. To recover, push 
            one of the expected tokens onto the input queue.
        </member>
        <member name="F:GoldParser.ParseMessage.CommentError">
            The parser reached the end of the file while reading a comment. 
            This is caused when the source text contains a "run-away" comment, 
            or in other words, a block comment that lacks the end-delimiter.
        </member>
        <member name="F:GoldParser.ParseMessage.InternalError">
            Something is very wrong when this message is returned.
        </member>
        <member name="T:GoldParser.SymbolType">
            Respresents the type of a symbol.
        </member>
        <member name="F:GoldParser.SymbolType.NonTerminal">
            A normal non-terminal.
        </member>
        <member name="F:GoldParser.SymbolType.Terminal">
            A normal terminal.
        </member>
        <member name="F:GoldParser.SymbolType.Whitespace">
            This Whitespace symbol is a special terminal that is automatically 
            ignored by the parsing engine. Any text accepted as whitespace is 
            considered to be inconsequential and "meaningless".
        </member>
        <member name="F:GoldParser.SymbolType.End">
            The End symbol is generated when the tokenizer reaches the end of 
            the source text.
        </member>
        <member name="F:GoldParser.SymbolType.CommentStart">
            This type of symbol designates the start of a block comment.
        </member>
        <member name="F:GoldParser.SymbolType.CommentEnd">
            This type of symbol designates the end of a block comment.
        </member>
        <member name="F:GoldParser.SymbolType.CommentLine">
            When the engine reads a token that is recognized as a line comment, 
            the remaining characters on the line are automatically ignored by 
            the parser.
        </member>
        <member name="F:GoldParser.SymbolType.Error">
            The Error symbol is a general-purpose means of representing characters 
            that were not recognized by the tokenizer. In other words, when the 
            tokenizer reads a series of characters that is not accepted by the DFA 
            engine, a token of this type is created.
        </member>
        <member name="T:GoldParser.Action">
            constants associated with what action should be performed 
        </member>
        <member name="F:GoldParser.Action.Shift">
            
        </member>
        <member name="F:GoldParser.Action.Reduce">
            
        </member>
        <member name="F:GoldParser.Action.Goto">
            
        </member>
        <member name="F:GoldParser.Action.Accept">
            
        </member>
        <member name="F:GoldParser.Action.Error">
            
        </member>
        <member name="T:GoldParser.EntryContent">
            Represents the type of an entry in the CGT file.
        </member>
        <member name="F:GoldParser.EntryContent.Empty">
            
        </member>
        <member name="F:GoldParser.EntryContent.Integer">
            
        </member>
        <member name="F:GoldParser.EntryContent.String">
            
        </member>
        <member name="F:GoldParser.EntryContent.Boolean">
            
        </member>
        <member name="F:GoldParser.EntryContent.Byte">
            
        </member>
        <member name="F:GoldParser.EntryContent.Multi">
            
        </member>
        <member name="T:GoldParser.RecordId">
            Represents the type of a record in the CGT file.
        </member>
        <member name="F:GoldParser.RecordId.Parameters">
            
        </member>
        <member name="F:GoldParser.RecordId.TableCounts">
            
        </member>
        <member name="F:GoldParser.RecordId.Initial">
            
        </member>
        <member name="F:GoldParser.RecordId.Symbols">
            
        </member>
        <member name="F:GoldParser.RecordId.CharSets">
            
        </member>
        <member name="F:GoldParser.RecordId.Rules">
            
        </member>
        <member name="F:GoldParser.RecordId.DFAStates">
            
        </member>
        <member name="F:GoldParser.RecordId.LRTables">
            
        </member>
        <member name="F:GoldParser.RecordId.Comment">
            
        </member>
        <member name="T:GoldParser.ParseResult">
            Used internally to represent the result of the Parser.ParseToken method.
        </member>
        <member name="F:GoldParser.ParseResult.Accept">
            
        </member>
        <member name="F:GoldParser.ParseResult.Shift">
            
        </member>
        <member name="F:GoldParser.ParseResult.ReduceNormal">
            
        </member>
        <member name="F:GoldParser.ParseResult.ReduceEliminated">
            
        </member>
        <member name="F:GoldParser.ParseResult.SyntaxError">
            
        </member>
        <member name="F:GoldParser.ParseResult.InternalError">
            
        </member>
        <member name="T:GoldParser.Token">
            While the Symbol represents a class of terminals and nonterminals,
            the Token represents an individual piece of information.
        </member>
        <member name="T:GoldParser.Symbol">
            <summary>
            This class is used to store the nonterminals used by the DFA and LALR parser
            Symbols can be either terminals (which represent a class of tokens, such as
            identifiers) or non-terminals (which represent the rules and structures of
            the grammar). Symbols fall into several categories for use by the 
            GoldParser Engine which are enumerated in type <c>SymbolType</c> enum.
            </summary>
        </member>
        <member name="M:GoldParser.Symbol.#ctor(System.Int32,System.String,GoldParser.SymbolType)">
            <summary>
            Creates a new Symbol object.
            </summary>
        </member>
        <member name="M:GoldParser.Symbol.#ctor">
            
        </member>
        <member name="M:GoldParser.Symbol.Equals(System.Object)">
            <summary>
            Returns true if the specified symbol is equal to this one.
            </summary>
        </member>
        <member name="M:GoldParser.Symbol.GetHashCode">
            <summary>
            Returns the hashcode for the symbol.
            </summary>
        </member>
        <member name="M:GoldParser.Symbol.ToString">
            <summary>Returns the text representation of the symbol.</summary>
            <remarks>In the case of nonterminals, the name is delimited by angle brackets, 
            special terminals are delimited by parenthesis and terminals are delimited 
            by single quotes (if special characters are present).</remarks>
        </member>
        <member name="M:GoldParser.Symbol.PatternFormat(System.String,System.Text.StringBuilder)">
            
        </member>
        <member name="M:GoldParser.Symbol.CopyData(GoldParser.Symbol)">
            
        </member>
        <member name="P:GoldParser.Symbol.TableIndex">
            <summary>
            Gets the index of this symbol in the GoldParser's symbol table.
            </summary>
        </member>
        <member name="P:GoldParser.Symbol.Name">
            <summary>
            Gets the name of the symbol.
            </summary>
        </member>
        <member name="P:GoldParser.Symbol.Kind">
            <summary>
            Gets the <c>SymbolType</c> of the symbol.
            </summary>
        </member>
        <member name="M:GoldParser.Token.#ctor">
            
        </member>
        <member name="M:GoldParser.Token.#ctor(GoldParser.Symbol)">
            
        </member>
        <member name="M:GoldParser.Token.SetParent(GoldParser.Symbol)">
            
        </member>
        <member name="M:GoldParser.Token.ToString">
            <summary>Returns the text representation of the token's parent symbol.</summary>
            <remarks>In the case of nonterminals, the name is delimited by angle brackets, 
            special terminals are delimited by parenthesis and terminals are delimited 
            by single quotes (if special characters are present).</remarks>
        </member>
        <member name="P:GoldParser.Token.State">
            <summary>
            Gets the state 
            </summary>
        </member>
        <member name="P:GoldParser.Token.Data">
            <summary>
            Gets or sets the information stored in the token.
            </summary>
        </member>
        <member name="T:GoldParser.Reduction">
            This class is used by the engine to hold a reduced rule. Rather than contain
            a list of Symbols, a reduction contains a list of Tokens corresponding to the
            the rule it represents. This class is important since it is used to store the
            actual source program parsed by the Engine.
        </member>
        <member name="M:GoldParser.Reduction.#ctor">
            Creates a new Reduction.
        </member>
        <member name="M:GoldParser.Reduction.GetToken(System.Int32)">
            Returns the token with the specified index.
        </member>
        <member name="M:GoldParser.Reduction.ToString">
            Returns a string-representation of this Reduction.
        </member>
        <member name="M:GoldParser.Reduction.Accept(GoldParser.IGoldVisitor)">
            <summary>Makes the <c>IGoldVisitor</c> visit this <c>Reduction</c>.</summary>
            <example>See the GoldTest sample project.</example>
        </member>
        <member name="M:GoldParser.Reduction.ChildrenAccept(GoldParser.IGoldVisitor)">
            <summary>Makes the <c>IGoldVisitor</c> visit the children of this 
                     <c>Reduction</c>.</summary>
            <example>See the GoldTest sample project.</example>
        </member>
        <member name="M:GoldParser.Reduction.AddToken(GoldParser.Token)">
            
        </member>
        <member name="P:GoldParser.Reduction.Tokens">
            Returns an <c>ArrayList</c> containing the <c>Token</c>s in this reduction.
        </member>
        <member name="P:GoldParser.Reduction.ParentRule">
            Returns the <c>Rule</c> that this <c>Reduction</c> represents.
        </member>
        <member name="P:GoldParser.Reduction.Tag">
            This is a general purpose field that can be used at the developer's leisure. 
        </member>
        <member name="T:GoldParser.GrammarReader">
            <summary>This class is used to read information stored in the very simple file
            structure used by the Compiled Grammar Table file.</summary>
        </member>
        <member name="M:GoldParser.GrammarReader.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
            <filterpriority>2</filterpriority>
        </member>
        <member name="T:GoldParser.TokenStack">
            
        </member>
        <member name="M:GoldParser.TokenStack.#ctor">
            
        </member>
        <member name="M:GoldParser.TokenStack.Clear">
            Removes all tokens from the stack.
        </member>
        <member name="M:GoldParser.TokenStack.PushToken(GoldParser.Token)">
            Pushes the specified token on the stack.
        </member>
        <member name="M:GoldParser.TokenStack.PeekToken">
            Returns the token on top of the stack.
        </member>
        <member name="M:GoldParser.TokenStack.PopToken">
            <summary>Pops a token from the stack.</summary>
            <remarks>The token on top of the stack will be removed and returned 
            by the method.</remarks>
        </member>
        <member name="M:GoldParser.TokenStack.PopTokensInto(GoldParser.Reduction,System.Int32)">
            Pops the specified number of tokens from the stack and adds them
            to the specified <c>Reduction</c>.
        </member>
        <member name="M:GoldParser.TokenStack.GetToken(System.Int32)">
            <summary>Returns the token at the specified position from the top.</summary>
            <example>GetToken(0) returns the token on top off the stack, GetToken(1)
            the next one, etc.</example>
        </member>
        <member name="M:GoldParser.TokenStack.GetEnumerator">
            Returns an <c>IEnumerator</c> for the tokens on the stack.
        </member>
        <member name="P:GoldParser.TokenStack.Item(System.Int32)">
            Returns the token at the specified position from the top.
        </member>
        <member name="P:GoldParser.TokenStack.Count">
            Gets the number of items in the stack.
        </member>
        <member name="T:GoldParser.LookAheadReader">
            This is a wrapper around StreamReader which supports lookahead.
        </member>
        <member name="M:GoldParser.LookAheadReader.#ctor(System.IO.TextReader)">
            Creates a new LookAheadReader around the specified StreamReader.
        </member>
        <member name="M:GoldParser.LookAheadReader.FillBuffer(System.Int32)">
            Makes sure there are enough characters in the buffer.
        </member>
        <member name="M:GoldParser.LookAheadReader.LookAhead">
            Returns the next char in the buffer but doesn't advance the current position.
        </member>
        <member name="M:GoldParser.LookAheadReader.LookAhead(System.Int32)">
            <summary>Returns the char at current position + the specified number of characters.
            Does not change the current position.</summary>
            <param name="p_pos">The position after the current one where the character to return is</param>
        </member>
        <member name="M:GoldParser.LookAheadReader.Read">
            Returns the next char in the buffer and advances the current position by one.
        </member>
        <member name="M:GoldParser.LookAheadReader.Read(System.Int32)">
            Returns the next n characters in the buffer and advances the current position by n.
        </member>
        <member name="M:GoldParser.LookAheadReader.DiscardLine">
            Advances the current position in the buffer until a newline is encountered.
        </member>
        <member name="M:GoldParser.LookAheadReader.Close">
            Closes the underlying StreamReader.
        </member>
        <member name="T:GoldParser.ParserException">
            Thrown by the parser when an error occures.
            Specialized exceptions may be added at a later time. 
        </member>
        <member name="M:GoldParser.ParserException.#ctor(System.String)">
            Creates a new ParserException with the specified error string.
        </member>
        <member name="M:GoldParser.ParserException.#ctor(System.String,System.Exception)">
            Creates a new ParserException with the specified error string and inner-exception.
        </member>
    </members>
</doc>
