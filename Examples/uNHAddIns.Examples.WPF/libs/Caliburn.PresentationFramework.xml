<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Caliburn.PresentationFramework</name>
    </assembly>
    <members>
        <member name="T:Caliburn.PresentationFramework.Actions.Action">
            <summary>
            A host for action related attached properties.
            </summary>
        </member>
        <member name="F:Caliburn.PresentationFramework.Actions.Action.TargetProperty">
            <summary>
            A property definition representing the target of an <see cref="T:Caliburn.PresentationFramework.Actions.ActionMessage"/>.  
            The DataContext of the element will be set to this instance.
            </summary>
        </member>
        <member name="F:Caliburn.PresentationFramework.Actions.Action.TargetWithoutContextProperty">
            <summary>
            A property definition representing the target of an <see cref="T:Caliburn.PresentationFramework.Actions.ActionMessage"/>.  
            The DataContext of the element is not set to this instance.
            </summary>
        </member>
        <member name="M:Caliburn.PresentationFramework.Actions.Action.Initialize(Caliburn.PresentationFramework.RoutedMessaging.IRoutedMessageController,Caliburn.PresentationFramework.ViewModels.IViewModelDescriptionFactory,Microsoft.Practices.ServiceLocation.IServiceLocator)">
            <summary>
            Initializes property host.
            </summary>
            <param name="controller">The controller.</param>
            <param name="viewModelDescriptionFactory"></param>
            <param name="serviceLocator">The service locator.</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.Actions.Action.SetTarget(System.Windows.DependencyObject,System.Object)">
            <summary>
            Sets the target of the <see cref="T:Caliburn.PresentationFramework.Actions.ActionMessage"/>.
            </summary>
            <param name="d">The element to attach the target to.</param>
            <param name="target">The target for instances of <see cref="T:Caliburn.PresentationFramework.Actions.ActionMessage"/>.</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.Actions.Action.GetTarget(System.Windows.DependencyObject)">
            <summary>
            Gets the target for instances of <see cref="T:Caliburn.PresentationFramework.Actions.ActionMessage"/>.
            </summary>
            <param name="d">The element to which the target is attached.</param>
            <returns>The target for instances of <see cref="T:Caliburn.PresentationFramework.Actions.ActionMessage"/>.</returns>
        </member>
        <member name="M:Caliburn.PresentationFramework.Actions.Action.SetTargetWithoutContext(System.Windows.DependencyObject,System.Object)">
            <summary>
            Sets the target of the <see cref="T:Caliburn.PresentationFramework.Actions.ActionMessage"/>.
            </summary>
            <param name="d">The element to attach the target to.</param>
            <param name="target">The target for instances of <see cref="T:Caliburn.PresentationFramework.Actions.ActionMessage"/>.</param>
            <remarks>The DataContext will not be set.</remarks>
        </member>
        <member name="M:Caliburn.PresentationFramework.Actions.Action.GetTargetWithoutContext(System.Windows.DependencyObject)">
            <summary>
            Gets the target for instances of <see cref="T:Caliburn.PresentationFramework.Actions.ActionMessage"/>.
            </summary>
            <param name="d">The element to which the target is attached.</param>
            <returns>The target for instances of <see cref="T:Caliburn.PresentationFramework.Actions.ActionMessage"/></returns>
        </member>
        <member name="T:Caliburn.PresentationFramework.Actions.ActionAttribute">
            <summary>
            Designates an <see cref="T:Caliburn.PresentationFramework.Actions.IAction"/>.
            </summary>
        </member>
        <member name="T:Caliburn.PresentationFramework.Actions.IActionFactory">
            <summary>
            A service responsible for creating an <see cref="T:Caliburn.PresentationFramework.Actions.IAction"/>.
            </summary>
        </member>
        <member name="M:Caliburn.PresentationFramework.Actions.IActionFactory.Create(Caliburn.PresentationFramework.Actions.ActionCreationContext)">
            <summary>
            Creates an <see cref="T:Caliburn.PresentationFramework.Actions.IAction"/> using the specified context.
            </summary>
            <param name="context">The context.</param>
            <returns>The <see cref="T:Caliburn.PresentationFramework.Actions.IAction"/>.</returns>
        </member>
        <member name="M:Caliburn.PresentationFramework.Actions.ActionAttribute.Create(Caliburn.PresentationFramework.Actions.ActionCreationContext)">
            <summary>
            Creates an <see cref="T:Caliburn.PresentationFramework.Actions.IAction"/> using the specified context.
            </summary>
            <param name="context">The context.</param>
            <returns>The <see cref="T:Caliburn.PresentationFramework.Actions.IAction"/>.</returns>
        </member>
        <member name="P:Caliburn.PresentationFramework.Actions.ActionAttribute.BlockInteraction">
            <summary>
            Gets or sets a value indicating whether to block interaction with the trigger during asynchronous execution.
            </summary>
            <value><c>true</c> if should block; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:Caliburn.PresentationFramework.Actions.ActionBase">
            <summary>
            A base implementation of <see cref="T:Caliburn.PresentationFramework.Actions.IAction"/>.
            </summary>
        </member>
        <member name="T:Caliburn.PresentationFramework.Actions.IAction">
            <summary>
            Represents a single action.
            </summary>
        </member>
        <member name="T:Caliburn.PresentationFramework.Actions.IActionHandler">
            <summary>
            Implemented by classes which can handle an <see cref="T:Caliburn.PresentationFramework.Actions.ActionMessage"/>.
            </summary>
        </member>
        <member name="M:Caliburn.PresentationFramework.Actions.IActionHandler.ShouldTriggerBeAvailable(Caliburn.PresentationFramework.Actions.ActionMessage,Caliburn.PresentationFramework.RoutedMessaging.IInteractionNode)">
            <summary>
            Determines how this instance affects trigger availability.
            </summary>
            <param name="actionMessage">The action message.</param>
            <param name="handlingNode">The node.</param>
            <returns>
            	<c>true</c> if this instance enables triggers; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Caliburn.PresentationFramework.Actions.IActionHandler.Execute(Caliburn.PresentationFramework.Actions.ActionMessage,Caliburn.PresentationFramework.RoutedMessaging.IInteractionNode,System.Object)">
            <summary>
            Executes the specified action on the specified target.
            </summary>
            <param name="actionMessage">The action message.</param>
            <param name="handlingNode">The node.</param>
            <param name="context">The context.</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.Actions.IAction.Matches(Caliburn.PresentationFramework.Actions.ActionMessage)">
            <summary>
            Determines whether this action matches the specified message.
            </summary>
            <param name="message">The message.</param>
            <returns></returns>
        </member>
        <member name="P:Caliburn.PresentationFramework.Actions.IAction.Name">
            <summary>
            Gets the name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:Caliburn.PresentationFramework.Actions.IAction.Requirements">
            <summary>
            Gets the requirements.
            </summary>
            <value>The requirements.</value>
        </member>
        <member name="E:Caliburn.PresentationFramework.Actions.IAction.Completed">
            <summary>
            Occurs when action has completed.
            </summary>
        </member>
        <member name="P:Caliburn.PresentationFramework.Actions.IAction.Filters">
            <summary>
            Gets the filters.
            </summary>
            <value>The filters.</value>
        </member>
        <member name="F:Caliburn.PresentationFramework.Actions.ActionBase._method">
            <summary>
            The method.
            </summary>
        </member>
        <member name="F:Caliburn.PresentationFramework.Actions.ActionBase._messageBinder">
            <summary>
            The binder.
            </summary>
        </member>
        <member name="F:Caliburn.PresentationFramework.Actions.ActionBase._filters">
            <summary>
            The filters.
            </summary>
        </member>
        <member name="F:Caliburn.PresentationFramework.Actions.ActionBase._requirements">
            <summary>
            The required parameters.
            </summary>
        </member>
        <member name="M:Caliburn.PresentationFramework.Actions.ActionBase.#ctor(Caliburn.Core.Invocation.IMethod,Caliburn.PresentationFramework.RoutedMessaging.IMessageBinder,Caliburn.PresentationFramework.Filters.IFilterManager,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Caliburn.PresentationFramework.Actions.ActionBase"/> class.
            </summary>
            <param name="method">The method.</param>
            <param name="messageBinder">The method binder.</param>
            <param name="filters">The filters.</param>
            <param name="blockInteraction">if set to <c>true</c> blocks interaction.</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.Actions.ActionBase.Matches(Caliburn.PresentationFramework.Actions.ActionMessage)">
            <summary>
            Determines whether this action matches the specified message.
            </summary>
            <param name="message">The message.</param>
            <returns></returns>
        </member>
        <member name="M:Caliburn.PresentationFramework.Actions.ActionBase.ShouldTriggerBeAvailable(Caliburn.PresentationFramework.Actions.ActionMessage,Caliburn.PresentationFramework.RoutedMessaging.IInteractionNode)">
            <summary>
            Determines how this instance affects trigger availability.
            </summary>
            <param name="actionMessage">The action message.</param>
            <param name="handlingNode">The node.</param>
            <returns>
            	<c>true</c> if this instance enables triggers; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Caliburn.PresentationFramework.Actions.ActionBase.Execute(Caliburn.PresentationFramework.Actions.ActionMessage,Caliburn.PresentationFramework.RoutedMessaging.IInteractionNode,System.Object)">
            <summary>
            Executes the specified this action on the specified target.
            </summary>
            <param name="actionMessage">The action message.</param>
            <param name="handlingNode">The node.</param>
            <param name="context">The context.</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.Actions.ActionBase.HasTriggerEffects">
            <summary>
            Determines whether this action has trigger effects.
            </summary>
            <returns>
            	<c>true</c> if has trigger effects; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Caliburn.PresentationFramework.Actions.ActionBase.TryApplyRescue(Caliburn.PresentationFramework.RoutedMessaging.IRoutedMessage,Caliburn.PresentationFramework.RoutedMessaging.IInteractionNode,System.Exception)">
            <summary>
            Applies the rescue or fails.
            </summary>
            <param name="message">The action message.</param>
            <param name="handlingNode">The handling node.</param>
            <param name="ex">The exception.</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.Actions.ActionBase.OnCompleted">
            <summary>
            Called when completed event needs to fire.
            </summary>
        </member>
        <member name="M:Caliburn.PresentationFramework.Actions.ActionBase.TryUpdateTrigger(Caliburn.PresentationFramework.Actions.ActionMessage,Caliburn.PresentationFramework.RoutedMessaging.IInteractionNode,System.Boolean)">
            <summary>
            Tries to update trigger.
            </summary>
            <param name="actionMessage">The action message.</param>
            <param name="handlingNode">The handling node.</param>
            <param name="forceDisabled">if set to <c>true</c> [force disabled].</param>
        </member>
        <member name="P:Caliburn.PresentationFramework.Actions.ActionBase.BlockInteraction">
            <summary>
            Gets a value indicating whether to block intaction with the trigger during async execution.
            </summary>
            <value><c>true</c> if should block; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Caliburn.PresentationFramework.Actions.ActionBase.Name">
            <summary>
            Gets the name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:Caliburn.PresentationFramework.Actions.ActionBase.Requirements">
            <summary>
            Gets the requirements.
            </summary>
            <value>The requirements.</value>
        </member>
        <member name="E:Caliburn.PresentationFramework.Actions.ActionBase.Completed">
            <summary>
            Occurs when action has completed.
            </summary>
        </member>
        <member name="P:Caliburn.PresentationFramework.Actions.ActionBase.Filters">
            <summary>
            Gets the filters.
            </summary>
            <value>The filters.</value>
        </member>
        <member name="P:Caliburn.PresentationFramework.Actions.ActionBase.Method">
            <summary>
            Gets the method.
            </summary>
            <value>The method.</value>
        </member>
        <member name="T:Caliburn.PresentationFramework.Actions.ActionCreationContext">
            <summary>
            Provides services and information during creation of an <see cref="T:Caliburn.PresentationFramework.Actions.IAction"/>.
            </summary>
        </member>
        <member name="M:Caliburn.PresentationFramework.Actions.ActionCreationContext.#ctor(Microsoft.Practices.ServiceLocation.IServiceLocator,Caliburn.Core.Invocation.IMethodFactory,Caliburn.PresentationFramework.RoutedMessaging.IMessageBinder,Caliburn.PresentationFramework.Conventions.IConventionManager,System.Type,Caliburn.PresentationFramework.Filters.IFilterManager,System.Reflection.MethodInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:Caliburn.PresentationFramework.Actions.ActionCreationContext"/> class.
            </summary>
            <param name="serviceLocator">The service locator.</param>
            <param name="methodFactory">The method factory.</param>
            <param name="messageBinder">The message binder.</param>
            <param name="conventionManager">The convention manager</param>
            <param name="targetType">Type of the target.</param>
            <param name="targetFilters">The target filters.</param>
            <param name="method">The method.</param>
        </member>
        <member name="P:Caliburn.PresentationFramework.Actions.ActionCreationContext.TargetType">
            <summary>
            Gets or sets the type of the target.
            </summary>
            <value>The type of the target.</value>
        </member>
        <member name="P:Caliburn.PresentationFramework.Actions.ActionCreationContext.TargetFilters">
            <summary>
            Gets or sets the target filters.
            </summary>
            <value>The target filters.</value>
        </member>
        <member name="P:Caliburn.PresentationFramework.Actions.ActionCreationContext.Method">
            <summary>
            Gets or sets the method.
            </summary>
            <value>The method.</value>
        </member>
        <member name="P:Caliburn.PresentationFramework.Actions.ActionCreationContext.ServiceLocator">
            <summary>
            Gets or sets the service locator.
            </summary>
            <value>The service locator.</value>
        </member>
        <member name="P:Caliburn.PresentationFramework.Actions.ActionCreationContext.MethodFactory">
            <summary>
            Gets or sets the method factory.
            </summary>
            <value>The method factory.</value>
        </member>
        <member name="P:Caliburn.PresentationFramework.Actions.ActionCreationContext.MessageBinder">
            <summary>
            Gets or sets the message binder.
            </summary>
            <value>The message binder.</value>
        </member>
        <member name="P:Caliburn.PresentationFramework.Actions.ActionCreationContext.ConventionManager">
            <summary>
            Gets or sets the convention manager.
            </summary>
            <value>The convention manager.</value>
        </member>
        <member name="T:Caliburn.PresentationFramework.Actions.ActionExtensions">
            <summary>
            Hosts extension methods related to actions.
            </summary>
        </member>
        <member name="M:Caliburn.PresentationFramework.Actions.ActionExtensions.CreateFilterManager(Caliburn.PresentationFramework.Actions.ActionCreationContext,Caliburn.Core.Invocation.IMethod)">
            <summary>
            Creates the filter manager for the method based on the context.
            </summary>
            <param name="context">The context.</param>
            <param name="method">The method.</param>
            <returns></returns>
        </member>
        <member name="T:Caliburn.PresentationFramework.Actions.ActionLocationContext">
            <summary>
            Provides services and information for locating instances of <see cref="T:Caliburn.PresentationFramework.Actions.IAction"/>.
            </summary>
        </member>
        <member name="M:Caliburn.PresentationFramework.Actions.ActionLocationContext.#ctor(Microsoft.Practices.ServiceLocation.IServiceLocator,System.Type,Caliburn.PresentationFramework.Filters.IFilterManager)">
            <summary>
            Initializes a new instance of the <see cref="T:Caliburn.PresentationFramework.Actions.ActionLocationContext"/> class.
            </summary>
            <param name="serviceLocator">The service locator.</param>
            <param name="targetType">Type of the target.</param>
            <param name="targetFilters">The target filters.</param>
        </member>
        <member name="P:Caliburn.PresentationFramework.Actions.ActionLocationContext.TargetType">
            <summary>
            Gets or sets the type of the target.
            </summary>
            <value>The type of the target.</value>
        </member>
        <member name="P:Caliburn.PresentationFramework.Actions.ActionLocationContext.TargetFilters">
            <summary>
            Gets or sets the target filters.
            </summary>
            <value>The target filters.</value>
        </member>
        <member name="P:Caliburn.PresentationFramework.Actions.ActionLocationContext.ServiceLocator">
            <summary>
            Gets or sets the service locator.
            </summary>
            <value>The service locator.</value>
        </member>
        <member name="T:Caliburn.PresentationFramework.Actions.ActionMessage">
            <summary>
            An <see cref="T:Caliburn.PresentationFramework.RoutedMessaging.IRoutedMessage"/> for actions.
            </summary>
        </member>
        <member name="T:Caliburn.PresentationFramework.RoutedMessaging.IRoutedMessageWithOutcome">
            <summary>
            Allows am <see cref="T:Caliburn.PresentationFramework.RoutedMessaging.IMessageBinder"/> to bind return values.
            </summary>
        </member>
        <member name="T:Caliburn.PresentationFramework.RoutedMessaging.IRoutedMessage">
            <summary>
            Instances of this interface can be routed through the interaction hierarchy.
            </summary>
        </member>
        <member name="M:Caliburn.PresentationFramework.RoutedMessaging.IRoutedMessage.Initialize(Caliburn.PresentationFramework.RoutedMessaging.IInteractionNode)">
            <summary>
            Initializes the message for interaction with the specified node.
            </summary>
            <param name="node">The node.</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.RoutedMessaging.IRoutedMessage.RelatesTo(System.Object)">
            <summary>
            Indicates whether this message is related to the potential target.
            </summary>
            <param name="potentialTarget">The potential target.</param>
            <returns></returns>
        </member>
        <member name="M:Caliburn.PresentationFramework.RoutedMessaging.IRoutedMessage.GetDefaultHandlers(Caliburn.PresentationFramework.RoutedMessaging.IInteractionNode)">
            <summary>
            Gets the default handlers for this type of message.
            </summary>
            <param name="node">The node to get default handlers for.</param>
            <returns></returns>
        </member>
        <member name="P:Caliburn.PresentationFramework.RoutedMessaging.IRoutedMessage.AvailabilityEffect">
            <summary>
            Gets or sets the availability effect.
            </summary>
            <value>The availability effect.</value>
        </member>
        <member name="P:Caliburn.PresentationFramework.RoutedMessaging.IRoutedMessage.Source">
            <summary>
            Gets the source of the message.
            </summary>
            <value>The source.</value>
        </member>
        <member name="P:Caliburn.PresentationFramework.RoutedMessaging.IRoutedMessage.Parameters">
            <summary>
            Gets the parameters.
            </summary>
            <value>The parameters.</value>
        </member>
        <member name="E:Caliburn.PresentationFramework.RoutedMessaging.IRoutedMessage.Invalidated">
            <summary>
            Occurs when the message is invalidated.
            </summary>
        </member>
        <member name="P:Caliburn.PresentationFramework.RoutedMessaging.IRoutedMessageWithOutcome.OutcomePath">
            <summary>
            Gets or sets the path to use in binding the <see cref="T:Caliburn.PresentationFramework.RoutedMessaging.MessageProcessingOutcome"/>.
            </summary>
            <value>The outcome path.</value>
        </member>
        <member name="P:Caliburn.PresentationFramework.RoutedMessaging.IRoutedMessageWithOutcome.DefaultOutcomeElement">
            <summary>
            Gets the default element to bind to if no outcome path is specified.
            </summary>
            <value>The default element.</value>
        </member>
        <member name="F:Caliburn.PresentationFramework.Actions.ActionMessage.ParametersProperty">
            <summary>
            Represents the parameters of an action message.
            </summary>
        </member>
        <member name="F:Caliburn.PresentationFramework.Actions.ActionMessage.MethodNameProperty">
            <summary>
            Represents the method name of an action message.
            </summary>
        </member>
        <member name="F:Caliburn.PresentationFramework.Actions.ActionMessage.OutcomePathProperty">
            <summary>
            Represents the return path of an action message.
            </summary>
        </member>
        <member name="F:Caliburn.PresentationFramework.Actions.ActionMessage.AvailabilityEffectProperty">
            <summary>
            Represents the availability effect of an action message.
            </summary>
        </member>
        <member name="M:Caliburn.PresentationFramework.Actions.ActionMessage.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Caliburn.PresentationFramework.Actions.ActionMessage"/> class.
            </summary>
        </member>
        <member name="M:Caliburn.PresentationFramework.Actions.ActionMessage.Initialize(Caliburn.PresentationFramework.RoutedMessaging.IInteractionNode)">
            <summary>
            Initializes the message for interaction with the specified node.
            </summary>
            <param name="node">The node.</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.Actions.ActionMessage.RelatesTo(System.Object)">
            <summary>
            Indicates whether this message is related to the potential target.
            </summary>
            <param name="potentialTarget">The potential target.</param>
            <returns></returns>
        </member>
        <member name="M:Caliburn.PresentationFramework.Actions.ActionMessage.CreateInstanceCore">
            <summary>
            When implemented in a derived class, creates a new instance of the <see cref="T:System.Windows.Freezable"/> derived class.
            </summary>
            <returns>The new instance.</returns>
        </member>
        <member name="M:Caliburn.PresentationFramework.Actions.ActionMessage.Equals(Caliburn.PresentationFramework.RoutedMessaging.IRoutedMessage)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>
            true if the current object is equal to the <paramref name="other"/> parameter; otherwise, false.
            </returns>
        </member>
        <member name="M:Caliburn.PresentationFramework.Actions.ActionMessage.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="M:Caliburn.PresentationFramework.Actions.ActionMessage.GetDefaultHandlers(Caliburn.PresentationFramework.RoutedMessaging.IInteractionNode)">
            <summary>
            Gets the default handlers for this type of message.
            </summary>
            <param name="node">The node to get default handlers for.</param>
            <returns></returns>
        </member>
        <member name="P:Caliburn.PresentationFramework.Actions.ActionMessage.MethodName">
            <summary>
            Gets or sets the name of the method to be invoked on the presentation model class.
            </summary>
            <value>The name of the method.</value>
        </member>
        <member name="P:Caliburn.PresentationFramework.Actions.ActionMessage.OutcomePath">
            <summary>
            Gets or sets the path to use in binding the return value.
            </summary>
            <value>The return path.</value>
        </member>
        <member name="P:Caliburn.PresentationFramework.Actions.ActionMessage.DefaultOutcomeElement">
            <summary>
            Gets the default element to bind to if no return path is specified.
            </summary>
            <value>The default element.</value>
        </member>
        <member name="P:Caliburn.PresentationFramework.Actions.ActionMessage.AvailabilityEffect">
            <summary>
            Gets or sets the availability effect.
            </summary>
            <value>The availability effect.</value>
        </member>
        <member name="P:Caliburn.PresentationFramework.Actions.ActionMessage.Parameters">
            <summary>
            Gets the parameters to pass as part of the method invocation.
            </summary>
            <value>The parameters.</value>
        </member>
        <member name="P:Caliburn.PresentationFramework.Actions.ActionMessage.Source">
            <summary>
            Gets the source of the message.
            </summary>
            <value>The source.</value>
        </member>
        <member name="E:Caliburn.PresentationFramework.Actions.ActionMessage.Invalidated">
            <summary>
            Occurs when the message is invalidated.
            </summary>
        </member>
        <member name="T:Caliburn.PresentationFramework.Actions.ActionMessageHandler">
            <summary>
            An implementation of <see cref="T:Caliburn.PresentationFramework.RoutedMessaging.IRoutedMessageController"/> for action messages.
            </summary>
        </member>
        <member name="T:Caliburn.PresentationFramework.RoutedMessaging.IRoutedMessageHandler">
            <summary>
            Implemented by classes that handler routed messages.
            </summary>
        </member>
        <member name="M:Caliburn.PresentationFramework.RoutedMessaging.IRoutedMessageHandler.Initialize(Caliburn.PresentationFramework.RoutedMessaging.IInteractionNode)">
            <summary>
            Initializes this handler on the specified node.
            </summary>
            <param name="node">The node.</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.RoutedMessaging.IRoutedMessageHandler.Unwrap">
            <summary>
            Gets the underlying object instance to which this handler routes requests.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Caliburn.PresentationFramework.RoutedMessaging.IRoutedMessageHandler.Handles(Caliburn.PresentationFramework.RoutedMessaging.IRoutedMessage)">
            <summary>
            Indicates whether this instance can handle the speicified message.
            </summary>
            <param name="message">The message.</param>
            <returns></returns>
        </member>
        <member name="M:Caliburn.PresentationFramework.RoutedMessaging.IRoutedMessageHandler.Process(Caliburn.PresentationFramework.RoutedMessaging.IRoutedMessage,System.Object)">
            <summary>
            Processes the specified message.
            </summary>
            <param name="message">The message.</param>
            <param name="context">An object that provides additional context for message processing.</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.RoutedMessaging.IRoutedMessageHandler.UpdateAvailability(Caliburn.PresentationFramework.RoutedMessaging.IMessageTrigger)">
            <summary>
            Updates the availability of the trigger.
            </summary>
            <param name="trigger">The trigger.</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.RoutedMessaging.IRoutedMessageHandler.MakeAwareOf(Caliburn.PresentationFramework.RoutedMessaging.IMessageTrigger)">
            <summary>
            Makes the handler aware of a specific trigger.
            </summary>
            <param name="trigger">The trigger.</param>
        </member>
        <member name="P:Caliburn.PresentationFramework.RoutedMessaging.IRoutedMessageHandler.Metadata">
            <summary>
            Gets the metadata.
            </summary>
            <value>The metadata.</value>
        </member>
        <member name="M:Caliburn.PresentationFramework.Actions.ActionMessageHandler.#ctor(Caliburn.PresentationFramework.Actions.IActionHost,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Caliburn.PresentationFramework.Actions.ActionMessageHandler"/> class.
            </summary>
            <param name="host">The host.</param>
            <param name="target">The target.</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.Actions.ActionMessageHandler.Initialize(Caliburn.PresentationFramework.RoutedMessaging.IInteractionNode)">
            <summary>
            Initializes this handler on the specified node.
            </summary>
            <param name="node">The node.</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.Actions.ActionMessageHandler.Unwrap">
            <summary>
            Gets the data context value.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Caliburn.PresentationFramework.Actions.ActionMessageHandler.Handles(Caliburn.PresentationFramework.RoutedMessaging.IRoutedMessage)">
            <summary>
            Determines whethyer the target can handle the specified action.
            </summary>
            <param name="message">The action details.</param>
            <returns></returns>
        </member>
        <member name="M:Caliburn.PresentationFramework.Actions.ActionMessageHandler.Process(Caliburn.PresentationFramework.RoutedMessaging.IRoutedMessage,System.Object)">
            <summary>
            Processes the specified message.
            </summary>
            <param name="message">The message.</param>
            <param name="context">An object that provides additional context for message processing.</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.Actions.ActionMessageHandler.UpdateAvailability(Caliburn.PresentationFramework.RoutedMessaging.IMessageTrigger)">
            <summary>
            Updates the availability of the trigger.
            </summary>
            <param name="trigger">The trigger.</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.Actions.ActionMessageHandler.MakeAwareOf(Caliburn.PresentationFramework.RoutedMessaging.IMessageTrigger)">
            <summary>
            Makes the handler aware of a specific trigger.
            </summary>
            <param name="trigger">The trigger.</param>
        </member>
        <member name="P:Caliburn.PresentationFramework.Actions.ActionMessageHandler.Host">
            <summary>
            Gets the host.
            </summary>
            <value>The host.</value>
        </member>
        <member name="P:Caliburn.PresentationFramework.Actions.ActionMessageHandler.Metadata">
            <summary>
            Gets the metadata.
            </summary>
            <value>The metadata.</value>
        </member>
        <member name="T:Caliburn.PresentationFramework.Actions.ActionMessageParser">
            <summary>
            An implementation of <see cref="T:Caliburn.PresentationFramework.Actions.ActionMessage"/> for <see cref="T:Caliburn.PresentationFramework.RoutedMessaging.Parsers.IMessageParser"/>.
            </summary>
        </member>
        <member name="T:Caliburn.PresentationFramework.RoutedMessaging.Parsers.MessageParserBase`1">
            <summary>
            An base implementation of <see cref="T:Caliburn.PresentationFramework.RoutedMessaging.Parsers.IMessageParser"/>.
            </summary>
        </member>
        <member name="T:Caliburn.PresentationFramework.RoutedMessaging.Parsers.IMessageParser">
            <summary>
            Parses an <see cref="T:Caliburn.PresentationFramework.RoutedMessaging.IRoutedMessage"/> from text.
            </summary>
        </member>
        <member name="M:Caliburn.PresentationFramework.RoutedMessaging.Parsers.IMessageParser.Parse(System.Windows.DependencyObject,System.String)">
            <summary>
            Parses the specified message text.
            </summary>
            <param name="target">The targeted UI element.</param>
            <param name="messageText">The message text.</param>
            <returns></returns>
        </member>
        <member name="M:Caliburn.PresentationFramework.RoutedMessaging.Parsers.MessageParserBase`1.#ctor(Caliburn.PresentationFramework.Conventions.IConventionManager,Caliburn.PresentationFramework.RoutedMessaging.IMessageBinder)">
            <summary>
            Initializes a new instance of the <see cref="T:Caliburn.PresentationFramework.RoutedMessaging.Parsers.MessageParserBase`1"/> class.
            </summary>
        </member>
        <member name="M:Caliburn.PresentationFramework.RoutedMessaging.Parsers.MessageParserBase`1.#ctor(Caliburn.PresentationFramework.Conventions.IConventionManager,Caliburn.PresentationFramework.RoutedMessaging.IMessageBinder,System.Windows.Data.UpdateSourceTrigger)">
            <summary>
            Initializes a new instance of the <see cref="T:Caliburn.PresentationFramework.RoutedMessaging.Parsers.MessageParserBase`1"/> class.
            </summary>
            <param name="conventionManager">The convention manager.</param>
            <param name="messageBinder">The message binder.</param>
            <param name="defaultTrigger">The default trigger.</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.RoutedMessaging.Parsers.MessageParserBase`1.Parse(System.Windows.DependencyObject,System.String)">
            <summary>
            Parses the specified message text.
            </summary>
            <param name="target">The targeted UI element.</param>
            <param name="messageText">The message text.</param>
            <returns></returns>
        </member>
        <member name="M:Caliburn.PresentationFramework.RoutedMessaging.Parsers.MessageParserBase`1.SetCore(`0,System.Windows.DependencyObject,System.String)">
            <summary>
            Sets the core value of the message.
            </summary>
            <param name="message">The message.</param>
            <param name="target">The target.</param>
            <param name="coreOfMessage">The core representation of the message.</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.RoutedMessaging.Parsers.MessageParserBase`1.ParseHeadAndTail(System.String,`0)">
            <summary>
            Parses the root portion of the message.
            </summary>
            <param name="messageText">The message text.</param>
            <param name="message">The message.</param>
            <returns></returns>
        </member>
        <member name="M:Caliburn.PresentationFramework.Actions.ActionMessageParser.#ctor(Caliburn.PresentationFramework.Conventions.IConventionManager,Caliburn.PresentationFramework.RoutedMessaging.IMessageBinder)">
            <summary>
            Initializes a new instance of the <see cref="T:Caliburn.PresentationFramework.Actions.ActionMessageParser"/> class.
            </summary>
            <param name="conventionManager">The convention manager.</param>
            <param name="messageBinder">The message binder.</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.Actions.ActionMessageParser.#ctor(Caliburn.PresentationFramework.Conventions.IConventionManager,Caliburn.PresentationFramework.RoutedMessaging.IMessageBinder,System.Windows.Data.UpdateSourceTrigger)">
            <summary>
            Initializes a new instance of the <see cref="T:Caliburn.PresentationFramework.Actions.ActionMessageParser"/> class.
            </summary>
            <param name="conventionManager">The convention manager.</param>
            <param name="messageBinder">The message binder.</param>
            <param name="defaultTrigger">The default trigger.</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.Actions.ActionMessageParser.ParseHeadAndTail(System.String,Caliburn.PresentationFramework.Actions.ActionMessage)">
            <summary>
            Parses the root portion of the message.
            </summary>
            <param name="messageText">The message text.</param>
            <param name="message">The message.</param>
            <returns></returns>
        </member>
        <member name="M:Caliburn.PresentationFramework.Actions.ActionMessageParser.SetCore(Caliburn.PresentationFramework.Actions.ActionMessage,System.Windows.DependencyObject,System.String)">
            <summary>
            Sets the core value of the message.
            </summary>
            <param name="message">The message.</param>
            <param name="target">The target.</param>
            <param name="coreOfMessage">The core representation of the message.</param>
        </member>
        <member name="T:Caliburn.PresentationFramework.Actions.AsyncActionAttribute">
            <summary>
            Designates an action as asynchronous.
            </summary>
        </member>
        <member name="T:Caliburn.PresentationFramework.Filters.IInitializable">
            <summary>
            An <see cref="T:Caliburn.PresentationFramework.Filters.IFilter"/> that requires initialization.
            </summary>
        </member>
        <member name="T:Caliburn.PresentationFramework.Filters.IFilter">
            <summary>
            A filter.
            </summary>
        </member>
        <member name="P:Caliburn.PresentationFramework.Filters.IFilter.Priority">
            <summary>
            Gets the priority used to order filters.
            </summary>
            <remarks>Higher numbers are evaluated first.</remarks>
            <value>The order.</value>
        </member>
        <member name="M:Caliburn.PresentationFramework.Filters.IInitializable.Initialize(System.Type,System.Reflection.MemberInfo,Microsoft.Practices.ServiceLocation.IServiceLocator)">
            <summary>
            Initializes the filter.
            </summary>
            <param name="targetType">Type of the target.</param>
            <param name="member">The member.</param>
            <param name="serviceLocator">The serviceLocator.</param>
        </member>
        <member name="T:Caliburn.PresentationFramework.Filters.IPostProcessor">
            <summary>
            A filter that is executed after something.
            </summary>
        </member>
        <member name="M:Caliburn.PresentationFramework.Filters.IPostProcessor.Execute(Caliburn.PresentationFramework.RoutedMessaging.IRoutedMessage,Caliburn.PresentationFramework.RoutedMessaging.IInteractionNode,Caliburn.PresentationFramework.RoutedMessaging.MessageProcessingOutcome)">
            <summary>
            Executes the filter.
            </summary>
            <param name="outcome">The outcome of processing the message</param>
            <param name="message">The message.</param>
            <param name="handlingNode">The handling node.</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.Actions.AsyncActionAttribute.Initialize(System.Type,System.Reflection.MemberInfo,Microsoft.Practices.ServiceLocation.IServiceLocator)">
            <summary>
            Initializes the filter.
            </summary>
            <param name="targetType">Type of the target.</param>
            <param name="member">The member.</param>
            <param name="serviceLocator">The service locator.</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.Actions.AsyncActionAttribute.Execute(Caliburn.PresentationFramework.RoutedMessaging.IRoutedMessage,Caliburn.PresentationFramework.RoutedMessaging.IInteractionNode,Caliburn.PresentationFramework.RoutedMessaging.MessageProcessingOutcome)">
            <summary>
            Executes the filter.
            </summary>
            <param name="message">The message.</param>
            <param name="handlingNode">The handling node.</param>
            <param name="outcome">The outcome of processing the message</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.Actions.AsyncActionAttribute.Create(Caliburn.PresentationFramework.Actions.ActionCreationContext)">
            <summary>
            Creates an <see cref="T:Caliburn.PresentationFramework.Actions.IAction"/> using the specified context.
            </summary>
            <param name="context">The context.</param>
            <returns>The <see cref="T:Caliburn.PresentationFramework.Actions.IAction"/>.</returns>
        </member>
        <member name="P:Caliburn.PresentationFramework.Actions.AsyncActionAttribute.BlockInteraction">
            <summary>
            Gets or sets a value indicating whether to block interaction with the trigger during asynchronous execution.
            </summary>
            <value><c>true</c> if should block; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Caliburn.PresentationFramework.Actions.AsyncActionAttribute.Callback">
            <summary>
            Gets or sets the callback method.
            </summary>
            <value>The callback.</value>
        </member>
        <member name="P:Caliburn.PresentationFramework.Actions.AsyncActionAttribute.Priority">
            <summary>
            Gets the order the filter will be evaluated in.
            </summary>
            <value>The order.</value>
        </member>
        <member name="T:Caliburn.PresentationFramework.Actions.AsynchronousAction">
            <summary>
            An asynchronous <see cref="T:Caliburn.PresentationFramework.Actions.IAction"/>.
            </summary>
        </member>
        <member name="M:Caliburn.PresentationFramework.Actions.AsynchronousAction.#ctor(Microsoft.Practices.ServiceLocation.IServiceLocator,Caliburn.Core.Invocation.IMethod,Caliburn.PresentationFramework.RoutedMessaging.IMessageBinder,Caliburn.PresentationFramework.Filters.IFilterManager,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Caliburn.PresentationFramework.Actions.AsynchronousAction"/> class.
            </summary>
            <param name="serviceLocator">The service locator.</param>
            <param name="method">The method.</param>
            <param name="messageBinder">The method binder.</param>
            <param name="filters">The filters.</param>
            <param name="blockInteraction">if set to <c>true</c> blocks interaction.</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.Actions.AsynchronousAction.Execute(Caliburn.PresentationFramework.Actions.ActionMessage,Caliburn.PresentationFramework.RoutedMessaging.IInteractionNode,System.Object)">
            <summary>
            Executes the specified this action on the specified target.
            </summary>
            <param name="actionMessage">The action message.</param>
            <param name="handlingNode">The node.</param>
            <param name="context">The context.</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.Actions.AsynchronousAction.DoExecute(Caliburn.PresentationFramework.Actions.ActionMessage,Caliburn.PresentationFramework.RoutedMessaging.IInteractionNode,System.Object[])">
            <summary>
            Executes the core logic, specific to the action type.
            </summary>
            <param name="actionMessage">The action message.</param>
            <param name="handlingNode">The node.</param>
            <param name="parameters">The parameters.</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.Actions.AsynchronousAction.ShouldTriggerBeAvailable(Caliburn.PresentationFramework.Actions.ActionMessage,Caliburn.PresentationFramework.RoutedMessaging.IInteractionNode)">
            <summary>
            Determines how this instance affects trigger availability.
            </summary>
            <param name="actionMessage">The action message.</param>
            <param name="handlingNode">The node.</param>
            <returns>
            	<c>true</c> if this instance enables triggers; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="P:Caliburn.PresentationFramework.Actions.AsynchronousAction.CurrentTask">
            <summary>
            Gets or sets the current background task.
            </summary>
            <value>The current task.</value>
        </member>
        <member name="T:Caliburn.PresentationFramework.Actions.DefaultActionLocator">
            <summary>
            The default implementation of <see cref="T:Caliburn.PresentationFramework.Actions.IActionLocator"/>.
            </summary>
        </member>
        <member name="T:Caliburn.PresentationFramework.Actions.IActionLocator">
            <summary>
            A service responsible for locating actions.
            </summary>
        </member>
        <member name="M:Caliburn.PresentationFramework.Actions.IActionLocator.Locate(Caliburn.PresentationFramework.Actions.ActionLocationContext)">
            <summary>
            Locates actions using the specified context.
            </summary>
            <param name="context">The context.</param>
            <returns>Discovered actions.</returns>
        </member>
        <member name="M:Caliburn.PresentationFramework.Actions.DefaultActionLocator.#ctor(Microsoft.Practices.ServiceLocation.IServiceLocator,Caliburn.Core.Invocation.IMethodFactory,Caliburn.PresentationFramework.RoutedMessaging.IMessageBinder,Caliburn.PresentationFramework.Conventions.IConventionManager)">
            <summary>
            Initializes a new instance of the <see cref="T:Caliburn.PresentationFramework.Actions.DefaultActionLocator"/> class.
            </summary>
            <param name="serviceLocator">The service locator.</param>
            <param name="methodFactory">The method factory.</param>
            <param name="messageBinder">The message binder.</param>
            <param name="conventionManager">The convention manager.</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.Actions.DefaultActionLocator.Locate(Caliburn.PresentationFramework.Actions.ActionLocationContext)">
            <summary>
            Locates actions for the specified context.
            </summary>
            <param name="context">The context.</param>
            <returns>Discovered actions.</returns>
        </member>
        <member name="M:Caliburn.PresentationFramework.Actions.DefaultActionLocator.SelectMethods(System.Type)">
            <summary>
            Selects the methods approprate for actions.
            </summary>
            <param name="targetType">Type of the target.</param>
            <returns>The action appropriate methods.</returns>
        </member>
        <member name="M:Caliburn.PresentationFramework.Actions.DefaultActionLocator.CreateAction(System.Type,Caliburn.PresentationFramework.Filters.IFilterManager,System.Reflection.MethodInfo)">
            <summary>
            Creates the action.
            </summary>
            <param name="targetType">Type of the target.</param>
            <param name="targetFilters">The target filters.</param>
            <param name="methodInfo">The method info.</param>
            <returns>The action.</returns>
        </member>
        <member name="T:Caliburn.PresentationFramework.Actions.IActionHost">
            <summary>
            Hosts instances of <see cref="T:Caliburn.PresentationFramework.Actions.IAction"/> and related metadata.
            </summary>
        </member>
        <member name="M:Caliburn.PresentationFramework.Actions.IActionHost.GetAction(Caliburn.PresentationFramework.Actions.ActionMessage)">
            <summary>
            Gets the action.
            </summary>
            <param name="message">The action message.</param>
            <returns></returns>
        </member>
        <member name="P:Caliburn.PresentationFramework.Actions.IActionHost.TargetType">
            <summary>
            Gets the type of the target.
            </summary>
            <value>The type of the target.</value>
        </member>
        <member name="P:Caliburn.PresentationFramework.Actions.IActionHost.Filters">
            <summary>
            Gets the filters.
            </summary>
            <value>The filters.</value>
        </member>
        <member name="P:Caliburn.PresentationFramework.Actions.IActionHost.Actions">
            <summary>
            Gets the actions.
            </summary>
            <value>The actions.</value>
        </member>
        <member name="T:Caliburn.PresentationFramework.Actions.OverloadedAction">
            <summary>
            An overloaded <see cref="T:Caliburn.PresentationFramework.Actions.IAction"/>.
            </summary>
        </member>
        <member name="M:Caliburn.PresentationFramework.Actions.OverloadedAction.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Caliburn.PresentationFramework.Actions.OverloadedAction"/> class.
            </summary>
            <param name="name">The name.</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.Actions.OverloadedAction.Matches(Caliburn.PresentationFramework.Actions.ActionMessage)">
            <summary>
            Determines whether this action matches the specified message.
            </summary>
            <param name="message">The message.</param>
            <returns></returns>
        </member>
        <member name="M:Caliburn.PresentationFramework.Actions.OverloadedAction.AddOverload(Caliburn.PresentationFramework.Actions.IAction)">
            <summary>
            Adds the overload.
            </summary>
            <param name="action">The action.</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.Actions.OverloadedAction.DetermineOverloadOrFail(Caliburn.PresentationFramework.Actions.ActionMessage)">
            <summary>
            Determines the overload or fail.
            </summary>
            <param name="message">The message.</param>
            <returns></returns>
        </member>
        <member name="M:Caliburn.PresentationFramework.Actions.OverloadedAction.ShouldTriggerBeAvailable(Caliburn.PresentationFramework.Actions.ActionMessage,Caliburn.PresentationFramework.RoutedMessaging.IInteractionNode)">
            <summary>
            Determines how this instance affects trigger availability.
            </summary>
            <param name="actionMessage">The action message.</param>
            <param name="handlingNode">The node.</param>
            <returns>
            	<c>true</c> if this instance enables triggers; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Caliburn.PresentationFramework.Actions.OverloadedAction.Execute(Caliburn.PresentationFramework.Actions.ActionMessage,Caliburn.PresentationFramework.RoutedMessaging.IInteractionNode,System.Object)">
            <summary>
            Executes the specified this action on the specified target.
            </summary>
            <param name="actionMessage">The action message.</param>
            <param name="handlingNode">The node.</param>
            <param name="context">The context.</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.Actions.OverloadedAction.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"/> that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:Caliburn.PresentationFramework.Actions.OverloadedAction.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:Caliburn.PresentationFramework.Actions.OverloadedAction.OnCompleted">
            <summary>
            Called when completed event needs to fire.
            </summary>
        </member>
        <member name="P:Caliburn.PresentationFramework.Actions.OverloadedAction.Name">
            <summary>
            Gets the name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:Caliburn.PresentationFramework.Actions.OverloadedAction.Requirements">
            <summary>
            Gets the requirements.
            </summary>
            <value>The requirements.</value>
        </member>
        <member name="E:Caliburn.PresentationFramework.Actions.OverloadedAction.Completed">
            <summary>
            Occurs when action has completed.
            </summary>
        </member>
        <member name="P:Caliburn.PresentationFramework.Actions.OverloadedAction.Filters">
            <summary>
            Gets the filters.
            </summary>
            <value>The filters.</value>
        </member>
        <member name="T:Caliburn.PresentationFramework.Actions.SynchronousAction">
            <summary>
            A synchronous <see cref="T:Caliburn.PresentationFramework.Actions.IAction"/>.
            </summary>
        </member>
        <member name="M:Caliburn.PresentationFramework.Actions.SynchronousAction.#ctor(Microsoft.Practices.ServiceLocation.IServiceLocator,Caliburn.Core.Invocation.IMethod,Caliburn.PresentationFramework.RoutedMessaging.IMessageBinder,Caliburn.PresentationFramework.Filters.IFilterManager,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Caliburn.PresentationFramework.Actions.SynchronousAction"/> class.
            </summary>
            <param name="serviceLocator">The service locator.</param>
            <param name="method">The method.</param>
            <param name="messageBinder">The method binder.</param>
            <param name="filters">The filters.</param>
            <param name="blockInteraction">if set to <c>true</c> blocks interaction.</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.Actions.SynchronousAction.Execute(Caliburn.PresentationFramework.Actions.ActionMessage,Caliburn.PresentationFramework.RoutedMessaging.IInteractionNode,System.Object)">
            <summary>
            Executes the specified this action on the specified target.
            </summary>
            <param name="actionMessage">The action message.</param>
            <param name="handlingNode">The node.</param>
            <param name="context">The context.</param>
        </member>
        <member name="T:Caliburn.PresentationFramework.ApplicationModel.ApplicationModelExtensions">
            <summary>
            Hosts extension methods for application model classes.
            </summary>
        </member>
        <member name="M:Caliburn.PresentationFramework.ApplicationModel.ApplicationModelExtensions.Focus``2(Caliburn.PresentationFramework.ApplicationModel.IInputManager,``0,System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            Focuses the control bound to the property on the view model.
            </summary>
            <param name="inputManager">The input manager.</param>
            <param name="viewModel">The view model.</param>
            <param name="property">The property.</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.ApplicationModel.ApplicationModelExtensions.InsertOrUpdate``1(Caliburn.PresentationFramework.ApplicationModel.IStateManager,System.String,``0)">
            <summary>
            Inserts or updates a value in the state.
            </summary>
            <param name="state">The state.</param>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.ApplicationModel.ApplicationModelExtensions.Get``1(Caliburn.PresentationFramework.ApplicationModel.IStateManager,System.String,``0)">
            <summary>
            Gets the value with the specified key.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="state">The state.</param>
            <param name="key">The key.</param>
            <param name="defaultValue">The default value.</param>
            <returns></returns>
        </member>
        <member name="M:Caliburn.PresentationFramework.ApplicationModel.ApplicationModelExtensions.Show(Caliburn.PresentationFramework.ApplicationModel.IWindowManager,System.Object)">
            <summary>
            Shows the window for the model.
            </summary>
            <param name="manager">The manager.</param>
            <param name="rootModel">The root model.</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.ApplicationModel.ApplicationModelExtensions.ShowDialog(Caliburn.PresentationFramework.ApplicationModel.IWindowManager,System.Object)">
            <summary>
            Shows the dialog for the model.
            </summary>
            <param name="manager">The manager.</param>
            <param name="rootModel">The root model.</param>
            <returns>The dialog result</returns>
        </member>
        <member name="T:Caliburn.PresentationFramework.ApplicationModel.CaliburnApplication">
            <summary>
            A base class for applications based on Caliburn.
            </summary>
        </member>
        <member name="M:Caliburn.PresentationFramework.ApplicationModel.CaliburnApplication.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Caliburn.PresentationFramework.ApplicationModel.CaliburnApplication"/> class.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            More than one instance of the <see cref="T:System.Windows.Application"/> class is created per <see cref="T:System.AppDomain"/>.
            </exception>
        </member>
        <member name="M:Caliburn.PresentationFramework.ApplicationModel.CaliburnApplication.OnStartup(System.Windows.StartupEventArgs)">
            <summary>
            Raises the <see cref="E:System.Windows.Application.Startup"/> event.
            </summary>
            <param name="e">A <see cref="T:System.Windows.StartupEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.ApplicationModel.CaliburnApplication.ShowMainWindow(System.Object)">
            <summary>
            Shows the main window based on the provided model.
            </summary>
            <param name="rootModel">The root model.</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.ApplicationModel.CaliburnApplication.CreateRootModel">
            <summary>
            Creates the root application model.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Caliburn.PresentationFramework.ApplicationModel.CaliburnApplication.CreateContainer">
            <summary>
            Creates the container.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Caliburn.PresentationFramework.ApplicationModel.CaliburnApplication.Register(System.Collections.Generic.IEnumerable{Caliburn.Core.IoC.IComponentRegistration})">
            <summary>
            Configures Caliburn's components.
            </summary>
            <param name="registrations">The component registrations.</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.ApplicationModel.CaliburnApplication.SelectAssemblies">
            <summary>
            Selects the assemblies which Caliburn will be able to inspect for components, views, etc.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Caliburn.PresentationFramework.ApplicationModel.CaliburnApplication.BeforeConfiguration">
            <summary>
            Called before the Caliburn initialization phase. 
            </summary>
        </member>
        <member name="M:Caliburn.PresentationFramework.ApplicationModel.CaliburnApplication.ConfigurePresentationFramework(Caliburn.PresentationFramework.Configuration.PresentationFrameworkConfiguration)">
            <summary>
            Configures the presentation framework module.
            </summary>
            <param name="module">The module.</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.ApplicationModel.CaliburnApplication.ConfigureCore(Caliburn.Core.Configuration.CoreConfiguration)">
            <summary>
            Configures the core module.
            </summary>
            <param name="module">The module.</param>
        </member>
        <member name="P:Caliburn.PresentationFramework.ApplicationModel.CaliburnApplication.Container">
            <summary>
            Gets the container.
            </summary>
            <value>The container.</value>
        </member>
        <member name="T:Caliburn.PresentationFramework.ApplicationModel.DefaultInputManager">
            <summary>
            The default implemenation of <see cref="T:Caliburn.PresentationFramework.ApplicationModel.IInputManager"/>.
            </summary>
        </member>
        <member name="T:Caliburn.PresentationFramework.ApplicationModel.IInputManager">
            <summary>
            Implemented by services that provide focus and key binding functionality.
            </summary>
        </member>
        <member name="M:Caliburn.PresentationFramework.ApplicationModel.IInputManager.Focus(System.Object)">
            <summary>
            Focuses the view bound to the view model.
            </summary>
            <param name="viewModel">The view model.</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.ApplicationModel.IInputManager.Focus(System.Object,System.String)">
            <summary>
            Focuses the control bound to the property on the view model.
            </summary>
            <param name="viewModel">The view model.</param>
            <param name="propertyPath">The property path.</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.ApplicationModel.IInputManager.GetAllShortcuts">
            <summary>
            Gets all shortcuts.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Caliburn.PresentationFramework.ApplicationModel.IInputManager.AddShortcut(Caliburn.PresentationFramework.ApplicationModel.IShortcut)">
            <summary>
            Adds the shortcut.
            </summary>
            <param name="shortcut">The shortcut.</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.ApplicationModel.IInputManager.RemoveShortcut(Caliburn.PresentationFramework.ApplicationModel.IShortcut)">
            <summary>
            Removes the shortcut.
            </summary>
            <param name="shortcut">The shortcut.</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.ApplicationModel.IInputManager.RegisterShortcutSource(System.Windows.UIElement)">
            <summary>
            Registers the shortcut source.
            </summary>
            <param name="element">The element.</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.ApplicationModel.IInputManager.UnregisterShortcutSource(System.Windows.UIElement)">
            <summary>
            Unregisters the shortcut source.
            </summary>
            <param name="element">The element.</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.ApplicationModel.IInputManager.GetDisplayString(System.Windows.Input.Key,System.Windows.Input.ModifierKeys)">
            <summary>
            Gets a display string representing this key combination.
            </summary>
            <param name="key">The key.</param>
            <param name="modifierKeys">The modifier keys.</param>
            <returns>The display string.</returns>
        </member>
        <member name="M:Caliburn.PresentationFramework.ApplicationModel.DefaultInputManager.Focus(System.Object)">
            <summary>
            Focuses the view bound to the view model.
            </summary>
            <param name="viewModel">The view model.</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.ApplicationModel.DefaultInputManager.Focus(System.Object,System.String)">
            <summary>
            Focuses the control bound to the property on the view model.
            </summary>
            <param name="viewModel">The view model.</param>
            <param name="propertyPath">The property path.</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.ApplicationModel.DefaultInputManager.GetAllShortcuts">
            <summary>
            Gets all shortcuts.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Caliburn.PresentationFramework.ApplicationModel.DefaultInputManager.AddShortcut(Caliburn.PresentationFramework.ApplicationModel.IShortcut)">
            <summary>
            Adds the shortcut.
            </summary>
            <param name="shortcut">The shortcut.</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.ApplicationModel.DefaultInputManager.RemoveShortcut(Caliburn.PresentationFramework.ApplicationModel.IShortcut)">
            <summary>
            Removes the shortcut.
            </summary>
            <param name="shortcut">The shortcut.</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.ApplicationModel.DefaultInputManager.RegisterShortcutSource(System.Windows.UIElement)">
            <summary>
            Registers the shortcut source.
            </summary>
            <param name="element">The element.</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.ApplicationModel.DefaultInputManager.UnregisterShortcutSource(System.Windows.UIElement)">
            <summary>
            Unregisters the shortcut source.
            </summary>
            <param name="element">The element.</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.ApplicationModel.DefaultInputManager.GetView(System.Object)">
            <summary>
            Gets the view bound to the specified model.
            </summary>
            <param name="model">The model.</param>
            <returns></returns>
        </member>
        <member name="T:Caliburn.PresentationFramework.ApplicationModel.DefaultWindowManager">
            <summary>
            An implementation of <see cref="T:Caliburn.PresentationFramework.ApplicationModel.IWindowManager"/>.
            </summary>
        </member>
        <member name="T:Caliburn.PresentationFramework.ApplicationModel.IWindowManager">
            <summary>
            A service that manages windows.
            </summary>
        </member>
        <member name="M:Caliburn.PresentationFramework.ApplicationModel.IWindowManager.Show(System.Object,System.Object)">
            <summary>
            Shows a window for the specified model.
            </summary>
            <param name="rootModel">The root model.</param>
            <param name="context">The context.</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.ApplicationModel.IWindowManager.ShowDialog(System.Object,System.Object)">
            <summary>
            Shows a modal dialog for the specified model.
            </summary>
            <param name="rootModel">The root model.</param>
            <param name="context">The context.</param>
            <returns></returns>
        </member>
        <member name="M:Caliburn.PresentationFramework.ApplicationModel.DefaultWindowManager.GetSignificantView(System.Windows.DependencyObject)">
            <summary>
            Gets the significant view.
            </summary>
            <param name="view">The view.</param>
            <returns>The non-generated view that was wrapped by Caliburn.</returns>
        </member>
        <member name="M:Caliburn.PresentationFramework.ApplicationModel.DefaultWindowManager.#ctor(Caliburn.PresentationFramework.Views.IViewLocator,Caliburn.PresentationFramework.ViewModels.IViewModelBinder)">
            <summary>
            Initializes a new instance of the <see cref="T:Caliburn.PresentationFramework.ApplicationModel.DefaultWindowManager"/> class.
            </summary>
            <param name="viewLocator">The view locator.</param>
            <param name="viewModelBinder">The view model binder.</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.ApplicationModel.DefaultWindowManager.ShowDialog(System.Object,System.Object)">
            <summary>
            Shows the dialog.
            </summary>
            <param name="rootModel">The root model.</param>
            <param name="context">The context.</param>
            <returns></returns>
        </member>
        <member name="M:Caliburn.PresentationFramework.ApplicationModel.DefaultWindowManager.Show(System.Object,System.Object)">
            <summary>
            Shows a window for the specified model.
            </summary>
            <param name="rootModel">The root model.</param>
            <param name="context">The context.</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.ApplicationModel.DefaultWindowManager.CreateWindow(System.Object,System.Boolean,System.Object)">
            <summary>
            Creates the window.
            </summary>
            <param name="rootModel">The root model.</param>
            <param name="isDialog">Indicates it is a dialog window.</param>
            <param name="context">The context.</param>
            <param name="handleShutdownModel">The handle shutdown model.</param>
            <returns></returns>
        </member>
        <member name="M:Caliburn.PresentationFramework.ApplicationModel.DefaultWindowManager.EnsureWindow(System.Object,System.Object,System.Boolean)">
            <summary>
            Ensures the that the view is a window or provides one.
            </summary>
            <param name="model">The model.</param>
            <param name="view">The view.</param>
            <param name="isDialog">Indicates we are insuring a dialog window.</param>
            <returns></returns>
        </member>
        <member name="M:Caliburn.PresentationFramework.ApplicationModel.DefaultWindowManager.CreatePage(System.Object,System.Object)">
            <summary>
            Creates the page.
            </summary>
            <param name="rootModel">The root model.</param>
            <param name="context">The context.</param>
            <returns></returns>
        </member>
        <member name="M:Caliburn.PresentationFramework.ApplicationModel.DefaultWindowManager.EnsurePage(System.Object,System.Object)">
            <summary>
            Ensures the view is a page or provides one.
            </summary>
            <param name="model">The model.</param>
            <param name="view">The view.</param>
            <returns></returns>
        </member>
        <member name="M:Caliburn.PresentationFramework.ApplicationModel.DefaultWindowManager.OnShutdownAttempted(Caliburn.PresentationFramework.Screens.IGuardClose,System.Windows.Window,System.ComponentModel.CancelEventArgs)">
            <summary>
            Called when shutdown attempted.
            </summary>
            <param name="guard">The guard.</param>
            <param name="view">The view.</param>
            <param name="e">The <see cref="T:System.ComponentModel.CancelEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="T:Caliburn.PresentationFramework.ApplicationModel.IShortcut">
            <summary>
            Represents a shortcut.
            </summary>
        </member>
        <member name="T:Caliburn.PresentationFramework.Screens.IHaveDisplayName">
            <summary>
            Denotes an instance which has a display name.
            </summary>
        </member>
        <member name="P:Caliburn.PresentationFramework.Screens.IHaveDisplayName.DisplayName">
            <summary>
            Gets or Sets the Display Name
            </summary>
        </member>
        <member name="M:Caliburn.PresentationFramework.ApplicationModel.IShortcut.Execute">
            <summary>
            Executes this instance.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Caliburn.PresentationFramework.ApplicationModel.IShortcut.Modifers">
            <summary>
            Gets or sets the modifers.
            </summary>
            <value>The modifers.</value>
        </member>
        <member name="P:Caliburn.PresentationFramework.ApplicationModel.IShortcut.Key">
            <summary>
            Gets or sets the key.
            </summary>
            <value>The key.</value>
        </member>
        <member name="P:Caliburn.PresentationFramework.ApplicationModel.IShortcut.CanExecute">
            <summary>
            Gets a value indicating whether this instance can execute.
            </summary>
            <value>
            	<c>true</c> if this instance can execute; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:Caliburn.PresentationFramework.ApplicationModel.IsolatedStorageStateManager">
            <summary>
            An implementation of <see cref="T:Caliburn.PresentationFramework.ApplicationModel.IStateManager"/> that uses isolated storage as its backing store.
            </summary>
        </member>
        <member name="T:Caliburn.PresentationFramework.PropertyChangedBase">
            <summary>
            A base class that implements the infrastructure for property change notification and automatically performs UI thread marshalling.
            </summary>
        </member>
        <member name="T:Caliburn.PresentationFramework.INotifyPropertyChangedEx">
            <summary>
            Extends <see cref="T:System.ComponentModel.INotifyPropertyChanged"/> such that the change event can be raised by external parties.
            </summary>
        </member>
        <member name="M:Caliburn.PresentationFramework.INotifyPropertyChangedEx.NotifyOfPropertyChange(System.String)">
            <summary>
            Notifies subscribers of the property change.
            </summary>
            <param name="propertyName">Name of the property.</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.PropertyChangedBase.NotifyOfPropertyChange(System.String)">
            <summary>
            Notifies subscribers of the property change.
            </summary>
            <param name="propertyName">Name of the property.</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.PropertyChangedBase.NotifyOfPropertyChange``1(System.Linq.Expressions.Expression{System.Func{``0}})">
            <summary>
            Notifies subscribers of the property change.
            </summary>
            <typeparam name="TProperty">The type of the property.</typeparam>
            <param name="propertyExpression">The property expression.</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.PropertyChangedBase.RaisePropertyChangedEventImmediately(System.String)">
            <summary>
            Raises the property changed event immediately.
            </summary>
            <param name="propertyName">Name of the property.</param>
        </member>
        <member name="E:Caliburn.PresentationFramework.PropertyChangedBase.PropertyChanged">
            <summary>
            Occurs when a property value changes.
            </summary>
        </member>
        <member name="T:Caliburn.PresentationFramework.ApplicationModel.IStateManager">
            <summary>
            Describes a service capable of managing basic state values.
            </summary>
        </member>
        <member name="M:Caliburn.PresentationFramework.ApplicationModel.IStateManager.Initialize(System.String)">
            <summary>
            Initializes the backing store.
            </summary>
            <param name="stateName">Name of the state.</param>
            <returns></returns>
        </member>
        <member name="M:Caliburn.PresentationFramework.ApplicationModel.IStateManager.CommitChanges(System.String)">
            <summary>
            Commits the changes to the backing store.
            </summary>
            <param name="stateName">Name of the state.</param>
            <returns></returns>
        </member>
        <member name="M:Caliburn.PresentationFramework.ApplicationModel.IStateManager.InsertOrUpdate(System.String,System.String)">
            <summary>
            Inserts or updates a value in the state.
            </summary>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.ApplicationModel.IStateManager.Get(System.String)">
            <summary>
            Gets the value with the specified key.
            </summary>
            <param name="key">The key.</param>
            <returns></returns>
        </member>
        <member name="M:Caliburn.PresentationFramework.ApplicationModel.IStateManager.Remove(System.String)">
            <summary>
            Removes the value with the specified key.
            </summary>
            <param name="key">The key.</param>
            <returns></returns>
        </member>
        <member name="E:Caliburn.PresentationFramework.ApplicationModel.IStateManager.AfterStateLoad">
            <summary>
            Occurs after the state was loaded from the backing store.
            </summary>
        </member>
        <member name="E:Caliburn.PresentationFramework.ApplicationModel.IStateManager.BeforeStateCommit">
            <summary>
            Occurs before the state is committed to the backing store.
            </summary>
        </member>
        <member name="M:Caliburn.PresentationFramework.ApplicationModel.IsolatedStorageStateManager.Initialize(System.String)">
            <summary>
            Initializes the backing store.
            </summary>
            <param name="stateName">Name of the state.</param>
            <returns></returns>
        </member>
        <member name="M:Caliburn.PresentationFramework.ApplicationModel.IsolatedStorageStateManager.CommitChanges(System.String)">
            <summary>
            Commits the changes.
            </summary>
            <param name="stateName">Name of the state.</param>
            <returns></returns>
        </member>
        <member name="M:Caliburn.PresentationFramework.ApplicationModel.IsolatedStorageStateManager.GetStorageFile">
            <summary>
            Gets the storage file.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Caliburn.PresentationFramework.ApplicationModel.IsolatedStorageStateManager.InsertOrUpdate(System.String,System.String)">
            <summary>
            Inserts or updates a value in the state.
            </summary>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.ApplicationModel.IsolatedStorageStateManager.Get(System.String)">
            <summary>
            Gets the value with the specified key.
            </summary>
            <param name="key">The key.</param>
            <returns></returns>
        </member>
        <member name="M:Caliburn.PresentationFramework.ApplicationModel.IsolatedStorageStateManager.Remove(System.String)">
            <summary>
            Removes the value with the specified key.
            </summary>
            <param name="key">The key.</param>
            <returns></returns>
        </member>
        <member name="E:Caliburn.PresentationFramework.ApplicationModel.IsolatedStorageStateManager.AfterStateLoad">
            <summary>
            Occurs after the state was loaded from the backing store.
            </summary>
        </member>
        <member name="E:Caliburn.PresentationFramework.ApplicationModel.IsolatedStorageStateManager.BeforeStateCommit">
            <summary>
            Occurs before the state is committed to the backing store.
            </summary>
        </member>
        <member name="T:Caliburn.PresentationFramework.Behaviors.DependencyMode">
            <summary>
            Inidicates how dependency tracking should occur.
            </summary>
        </member>
        <member name="F:Caliburn.PresentationFramework.Behaviors.DependencyMode.AlwaysRecord">
            <summary>
            Will record dependencies on every get.
            </summary>
        </member>
        <member name="F:Caliburn.PresentationFramework.Behaviors.DependencyMode.RecordOnce">
            <summary>
            Will record dependencies on the first get.
            </summary>
        </member>
        <member name="F:Caliburn.PresentationFramework.Behaviors.DependencyMode.DoNotRecord">
            <summary>
            Will not record dependencies.
            </summary>
        </member>
        <member name="T:Caliburn.PresentationFramework.Behaviors.DoNotNotifyAttribute">
            <summary>
            Used to indicate that a particular property should not raise change notification.
            </summary>
        </member>
        <member name="T:Caliburn.PresentationFramework.Behaviors.NotifyPropertyChangedAttribute">
            <summary>
            Applies a behavior which implements <see cref="T:System.ComponentModel.INotifyPropertyChanged"/>.
            </summary>
        </member>
        <member name="F:Caliburn.PresentationFramework.Behaviors.NotifyPropertyChangedAttribute.DefaultDependencyMode">
            <summary>
            Gets or sets the default dependency mode.
            </summary>
        </member>
        <member name="M:Caliburn.PresentationFramework.Behaviors.NotifyPropertyChangedAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Caliburn.PresentationFramework.Behaviors.NotifyPropertyChangedAttribute"/> class.
            </summary>
        </member>
        <member name="M:Caliburn.PresentationFramework.Behaviors.NotifyPropertyChangedAttribute.GetInterfaces(System.Type)">
            <summary>
            Gets the interfaces which represent this behavior.
            </summary>
            <param name="implementation">The implementation.</param>
            <returns>The representative interfaces.</returns>
        </member>
        <member name="P:Caliburn.PresentationFramework.Behaviors.NotifyPropertyChangedAttribute.DependencyMode">
            <summary>
            Gets or sets the dependency mode.
            </summary>
            <value>The dependency mode.</value>
        </member>
        <member name="T:Caliburn.PresentationFramework.Behaviors.ScreenAttribute">
            <summary>
            Applies a behavior which implements <see cref="T:Caliburn.PresentationFramework.Screens.IScreen"/>.
            </summary>
        </member>
        <member name="F:Caliburn.PresentationFramework.Behaviors.ScreenAttribute.DefaultDisplayName">
            <summary>
            Gets or sets the default display name property name.
            </summary>
            <value>The display name.</value>
        </member>
        <member name="F:Caliburn.PresentationFramework.Behaviors.ScreenAttribute.DefaultInitialize">
            <summary>
            Gets or sets the default initialize method name.
            </summary>
            <value>The initialize.</value>
        </member>
        <member name="F:Caliburn.PresentationFramework.Behaviors.ScreenAttribute.DefaultCanShutdown">
            <summary>
            Gets or sets the default can shutdown method name.
            </summary>
            <value>The can shutdown.</value>
        </member>
        <member name="F:Caliburn.PresentationFramework.Behaviors.ScreenAttribute.DefaultShutdown">
            <summary>
            Gets or sets the default shutdown method name.
            </summary>
            <value>The can shutdown.</value>
        </member>
        <member name="F:Caliburn.PresentationFramework.Behaviors.ScreenAttribute.DefaultActivate">
            <summary>
            Gets or sets the default activate method name.
            </summary>
            <value>The activate.</value>
        </member>
        <member name="F:Caliburn.PresentationFramework.Behaviors.ScreenAttribute.DefaultDeactivate">
            <summary>
            Gets or sets the default deactivate method name.
            </summary>
            <value>The deactivate.</value>
        </member>
        <member name="M:Caliburn.PresentationFramework.Behaviors.ScreenAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Caliburn.PresentationFramework.Behaviors.ScreenAttribute"/> class.
            </summary>
        </member>
        <member name="M:Caliburn.PresentationFramework.Behaviors.ScreenAttribute.GetInterfaces(System.Type)">
            <summary>
            Gets the interfaces which represent this behavior.
            </summary>
            <param name="implementation">The implementation.</param>
            <returns>The representative interfaces.</returns>
        </member>
        <member name="P:Caliburn.PresentationFramework.Behaviors.ScreenAttribute.DisplayName">
            <summary>
            Gets or sets the display name property name.
            </summary>
            <value>The display name.</value>
        </member>
        <member name="P:Caliburn.PresentationFramework.Behaviors.ScreenAttribute.Initialize">
            <summary>
            Gets or sets the initialize method name.
            </summary>
            <value>The initialize.</value>
        </member>
        <member name="P:Caliburn.PresentationFramework.Behaviors.ScreenAttribute.CanShutdown">
            <summary>
            Gets or sets the can shutdown method name.
            </summary>
            <value>The can shutdown.</value>
        </member>
        <member name="P:Caliburn.PresentationFramework.Behaviors.ScreenAttribute.Shutdown">
            <summary>
            Gets or sets the shutdown method name.
            </summary>
            <value>The shutdown.</value>
        </member>
        <member name="P:Caliburn.PresentationFramework.Behaviors.ScreenAttribute.Activate">
            <summary>
            Gets or sets the activate method name.
            </summary>
            <value>The activate.</value>
        </member>
        <member name="P:Caliburn.PresentationFramework.Behaviors.ScreenAttribute.Deactivate">
            <summary>
            Gets or sets the deactivate method name.
            </summary>
            <value>The deactivate.</value>
        </member>
        <member name="T:Caliburn.PresentationFramework.Behaviors.ValidateAttribute">
            <summary>
            Applies a behavior which implements <see cref="T:System.ComponentModel.IDataErrorInfo"/>.
            </summary>
        </member>
        <member name="M:Caliburn.PresentationFramework.Behaviors.ValidateAttribute.GetInterfaces(System.Type)">
            <summary>
            Gets the interfaces which represent this behavior.
            </summary>
            <param name="implementation">The implementation.</param>
            <returns>The representative interfaces.</returns>
        </member>
        <member name="T:Caliburn.PresentationFramework.Commands.Command">
            <summary>
            Hosts attached properties related to commands.
            </summary>
        </member>
        <member name="F:Caliburn.PresentationFramework.Commands.Command.ParentProperty">
            <summary>
            A property representing the availability effect of a given message.
            </summary>
        </member>
        <member name="M:Caliburn.PresentationFramework.Commands.Command.SetParent(System.Windows.DependencyObject,Caliburn.PresentationFramework.Commands.ICompositeCommand)">
            <summary>
            Sets the parent.
            </summary>
            <param name="d">The d.</param>
            <param name="parent">The parent.</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.Commands.Command.GetParent(System.Windows.DependencyObject)">
            <summary>
            Gets the triggers.
            </summary>
            <param name="d">The d.</param>
            <returns></returns>
        </member>
        <member name="T:Caliburn.PresentationFramework.Commands.CommandAttribute">
            <summary>
            Specifies a command which should be registered with the container and optionally allows customization of the executiion method.
            </summary>
        </member>
        <member name="F:Caliburn.PresentationFramework.Commands.CommandAttribute.CommandNameSuffix">
            <summary>
            The suffix that is removed from the class name when registering by Key with the container.
            </summary>
        </member>
        <member name="M:Caliburn.PresentationFramework.Commands.CommandAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Caliburn.PresentationFramework.Commands.CommandAttribute"/> class.
            </summary>
        </member>
        <member name="M:Caliburn.PresentationFramework.Commands.CommandAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Caliburn.PresentationFramework.Commands.CommandAttribute"/> class.
            </summary>
            <param name="name">The name to use when registering the command with the container.</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.Commands.CommandAttribute.GetComponentInfo(System.Type)">
            <summary>
            Registers the type with the specified container.
            </summary>
            <param name="decoratedType">The decorated type.</param>
            <returns></returns>
        </member>
        <member name="M:Caliburn.PresentationFramework.Commands.CommandAttribute.GetCommandName(System.Type)">
            <summary>
            Gets the name of the command, inferring it if no name was given.
            </summary>
            <param name="commandType">The command type.</param>
            <returns>The command name.</returns>
        </member>
        <member name="M:Caliburn.PresentationFramework.Commands.CommandAttribute.InferCommandName(System.Type)">
            <summary>
            Infers the name of the command.
            </summary>
            <param name="commandType">Type of the command.</param>
            <returns></returns>
        </member>
        <member name="P:Caliburn.PresentationFramework.Commands.CommandAttribute.ExecuteMethod">
            <summary>
            Gets or sets the method to use as the execution method of the command.
            </summary>
            <value>The execute method.</value>
        </member>
        <member name="T:Caliburn.PresentationFramework.Commands.CommandMessage">
            <summary>
            An <see cref="T:Caliburn.PresentationFramework.RoutedMessaging.IRoutedMessage"/> for commands.
            </summary>
        </member>
        <member name="F:Caliburn.PresentationFramework.Commands.CommandMessage.ParametersProperty">
            <summary>
            Represents the parameters of a command message.
            </summary>
        </member>
        <member name="F:Caliburn.PresentationFramework.Commands.CommandMessage.CommandProperty">
            <summary>
            Represents the command tied to the message.
            </summary>
        </member>
        <member name="F:Caliburn.PresentationFramework.Commands.CommandMessage.ParentCommandProperty">
            <summary>
            Represents the parent of the command.
            </summary>
        </member>
        <member name="F:Caliburn.PresentationFramework.Commands.CommandMessage.OutcomePathProperty">
            <summary>
            Represents the return path of an command message.
            </summary>
        </member>
        <member name="F:Caliburn.PresentationFramework.Commands.CommandMessage.AvailabilityEffectProperty">
            <summary>
            Represents the availability effect of an command message.
            </summary>
        </member>
        <member name="M:Caliburn.PresentationFramework.Commands.CommandMessage.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Caliburn.PresentationFramework.Commands.CommandMessage"/> class.
            </summary>
        </member>
        <member name="M:Caliburn.PresentationFramework.Commands.CommandMessage.Initialize(Caliburn.PresentationFramework.RoutedMessaging.IInteractionNode)">
            <summary>
            Initializes the message for interaction with the specified node.
            </summary>
            <param name="node">The node.</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.Commands.CommandMessage.CreateInstanceCore">
            <summary>
            When implemented in a derived class, creates a new instance of the <see cref="T:System.Windows.Freezable"/> derived class.
            </summary>
            <returns>The new instance.</returns>
        </member>
        <member name="M:Caliburn.PresentationFramework.Commands.CommandMessage.Unwrap">
            <summary>
            Gets the underlying object instance to which this handler routes requests.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Caliburn.PresentationFramework.Commands.CommandMessage.Handles(Caliburn.PresentationFramework.RoutedMessaging.IRoutedMessage)">
            <summary>
            Indicates whether this instance can handle the speicified message.
            </summary>
            <param name="message">The message.</param>
            <returns></returns>
        </member>
        <member name="M:Caliburn.PresentationFramework.Commands.CommandMessage.Process(Caliburn.PresentationFramework.RoutedMessaging.IRoutedMessage,System.Object)">
            <summary>
            Processes the specified message.
            </summary>
            <param name="message">The message.</param>
            <param name="context">An object that provides additional context for message processing.</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.Commands.CommandMessage.UpdateAvailability(Caliburn.PresentationFramework.RoutedMessaging.IMessageTrigger)">
            <summary>
            Updates the availability of the trigger.
            </summary>
            <param name="trigger">The trigger.</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.Commands.CommandMessage.MakeAwareOf(Caliburn.PresentationFramework.RoutedMessaging.IMessageTrigger)">
            <summary>
            Makes the handler aware of a specific trigger.
            </summary>
            <param name="trigger">The trigger.</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.Commands.CommandMessage.RelatesTo(System.Object)">
            <summary>
            Indicates whether this message is related to the potential target.
            </summary>
            <param name="potentialTarget">The potential target.</param>
            <returns></returns>
        </member>
        <member name="M:Caliburn.PresentationFramework.Commands.CommandMessage.Equals(Caliburn.PresentationFramework.RoutedMessaging.IRoutedMessage)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>
            true if the current object is equal to the <paramref name="other"/> parameter; otherwise, false.
            </returns>
        </member>
        <member name="M:Caliburn.PresentationFramework.Commands.CommandMessage.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="M:Caliburn.PresentationFramework.Commands.CommandMessage.GetDefaultHandlers(Caliburn.PresentationFramework.RoutedMessaging.IInteractionNode)">
            <summary>
            Gets the default handlers for this type of message.
            </summary>
            <param name="node">The node to get default handlers for.</param>
            <returns></returns>
        </member>
        <member name="P:Caliburn.PresentationFramework.Commands.CommandMessage.Metadata">
            <summary>
            Gets the metadata.
            </summary>
            <value>The metadata.</value>
        </member>
        <member name="P:Caliburn.PresentationFramework.Commands.CommandMessage.Command">
            <summary>
            Gets or sets the command.
            </summary>
            <value>The command.</value>
        </member>
        <member name="P:Caliburn.PresentationFramework.Commands.CommandMessage.ParentCommand">
            <summary>
            Gets or sets the parent.
            </summary>
            <value>The parent.</value>
        </member>
        <member name="E:Caliburn.PresentationFramework.Commands.CommandMessage.Completed">
            <summary>
            Occurs when the command has completed executing.
            </summary>
        </member>
        <member name="P:Caliburn.PresentationFramework.Commands.CommandMessage.OutcomePath">
            <summary>
            Gets or sets the path to use in binding the return value.
            </summary>
            <value>The return path.</value>
        </member>
        <member name="P:Caliburn.PresentationFramework.Commands.CommandMessage.DefaultOutcomeElement">
            <summary>
            Gets the default element to bind to if no return path is specified.
            </summary>
            <value>The default element.</value>
        </member>
        <member name="P:Caliburn.PresentationFramework.Commands.CommandMessage.AvailabilityEffect">
            <summary>
            Gets or sets the availability effect.
            </summary>
            <value>The availability effect.</value>
        </member>
        <member name="P:Caliburn.PresentationFramework.Commands.CommandMessage.Parameters">
            <summary>
            Gets the parameters.
            </summary>
            <value>The parameters.</value>
        </member>
        <member name="P:Caliburn.PresentationFramework.Commands.CommandMessage.Source">
            <summary>
            Gets the source of the message.
            </summary>
            <value>The source.</value>
        </member>
        <member name="E:Caliburn.PresentationFramework.Commands.CommandMessage.Invalidated">
            <summary>
            Occurs when the message is invalidated.
            </summary>
        </member>
        <member name="T:Caliburn.PresentationFramework.Commands.CommandMessageParser">
            <summary>
            An implementation of <see cref="T:Caliburn.PresentationFramework.RoutedMessaging.Parsers.IMessageParser"/> for commands.
            </summary>
        </member>
        <member name="M:Caliburn.PresentationFramework.Commands.CommandMessageParser.#ctor(Caliburn.PresentationFramework.Conventions.IConventionManager,Caliburn.PresentationFramework.RoutedMessaging.IMessageBinder,Caliburn.PresentationFramework.Commands.CommandSource)">
            <summary>
            Initializes a new instance of the <see cref="T:Caliburn.PresentationFramework.Commands.CommandMessageParser"/> class.
            </summary>
            <param name="conventionManager">The convention mangager.</param>
            <param name="messageBinder">The message binder.</param>
            <param name="commandSource">The location that the parser will use to get the command.</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.Commands.CommandMessageParser.#ctor(Caliburn.PresentationFramework.Conventions.IConventionManager,Caliburn.PresentationFramework.RoutedMessaging.IMessageBinder,System.Windows.Data.UpdateSourceTrigger,Caliburn.PresentationFramework.Commands.CommandSource)">
            <summary>
            Initializes a new instance of the <see cref="T:Caliburn.PresentationFramework.Commands.CommandMessageParser"/> class.
            </summary>
            <param name="conventionManager">The convention manager.</param>
            <param name="messageBinder">The binder.</param>
            <param name="defaultTrigger">The default trigger.</param>
            <param name="commandSource">The location that the parser will use to get the command.</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.Commands.CommandMessageParser.ParseHeadAndTail(System.String,Caliburn.PresentationFramework.Commands.CommandMessage)">
            <summary>
            Parses the root portion of the message.
            </summary>
            <param name="messageText">The message text.</param>
            <param name="message">The message.</param>
            <returns></returns>
        </member>
        <member name="M:Caliburn.PresentationFramework.Commands.CommandMessageParser.SetCore(Caliburn.PresentationFramework.Commands.CommandMessage,System.Windows.DependencyObject,System.String)">
            <summary>
            Sets the core value of the message.
            </summary>
            <param name="message">The message.</param>
            <param name="target">The target.</param>
            <param name="coreOfMessage">The core representation of the message.</param>
        </member>
        <member name="T:Caliburn.PresentationFramework.Commands.CommandSource">
            <summary>
            Indicates locations where a command can be found.
            </summary>
        </member>
        <member name="F:Caliburn.PresentationFramework.Commands.CommandSource.Resource">
            <summary>
            Looks for the command in the resources collection.
            </summary>
        </member>
        <member name="F:Caliburn.PresentationFramework.Commands.CommandSource.Container">
            <summary>
            Looks for the command in the DI container.
            </summary>
        </member>
        <member name="F:Caliburn.PresentationFramework.Commands.CommandSource.Bound">
            <summary>
            Databinds to a command using a property path.
            </summary>
        </member>
        <member name="T:Caliburn.PresentationFramework.Commands.ICompositeCommand">
            <summary>
            A command that executes multiple child commands.
            </summary>
        </member>
        <member name="M:Caliburn.PresentationFramework.Commands.ICompositeCommand.AddOrUpdateChild(Caliburn.PresentationFramework.Commands.CommandMessage,System.Boolean)">
            <summary>
            Adds or updates the child command.
            </summary>
            <param name="child">The child.</param>
            <param name="availability">if set to <c>true</c> the child can execute.</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.Commands.ICompositeCommand.RemoveChild(Caliburn.PresentationFramework.Commands.CommandMessage)">
            <summary>
            Removes the child.
            </summary>
            <param name="child">The child.</param>
        </member>
        <member name="T:Caliburn.PresentationFramework.Configuration.IPresentationFrameworkServicesDescription">
            <summary>
            Desscribes the services required for the presentation framework to function.
            </summary>
        </member>
        <member name="M:Caliburn.PresentationFramework.Configuration.IPresentationFrameworkServicesDescription.Dispatcher``1">
            <summary>
            Customizes the dispatcher used by Caliburn.
            </summary>
            <typeparam name="T">The dispatcher type.</typeparam>
        </member>
        <member name="M:Caliburn.PresentationFramework.Configuration.IPresentationFrameworkServicesDescription.RoutedMessageController``1">
            <summary>
            Customizes the routed message controller used by Caliburn.
            </summary>
            <typeparam name="T">The routed message controller type.</typeparam>
        </member>
        <member name="M:Caliburn.PresentationFramework.Configuration.IPresentationFrameworkServicesDescription.MessageBinder``1">
            <summary>
            Customizes the method binder used by Caliburn.
            </summary>
            <typeparam name="T">The method binder type.</typeparam>
        </member>
        <member name="M:Caliburn.PresentationFramework.Configuration.IPresentationFrameworkServicesDescription.Parser``1">
            <summary>
            Customizes the message parser used by Caliburn.
            </summary>
            <typeparam name="T">The message parser type.</typeparam>
        </member>
        <member name="M:Caliburn.PresentationFramework.Configuration.IPresentationFrameworkServicesDescription.ViewModelDescriptionFactory``1">
            <summary>
            Customizes the view model description builder.
            </summary>
            <typeparam name="T">The action factory type.</typeparam>
        </member>
        <member name="M:Caliburn.PresentationFramework.Configuration.IPresentationFrameworkServicesDescription.ActionLocator``1">
            <summary>
            Customizes the actions locator.
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Caliburn.PresentationFramework.Configuration.IPresentationFrameworkServicesDescription.ViewLocator``1">
            <summary>
            Customizes the view strategy used by Caliburn.
            </summary>
            <typeparam name="T">The view strategy type.</typeparam>
        </member>
        <member name="M:Caliburn.PresentationFramework.Configuration.IPresentationFrameworkServicesDescription.ViewModelBinder``1">
            <summary>
            Customizes the binder used by Caliburn.
            </summary>
            <typeparam name="T">The binder type.</typeparam>
        </member>
        <member name="M:Caliburn.PresentationFramework.Configuration.IPresentationFrameworkServicesDescription.ViewModelFactory``1">
            <summary>
            Custmizes the view model factory used by Caliburn.
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Caliburn.PresentationFramework.Configuration.IPresentationFrameworkServicesDescription.ConventionManager``1">
            <summary>
            Customizes the convention manager used by Caliburn.
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Caliburn.PresentationFramework.Configuration.IPresentationFrameworkServicesDescription.WindowManager``1">
            <summary>
            Customizes the window manager used by Caliburn.
            </summary>
            <typeparam name="T">The window manager type.</typeparam>
        </member>
        <member name="M:Caliburn.PresentationFramework.Configuration.IPresentationFrameworkServicesDescription.InputManager``1">
            <summary>
            Customizes the input manager used by Caliburn.
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="T:Caliburn.PresentationFramework.Configuration.PresentationFrameworkConfiguration">
            <summary>
            The presenation framework module.
            </summary>
        </member>
        <member name="M:Caliburn.PresentationFramework.Configuration.PresentationFrameworkConfiguration.RegisterAllItemsWithSubjects">
            <summary>
            Searches the <see cref="T:Caliburn.Core.IAssemblySource"/> and registers all screens which concretely implement <see cref="!:IScreen&lt;T&gt;"/> using their closed interface type.
            </summary>
        </member>
        <member name="M:Caliburn.PresentationFramework.Configuration.PresentationFrameworkConfiguration.RegisterAllItemsWithSubjects(System.Boolean)">
            <summary>
            Searches the <see cref="T:Caliburn.Core.IAssemblySource"/> and registers all screens which concretely implement <see cref="!:IScreen&lt;T&gt;"/> using their closed interface type.
            </summary>
        </member>
        <member name="M:Caliburn.PresentationFramework.Configuration.PresentationFrameworkConfiguration.Initialize(Microsoft.Practices.ServiceLocation.IServiceLocator)">
            <summary>
            Initializes the core.
            </summary>
            <param name="serviceLocator">The service locator.</param>
        </member>
        <member name="P:Caliburn.PresentationFramework.Configuration.PresentationFrameworkConfiguration.IsInDesignMode">
            <summary>
            Gets a value indicating whether the framework is in design mode.
            </summary>
            <value>
            	<c>true</c> if the framework is in design mode; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:Caliburn.PresentationFramework.Conventions.ApplicableAction">
            <summary>
            An <see cref="T:Caliburn.PresentationFramework.Views.IViewApplicable"/> that attaches an action to an element.
            </summary>
        </member>
        <member name="T:Caliburn.PresentationFramework.Views.IViewApplicable">
            <summary>
            Implemented by classes that apply behavior to views.
            </summary>
        </member>
        <member name="M:Caliburn.PresentationFramework.Views.IViewApplicable.ApplyTo(System.Windows.DependencyObject)">
            <summary>
            Applies the behavior to the specified view.
            </summary>
            <param name="view">The view.</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.Conventions.ApplicableAction.#ctor(System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Caliburn.PresentationFramework.Conventions.ApplicableAction"/> class.
            </summary>
            <param name="elementName">Name of the element.</param>
            <param name="actionTargetPath">The path to the action target.</param>
            <param name="message">The message.</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.Conventions.ApplicableAction.ApplyTo(System.Windows.DependencyObject)">
            <summary>
            Applies the behavior to the specified view.
            </summary>
            <param name="view">The view.</param>
        </member>
        <member name="T:Caliburn.PresentationFramework.Conventions.ApplicableBinding">
            <summary>
            An <see cref="T:Caliburn.PresentationFramework.Views.IViewApplicable"/> that sets a databinding on an element.
            </summary>
        </member>
        <member name="M:Caliburn.PresentationFramework.Conventions.ApplicableBinding.#ctor(Caliburn.PresentationFramework.Conventions.IElementDescription,System.Windows.DependencyProperty,System.String,System.Windows.Data.BindingMode,System.Boolean,System.Boolean,System.Windows.Data.IValueConverter)">
            <summary>
            Initializes a new instance of the <see cref="T:Caliburn.PresentationFramework.Conventions.ApplicableBinding"/> class.
            </summary>
            <param name="elementDescription">The element description.</param>
            <param name="dependencyProperty">The dependency property.</param>
            <param name="path">The path.</param>
            <param name="mode">The mode.</param>
            <param name="validate">Inidicates whether or not to turn on validation for the binding.</param>
            <param name="checkTemplate">if set to <c>true</c> [check item template].</param>
            <param name="converter">The value converter to apply.</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.Conventions.ApplicableBinding.ApplyTo(System.Windows.DependencyObject)">
            <summary>
            Applies the behavior to the specified view.
            </summary>
            <param name="view">The view.</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.Conventions.ApplicableBinding.TryAddValidation(System.Windows.DependencyObject,System.Windows.Data.Binding,System.Windows.DependencyProperty)">
            <summary>
            Tries to add validation to the binding.
            </summary>
        </member>
        <member name="M:Caliburn.PresentationFramework.Conventions.ApplicableBinding.CheckTextBox(System.Windows.DependencyObject,System.Windows.Data.Binding,System.Windows.DependencyProperty)">
            <summary>
            Checks if the element is a text box and uses UpdateSourceTrigger.PropertyChanged if so.
            </summary>
            <param name="element">The element.</param>
            <param name="binding">The binding.</param>
            <param name="dependencyProperty">The dependency property.</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.Conventions.ApplicableBinding.ValueNotSet(System.Windows.DependencyObject)">
            <summary>
            Values the not set.
            </summary>
            <param name="element">The element.</param>
            <returns></returns>
        </member>
        <member name="M:Caliburn.PresentationFramework.Conventions.ApplicableBinding.NeedsItemTemplate(System.Windows.Controls.ItemsControl)">
            <summary>
            Needses the item template.
            </summary>
            <param name="control">The control.</param>
            <returns></returns>
        </member>
        <member name="M:Caliburn.PresentationFramework.Conventions.ApplicableBinding.CreateTemplate(System.Windows.Controls.Control)">
            <summary>
            Creates an item template which binds view models.
            </summary>
            <param name="control">The control.</param>
            <returns></returns>
        </member>
        <member name="T:Caliburn.PresentationFramework.Conventions.ConventionExtensions">
            <summary>
            Hosts extension methods related to conventions.
            </summary>
        </member>
        <member name="F:Caliburn.PresentationFramework.Conventions.ConventionExtensions.SelectElementsToInspect">
            <summary>
            The overridable implemenation of GetNamedElements.
            </summary>
        </member>
        <member name="M:Caliburn.PresentationFramework.Conventions.ConventionExtensions.DetermineConventions(Caliburn.PresentationFramework.Conventions.IConventionManager,Caliburn.PresentationFramework.ViewModels.IViewModelDescription,System.Windows.DependencyObject)">
            <summary>
            Determines the conventions for the specified view and view model description.
            </summary>
            <param name="conventionManager">The convention manager.</param>
            <param name="viewModelDescription">The view model description.</param>
            <param name="view">The view.</param>
            <returns>The applicalble conventions.</returns>
        </member>
        <member name="M:Caliburn.PresentationFramework.Conventions.ConventionExtensions.FindElementConventionOrFail(Caliburn.PresentationFramework.Conventions.IConventionManager,System.Object)">
            <summary>
            Finds the interaction defaults or fail.
            </summary>
            <param name="conventionManager">The convention manager.</param>
            <param name="element">The element.</param>
            <returns></returns>
        </member>
        <member name="T:Caliburn.PresentationFramework.Conventions.DefaultActionConvention">
            <summary>
            The default implementation of <see cref="T:Caliburn.PresentationFramework.Conventions.IViewConvention`1"/> for actions.
            </summary>
        </member>
        <member name="T:Caliburn.PresentationFramework.Conventions.ViewConventionBase`1">
            <summary>
            A base class for binding conventions.
            </summary>
        </member>
        <member name="M:Caliburn.PresentationFramework.Conventions.ViewConventionBase.Initialize(Caliburn.PresentationFramework.RoutedMessaging.IMessageBinder,Caliburn.PresentationFramework.ViewModels.IViewModelDescriptionFactory,Caliburn.Core.Validation.IValidator)">
            <summary>
            Initializes the specified message binder.
            </summary>
            <param name="messageBinder">The message binder.</param>
            <param name="viewModelDescriptionFactory">The view model description factory.</param>
            <param name="validator">The validator.</param>
        </member>
        <member name="T:Caliburn.PresentationFramework.Conventions.IViewConvention`1">
            <summary>
            A convention that applies to a view.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Caliburn.PresentationFramework.Conventions.IViewConvention`1.TryCreateApplication(Caliburn.PresentationFramework.Conventions.IConventionManager,Caliburn.PresentationFramework.ViewModels.IViewModelDescription,Caliburn.PresentationFramework.Conventions.IElementDescription,`0)">
            <summary>
            Tries the create an application of the convention.
            </summary>
            <param name="conventionManager">Convention manager.</param>
            <param name="description">The description.</param>
            <param name="element">The element.</param>
            <param name="target">The target.</param>
            <returns>The application or null if not applicable.</returns>
        </member>
        <member name="M:Caliburn.PresentationFramework.Conventions.ViewConventionBase`1.TryCreateApplication(Caliburn.PresentationFramework.Conventions.IConventionManager,Caliburn.PresentationFramework.ViewModels.IViewModelDescription,Caliburn.PresentationFramework.Conventions.IElementDescription,`0)">
            <summary>
            Tries to creates the application of the convention.
            </summary>
            <param name="conventionManager">The convention manager.</param>
            <param name="description">The description.</param>
            <param name="element">The element.</param>
            <param name="target">The target.</param>
            <returns>
            The convention application, or null if not applicable
            </returns>
        </member>
        <member name="M:Caliburn.PresentationFramework.Conventions.ViewConventionBase`1.DeterminePropertyPath(System.String)">
            <summary>
            Determines the property path.
            </summary>
            <param name="fullName">The full name.</param>
            <returns></returns>
        </member>
        <member name="M:Caliburn.PresentationFramework.Conventions.ViewConventionBase`1.GetBoundProperty(System.Reflection.PropertyInfo,System.String)">
            <summary>
            Gets the boud property.
            </summary>
            <param name="info">The info.</param>
            <param name="path">The path.</param>
            <returns></returns>
        </member>
        <member name="M:Caliburn.PresentationFramework.Conventions.ViewConventionBase`1.TryGetByPattern(System.Reflection.PropertyInfo,System.String,System.String@,System.Reflection.PropertyInfo@,System.Func{System.String,System.String},System.Func{System.Reflection.PropertyInfo,System.String,System.Boolean})">
            <summary>
            Tries to generate a new property and property path based on a predicate.
            </summary>
            <param name="originalProperty">The original property.</param>
            <param name="originalPropertyPath">The original property path.</param>
            <param name="newPropertyPath">The new property path.</param>
            <param name="newProperty">The new property.</param>
            <param name="deriveBaseName">A function that derives the base property name.</param>
            <param name="predicate">A predicate that matches properties.</param>
            <returns>True if a match was found, false otherwise.</returns>
        </member>
        <member name="M:Caliburn.PresentationFramework.Conventions.ViewConventionBase`1.CreateActionMessage(Caliburn.PresentationFramework.Actions.IAction)">
            <summary>
            Creates the action message.
            </summary>
            <param name="action">The action.</param>
            <returns>The message.</returns>
        </member>
        <member name="M:Caliburn.PresentationFramework.Conventions.ViewConventionBase`1.ShouldValidate(System.Reflection.PropertyInfo)">
            <summary>
            Indicates whether the specified property should be violated.
            </summary>
            <param name="property">The property.</param>
            <returns></returns>
        </member>
        <member name="M:Caliburn.PresentationFramework.Conventions.DefaultActionConvention.TryCreateApplication(Caliburn.PresentationFramework.Conventions.IConventionManager,Caliburn.PresentationFramework.ViewModels.IViewModelDescription,Caliburn.PresentationFramework.Conventions.IElementDescription,Caliburn.PresentationFramework.Actions.IAction)">
            <summary>
            Creates the application of the convention.
            </summary>
            <param name="conventionManager">The convention manager.</param>
            <param name="description">The description.</param>
            <param name="element">The element.</param>
            <param name="action">The action.</param>
            <returns></returns>
        </member>
        <member name="T:Caliburn.PresentationFramework.Conventions.DefaultBindingConvention">
            <summary>
            The default implementation of <see cref="T:Caliburn.PresentationFramework.Conventions.IViewConvention`1"/> for bindings.
            </summary>
        </member>
        <member name="M:Caliburn.PresentationFramework.Conventions.DefaultBindingConvention.TryCreateApplication(Caliburn.PresentationFramework.Conventions.IConventionManager,Caliburn.PresentationFramework.ViewModels.IViewModelDescription,Caliburn.PresentationFramework.Conventions.IElementDescription,System.Reflection.PropertyInfo)">
            <summary>
            Creates the application of the convention.
            </summary>
            <param name="conventionManager">The convention manager.</param>
            <param name="description">The description.</param>
            <param name="element">The element.</param>
            <param name="property">The property.</param>
            <returns>The convention application.</returns>
        </member>
        <member name="T:Caliburn.PresentationFramework.Conventions.DefaultConventionManager">
            <summary>
            The default implementation of <see cref="T:Caliburn.PresentationFramework.Conventions.IConventionManager"/>.
            </summary>
        </member>
        <member name="T:Caliburn.PresentationFramework.Conventions.IConventionManager">
            <summary>
            Implemented by services that understand conventions.
            </summary>
        </member>
        <member name="M:Caliburn.PresentationFramework.Conventions.IConventionManager.AddElementConvention(Caliburn.PresentationFramework.Conventions.IElementConvention)">
            <summary>
            Adds the element convention.
            </summary>
            <param name="convention">The convention.</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.Conventions.IConventionManager.AddViewConventions(Caliburn.PresentationFramework.Conventions.IViewConventionCategory)">
            <summary>
            Adds the view convention category.
            </summary>
            <param name="conventionCategory">The convention category.</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.Conventions.IConventionManager.GetElementConvention(System.Type)">
            <summary>
            Gets the element convention for the type of element specified.
            </summary>
            <param name="elementType">Type of the element.</param>
            <returns>The convention.</returns>
        </member>
        <member name="M:Caliburn.PresentationFramework.Conventions.IConventionManager.AddConverterConvention(System.Windows.DependencyProperty,System.Type,System.Windows.Data.IValueConverter)">
            <summary>
            Adds the value converter convention.
            </summary>
            <param name="target">The target.</param>
            <param name="source">The source.</param>
            <param name="converter">The converter.</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.Conventions.IConventionManager.GetValueConverter(System.Windows.DependencyProperty,System.Type)">
            <summary>
            Gets the conventional value converter.
            </summary>
            <param name="target">The target.</param>
            <param name="source">The source.</param>
            <returns>The converter or null if none is defined.</returns>
        </member>
        <member name="M:Caliburn.PresentationFramework.Conventions.IConventionManager.DetermineConventions(Caliburn.PresentationFramework.ViewModels.IViewModelDescription,System.Collections.Generic.IEnumerable{Caliburn.PresentationFramework.Conventions.IElementDescription})">
            <summary>
            Determines the conventions for a view model and a set of UI elements.
            </summary>
            <param name="viewModelDescription">The view model description.</param>
            <param name="elementDescriptions">The element descriptions.</param>
            <returns>The applicable conventions.</returns>
        </member>
        <member name="M:Caliburn.PresentationFramework.Conventions.IConventionManager.ApplyActionCreationConventions(Caliburn.PresentationFramework.Actions.IAction,Caliburn.Core.Invocation.IMethod)">
            <summary>
            Applies the action creation conventions to the specified action.
            </summary>
            <param name="action">The action.</param>
            <param name="targetMethod">The target method.</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.Conventions.DefaultConventionManager.#ctor(Caliburn.Core.Invocation.IMethodFactory)">
            <summary>
            Initializes a new instance of the <see cref="T:Caliburn.PresentationFramework.Conventions.DefaultConventionManager"/> class.
            </summary>
            <param name="methodFactory">The method factory.</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.Conventions.DefaultConventionManager.AddElementConvention(Caliburn.PresentationFramework.Conventions.IElementConvention)">
            <summary>
            Adds the element convention.
            </summary>
            <param name="convention">The convention.</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.Conventions.DefaultConventionManager.AddViewConventions(Caliburn.PresentationFramework.Conventions.IViewConventionCategory)">
            <summary>
            Adds the view conventions.
            </summary>
            <param name="conventionCategory">The convention set.</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.Conventions.DefaultConventionManager.GetElementConvention(System.Type)">
            <summary>
            Gets the element convention for the type of element specified.
            </summary>
            <param name="elementType">Type of the element.</param>
            <returns>The convention.</returns>
        </member>
        <member name="M:Caliburn.PresentationFramework.Conventions.DefaultConventionManager.GetValueConverter(System.Windows.DependencyProperty,System.Type)">
            <summary>
            Gets the conventional value converter.
            </summary>
            <param name="target">The target.</param>
            <param name="source">The source.</param>
            <returns>
            The converter or null if none is defined.
            </returns>
        </member>
        <member name="M:Caliburn.PresentationFramework.Conventions.DefaultConventionManager.AddConverterConvention(System.Windows.DependencyProperty,System.Type,System.Windows.Data.IValueConverter)">
            <summary>
            Adds the value converter convention.
            </summary>
            <param name="target">The target.</param>
            <param name="source">The source.</param>
            <param name="converter">The converter.</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.Conventions.DefaultConventionManager.DetermineConventions(Caliburn.PresentationFramework.ViewModels.IViewModelDescription,System.Collections.Generic.IEnumerable{Caliburn.PresentationFramework.Conventions.IElementDescription})">
            <summary>
            Determines the conventions for a view model and a set of UI elements.
            </summary>
            <param name="viewModelDescription">The view model description.</param>
            <param name="elementDescriptions">The element descriptions.</param>
            <returns>The applicable conventions.</returns>
        </member>
        <member name="M:Caliburn.PresentationFramework.Conventions.DefaultConventionManager.ApplyActionCreationConventions(Caliburn.PresentationFramework.Actions.IAction,Caliburn.Core.Invocation.IMethod)">
            <summary>
            Applies the action creation conventions.
            </summary>
            <param name="action">The action.</param>
            <param name="targetMethod">The target method.</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.Conventions.DefaultConventionManager.DeriveCanExecuteName(System.String)">
            <summary>
            Derives the name of the can execute method/property.
            </summary>
            <param name="baseName">Name of the base method.</param>
            <returns>The conventional name of the can execute poroperty.</returns>
        </member>
        <member name="M:Caliburn.PresentationFramework.Conventions.DefaultConventionManager.SetupDefaultViewConventions">
            <summary>
            Sets up the default view conventions.
            </summary>
        </member>
        <member name="M:Caliburn.PresentationFramework.Conventions.DefaultConventionManager.SetupDefaultConverterConventions">
            <summary>
            Sets up the default converter conventions.
            </summary>
        </member>
        <member name="M:Caliburn.PresentationFramework.Conventions.DefaultConventionManager.GetDefaultElementConventions">
            <summary>
            Gets the default element conventions.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Caliburn.PresentationFramework.Conventions.DefaultConventionManager.ElementConvention``1(System.String,System.Windows.DependencyProperty,System.Action{``0,System.Object},System.Func{``0,System.Object})">
            <summary>
            Creates an element convention.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="defaultEvent">The default event.</param>
            <param name="bindableProperty">The bindable property.</param>
            <param name="setter">The setter.</param>
            <param name="getter">The getter.</param>
            <returns>The element convention.</returns>
        </member>
        <member name="T:Caliburn.PresentationFramework.Conventions.DefaultElementConvention`1">
            <summary>
            The default implementation of <see cref="T:Caliburn.PresentationFramework.Conventions.IElementConvention"/>.
            </summary>
            <typeparam name="T">The type of element the convention applies to.</typeparam>
        </member>
        <member name="T:Caliburn.PresentationFramework.Conventions.IElementConvention">
            <summary>
            Represents an element's conventions.
            </summary>
        </member>
        <member name="M:Caliburn.PresentationFramework.Conventions.IElementConvention.CreateTrigger">
            <summary>
            Gets the default trigger.
            </summary>
            <value>The default trigger.</value>
        </member>
        <member name="M:Caliburn.PresentationFramework.Conventions.IElementConvention.EnsureBindableProperty(System.Windows.DependencyObject,System.Windows.DependencyProperty)">
            <summary>
            Inspects the element instance to confirm that the bindable property is correct.
            </summary>
            <param name="element">The element.</param>
            <param name="property">The property.</param>
            <returns></returns>
        </member>
        <member name="M:Caliburn.PresentationFramework.Conventions.IElementConvention.GetValue(System.Windows.DependencyObject)">
            <summary>
            Gets the default value for the element.
            </summary>
            <param name="element">The element.</param>
            <returns>The value.</returns>
        </member>
        <member name="M:Caliburn.PresentationFramework.Conventions.IElementConvention.SetValue(System.Windows.DependencyObject,System.Object)">
            <summary>
            Sets the default value on the element.
            </summary>
            <param name="element">The element.</param>
            <param name="value">The value.</param>
        </member>
        <member name="P:Caliburn.PresentationFramework.Conventions.IElementConvention.Type">
            <summary>
            Gets the type of the element to which the conventions apply.
            </summary>
            <value>The type of the element.</value>
        </member>
        <member name="P:Caliburn.PresentationFramework.Conventions.IElementConvention.EventName">
            <summary>
            Gets the name of the default event.
            </summary>
            <value>The name of the event.</value>
        </member>
        <member name="P:Caliburn.PresentationFramework.Conventions.IElementConvention.BindableProperty">
            <summary>
            Gets the default property used in databinding.
            </summary>
            <value>The bindable property.</value>
        </member>
        <member name="M:Caliburn.PresentationFramework.Conventions.DefaultElementConvention`1.#ctor(System.String,System.Windows.DependencyProperty,System.Action{`0,System.Object},System.Func{`0,System.Object},System.Func{`0,System.Windows.DependencyProperty,System.Windows.DependencyProperty})">
            <summary>
            Initializes a new instance of the <see cref="T:Caliburn.PresentationFramework.Conventions.DefaultElementConvention`1"/> class.
            </summary>
            <param name="defaultEventName">Default name of the event.</param>
            <param name="setter">The setter.</param>
            <param name="getter">The getter.</param>
            <param name="bindableProperty">The bindable property.</param>
            <param name="ensureBindableProperty">Custom logic for determining whether the bindable property should be replaced by another.</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.Conventions.DefaultElementConvention`1.#ctor(System.String,System.Windows.DependencyProperty,System.Action{`0,System.Object},System.Func{`0,System.Object})">
            <summary>
            Initializes a new instance of the <see cref="T:Caliburn.PresentationFramework.Conventions.DefaultElementConvention`1"/> class.
            </summary>
            <param name="defaultEventName">Default name of the event.</param>
            <param name="bindableProperty">The bindable property.</param>
            <param name="setter">The setter.</param>
            <param name="getter">The getter.</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.Conventions.DefaultElementConvention`1.CreateTrigger">
            <summary>
            Gets the default trigger.
            </summary>
            <returns></returns>
            <value>The default trigger.</value>
        </member>
        <member name="M:Caliburn.PresentationFramework.Conventions.DefaultElementConvention`1.EnsureBindableProperty(System.Windows.DependencyObject,System.Windows.DependencyProperty)">
            <summary>
            Inspects the element instance to confirm that the bindable property is correct.
            </summary>
            <param name="element">The element.</param>
            <param name="property">The property.</param>
            <returns></returns>
        </member>
        <member name="M:Caliburn.PresentationFramework.Conventions.DefaultElementConvention`1.GetValue(System.Windows.DependencyObject)">
            <summary>
            Gets the default value from the target.
            </summary>
            <param name="target">The target object.</param>
            <returns>The value.</returns>
        </member>
        <member name="M:Caliburn.PresentationFramework.Conventions.DefaultElementConvention`1.SetValue(System.Windows.DependencyObject,System.Object)">
            <summary>
            Sets the default value on the target.
            </summary>
            <param name="target">The target.</param>
            <param name="value">The value.</param>
        </member>
        <member name="P:Caliburn.PresentationFramework.Conventions.DefaultElementConvention`1.Type">
            <summary>
            Gets the type of the element to which the conventions apply.
            </summary>
            <value>The type of the element.</value>
        </member>
        <member name="P:Caliburn.PresentationFramework.Conventions.DefaultElementConvention`1.BindableProperty">
            <summary>
            Gets the default property used in databinding.
            </summary>
            <value>The bindable property.</value>
        </member>
        <member name="P:Caliburn.PresentationFramework.Conventions.DefaultElementConvention`1.EventName">
            <summary>
            Gets the name of the default event.
            </summary>
            <value>The name of the event.</value>
        </member>
        <member name="T:Caliburn.PresentationFramework.Conventions.DefaultElementDescription">
            <summary>
            The default implementation of <see cref="T:Caliburn.PresentationFramework.Conventions.IElementDescription"/>.
            </summary>
        </member>
        <member name="T:Caliburn.PresentationFramework.Conventions.IElementDescription">
            <summary>
            Describes an element in the Logical or Visual Treen.
            </summary>
        </member>
        <member name="P:Caliburn.PresentationFramework.Conventions.IElementDescription.Type">
            <summary>
            Gets the type.
            </summary>
            <value>The type.</value>
        </member>
        <member name="P:Caliburn.PresentationFramework.Conventions.IElementDescription.Name">
            <summary>
            Gets the name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:Caliburn.PresentationFramework.Conventions.IElementDescription.Convention">
            <summary>
            Gets the conventions associated with the element.
            </summary>
            <value>The convention.</value>
        </member>
        <member name="M:Caliburn.PresentationFramework.Conventions.DefaultElementDescription.#ctor(System.Type,System.String,Caliburn.PresentationFramework.Conventions.IElementConvention)">
            <summary>
            Initializes a new instance of the <see cref="T:Caliburn.PresentationFramework.Conventions.DefaultElementDescription"/> class.
            </summary>
            <param name="type">The type.</param>
            <param name="name">The name.</param>
            <param name="convention">The convention.</param>
        </member>
        <member name="P:Caliburn.PresentationFramework.Conventions.DefaultElementDescription.Type">
            <summary>
            Gets the type.
            </summary>
            <value>The type.</value>
        </member>
        <member name="P:Caliburn.PresentationFramework.Conventions.DefaultElementDescription.Name">
            <summary>
            Gets the name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:Caliburn.PresentationFramework.Conventions.DefaultElementDescription.Convention">
            <summary>
            Gets the conventions associated with the element.
            </summary>
            <value>The convention.</value>
        </member>
        <member name="T:Caliburn.PresentationFramework.Conventions.DefaultViewConventionCategory`1">
            <summary>
            The default implemenation of <see cref="T:Caliburn.PresentationFramework.Conventions.IViewConventionCategory"/>.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:Caliburn.PresentationFramework.Conventions.IViewConventionCategory">
            <summary>
            A set of conventions applicable to a view.
            </summary>
        </member>
        <member name="M:Caliburn.PresentationFramework.Conventions.IViewConventionCategory.GetApplications(Caliburn.PresentationFramework.Conventions.IConventionManager,Caliburn.PresentationFramework.ViewModels.IViewModelDescription,Caliburn.PresentationFramework.Conventions.IElementDescription)">
            <summary>
            Gets the applications.
            </summary>
            <param name="conventionManager">The convention manager.</param>
            <param name="viewModelDescription">The view model description.</param>
            <param name="elementDescription">The element description.</param>
            <returns>The applications.</returns>
        </member>
        <member name="M:Caliburn.PresentationFramework.Conventions.DefaultViewConventionCategory`1.#ctor(System.Func{Caliburn.PresentationFramework.ViewModels.IViewModelDescription,System.Collections.Generic.IEnumerable{`0}})">
            <summary>
            Initializes a new instance of the <see cref="T:Caliburn.PresentationFramework.Conventions.DefaultViewConventionCategory`1"/> class.
            </summary>
            <param name="getTargets">The get targets.</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.Conventions.DefaultViewConventionCategory`1.GetApplications(Caliburn.PresentationFramework.Conventions.IConventionManager,Caliburn.PresentationFramework.ViewModels.IViewModelDescription,Caliburn.PresentationFramework.Conventions.IElementDescription)">
            <summary>
            Gets the applications.
            </summary>
            <param name="conventionManager">The convention manager.</param>
            <param name="viewModelDescription">The view model description.</param>
            <param name="elementDescription">The element description.</param>
            <returns>The applications.</returns>
        </member>
        <member name="M:Caliburn.PresentationFramework.Conventions.DefaultViewConventionCategory`1.AddConvention(Caliburn.PresentationFramework.Conventions.IViewConvention{`0})">
            <summary>
            Adds the convention to this category.
            </summary>
            <param name="convention">The convention.</param>
        </member>
        <member name="T:Caliburn.PresentationFramework.Conventions.ItemsControlBindingConvention">
            <summary>
            An implemenation of <see cref="T:Caliburn.PresentationFramework.Conventions.IViewConvention`1"/> that bindings SelectedItem and Header for Selectors and HeaderedItemsControls respectively.
            ItemsTemplates may be conventionally added as well.
            </summary>
        </member>
        <member name="M:Caliburn.PresentationFramework.Conventions.ItemsControlBindingConvention.TryCreateApplication(Caliburn.PresentationFramework.Conventions.IConventionManager,Caliburn.PresentationFramework.ViewModels.IViewModelDescription,Caliburn.PresentationFramework.Conventions.IElementDescription,System.Reflection.PropertyInfo)">
            <summary>
            Creates the application of the convention.
            </summary>
            <param name="conventionManager">The convention manager.</param>
            <param name="description">The description.</param>
            <param name="element">The element.</param>
            <param name="property">The property.</param>
            <returns>The convention application.</returns>
        </member>
        <member name="T:Caliburn.PresentationFramework.Conventions.SubActionConvention">
            <summary>
            An implementation of <see cref="T:Caliburn.PresentationFramework.Conventions.IViewConvention`1"/> that matches sub-actions.
            </summary>
        </member>
        <member name="M:Caliburn.PresentationFramework.Conventions.SubActionConvention.TryCreateApplication(Caliburn.PresentationFramework.Conventions.IConventionManager,Caliburn.PresentationFramework.ViewModels.IViewModelDescription,Caliburn.PresentationFramework.Conventions.IElementDescription,System.Reflection.PropertyInfo)">
            <summary>
            Tries to creates the application of the convention.
            </summary>
            <param name="conventionManager">The convention manager.</param>
            <param name="description">The description.</param>
            <param name="element">The element.</param>
            <param name="target">The target.</param>
            <returns>
            The convention application, or null if not applicable
            </returns>
        </member>
        <member name="T:Caliburn.PresentationFramework.Converters.EnumConverter">
            <summary>
            An <see cref="T:System.Windows.Data.IValueConverter"/> for <see cref="T:Caliburn.PresentationFramework.ViewModels.BindableEnum"/>.
            </summary>
        </member>
        <member name="M:Caliburn.PresentationFramework.Converters.EnumConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value.
            </summary>
            <param name="value">The value produced by the binding source.</param>
            <param name="targetType">The type of the binding target property.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="culture">The culture to use in the converter.</param>
            <returns>
            A converted value. If the method returns null, the valid null value is used.
            </returns>
        </member>
        <member name="M:Caliburn.PresentationFramework.Converters.EnumConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value.
            </summary>
            <param name="value">The value that is produced by the binding target.</param>
            <param name="targetType">The type to convert to.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="culture">The culture to use in the converter.</param>
            <returns>
            A converted value. If the method returns null, the valid null value is used.
            </returns>
        </member>
        <member name="T:Caliburn.PresentationFramework.Filters.AutoCheckAvailabilityAttribute">
            <summary>
            A filter capable of updating trigger availability based on CommandManager notifications.
            </summary>
        </member>
        <member name="T:Caliburn.PresentationFramework.Filters.IHandlerAware">
            <summary>
            A filter that is aware individual <see cref="T:Caliburn.PresentationFramework.RoutedMessaging.IMessageTrigger"/> and <see cref="T:Caliburn.PresentationFramework.RoutedMessaging.IRoutedMessageHandler"/> instances.
            </summary>
        </member>
        <member name="M:Caliburn.PresentationFramework.Filters.IHandlerAware.MakeAwareOf(Caliburn.PresentationFramework.RoutedMessaging.IRoutedMessageHandler)">
            <summary>
            Makes the filter aware of the <see cref="T:Caliburn.PresentationFramework.RoutedMessaging.IRoutedMessageHandler"/>.
            </summary>
            <param name="messageHandler">The message handler.</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.Filters.IHandlerAware.MakeAwareOf(Caliburn.PresentationFramework.RoutedMessaging.IRoutedMessageHandler,Caliburn.PresentationFramework.RoutedMessaging.IMessageTrigger)">
            <summary>
            Makes the filter aware of the <see cref="T:Caliburn.PresentationFramework.RoutedMessaging.IMessageTrigger"/>.
            </summary>
            <param name="messageHandler">The message handler.</param>
            <param name="trigger">The trigger.</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.Filters.AutoCheckAvailabilityAttribute.MakeAwareOf(Caliburn.PresentationFramework.RoutedMessaging.IRoutedMessageHandler)">
            <summary>
            Makes the filter aware of the <see cref="T:Caliburn.PresentationFramework.RoutedMessaging.IRoutedMessageHandler"/>.
            </summary>
            <param name="messageHandler">The message handler.</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.Filters.AutoCheckAvailabilityAttribute.MakeAwareOf(Caliburn.PresentationFramework.RoutedMessaging.IRoutedMessageHandler,Caliburn.PresentationFramework.RoutedMessaging.IMessageTrigger)">
            <summary>
            Makes the filter aware of the <see cref="T:Caliburn.PresentationFramework.RoutedMessaging.IMessageTrigger"/>.
            </summary>
            <param name="messageHandler">The message handler.</param>
            <param name="trigger">The trigger.</param>
        </member>
        <member name="P:Caliburn.PresentationFramework.Filters.AutoCheckAvailabilityAttribute.Priority">
            <summary>
            Gets the priority used to order filters.
            </summary>
            <value>The order.</value>
            <remarks>Higher numbers are evaluated first.</remarks>
        </member>
        <member name="T:Caliburn.PresentationFramework.Filters.DependenciesAttribute">
            <summary>
            A filter capable of specifying the dependencies raised by an implementor of <see cref="T:System.ComponentModel.INotifyPropertyChanged"/> which can cause a trigger's availability to be re-evaluated.
            </summary>
        </member>
        <member name="M:Caliburn.PresentationFramework.Filters.DependenciesAttribute.#ctor(System.String[])">
            <summary>
            Initializes a new instance of the <see cref="T:Caliburn.PresentationFramework.Filters.DependenciesAttribute"/> class.
            </summary>
            <param name="dependencies">The dependencies.</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.Filters.DependenciesAttribute.Initialize(System.Type,System.Reflection.MemberInfo,Microsoft.Practices.ServiceLocation.IServiceLocator)">
            <summary>
            Initializes the filter.
            </summary>
            <param name="targetType">Type of the target.</param>
            <param name="memberInfo">The member.</param>
            <param name="serviceLocator">The serviceLocator.</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.Filters.DependenciesAttribute.MakeAwareOf(Caliburn.PresentationFramework.RoutedMessaging.IRoutedMessageHandler)">
            <summary>
            Makes the filter aware of the <see cref="T:Caliburn.PresentationFramework.RoutedMessaging.IRoutedMessageHandler"/>.
            </summary>
            <param name="messageHandler">The message handler.</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.Filters.DependenciesAttribute.MakeAwareOf(Caliburn.PresentationFramework.RoutedMessaging.IRoutedMessageHandler,Caliburn.PresentationFramework.RoutedMessaging.IMessageTrigger)">
            <summary>
            Makes the filter aware of the <see cref="T:Caliburn.PresentationFramework.RoutedMessaging.IMessageTrigger"/>.
            </summary>
            <param name="messageHandler">The message handler.</param>
            <param name="trigger">The trigger.</param>
        </member>
        <member name="P:Caliburn.PresentationFramework.Filters.DependenciesAttribute.Priority">
            <summary>
            Gets the priority used to order filters.
            </summary>
            <value>The order.</value>
            <remarks>Higher numbers are evaluated first.</remarks>
        </member>
        <member name="P:Caliburn.PresentationFramework.Filters.DependenciesAttribute.Dependencies">
            <summary>
            Gets the dependencies.
            </summary>
            <value>The dependencies.</value>
        </member>
        <member name="T:Caliburn.PresentationFramework.Filters.DependencyObserver">
            <summary>
            Metadata which can be used to trigger availability changes in triggers based on <see cref="T:System.ComponentModel.INotifyPropertyChanged"/>.
            </summary>
        </member>
        <member name="M:Caliburn.PresentationFramework.Filters.DependencyObserver.#ctor(Caliburn.PresentationFramework.RoutedMessaging.IRoutedMessageHandler,Caliburn.Core.Invocation.IMethodFactory,System.ComponentModel.INotifyPropertyChanged)">
            <summary>
            Initializes a new instance of the <see cref="T:Caliburn.PresentationFramework.Filters.DependencyObserver"/> class.
            </summary>
            <param name="messageHandler">The message handler.</param>
            <param name="methodFactory">The method factory.</param>
            <param name="notifier">The notifier.</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.Filters.DependencyObserver.MakeAwareOf(Caliburn.PresentationFramework.RoutedMessaging.IMessageTrigger,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Makes the metadata aware of the relationship between an <see cref="T:Caliburn.PresentationFramework.RoutedMessaging.IMessageTrigger"/> and its dependencies.
            </summary>
            <param name="trigger">The trigger.</param>
            <param name="dependencies">The dependencies.</param>
        </member>
        <member name="T:Caliburn.PresentationFramework.Filters.FilterManager">
            <summary>
            An implementation of <see cref="T:Caliburn.PresentationFramework.Filters.IFilterManager"/>.
            </summary>
        </member>
        <member name="T:Caliburn.PresentationFramework.Filters.IFilterManager">
            <summary>
            Manages filters for an object.
            </summary>
        </member>
        <member name="M:Caliburn.PresentationFramework.Filters.IFilterManager.Add(Caliburn.PresentationFramework.Filters.IFilter)">
            <summary>
            Adds the specified filter.
            </summary>
            <param name="filter">The filter.</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.Filters.IFilterManager.Combine(Caliburn.PresentationFramework.Filters.IFilterManager)">
            <summary>
            Combines the filters from the specified manager with the current instance.
            </summary>
            <param name="filterManager">The filter manager.</param>
            <returns>A new filter manager representing the filter combinations.</returns>
        </member>
        <member name="P:Caliburn.PresentationFramework.Filters.IFilterManager.TriggerEffects">
            <summary>
            Gets the trigger affecting filters.
            </summary>
            <value>The trigger effects.</value>
        </member>
        <member name="P:Caliburn.PresentationFramework.Filters.IFilterManager.PreProcessors">
            <summary>
            
            Gets the filters that execute before something else.
            </summary>
            <value>The pre execute.</value>
        </member>
        <member name="P:Caliburn.PresentationFramework.Filters.IFilterManager.PostProcessors">
            <summary>
            Gets the filters that execute after something else.
            </summary>
            <value>The post execute.</value>
        </member>
        <member name="P:Caliburn.PresentationFramework.Filters.IFilterManager.HandlerAware">
            <summary>
            Gets the instance aware filters.
            </summary>
            <value>The instance aware filters.</value>
        </member>
        <member name="P:Caliburn.PresentationFramework.Filters.IFilterManager.Rescues">
            <summary>
            Gets a filter that performs a resuce.
            </summary>
            <value>The rescue.</value>
        </member>
        <member name="M:Caliburn.PresentationFramework.Filters.FilterManager.#ctor(System.Type,System.Reflection.MemberInfo,Microsoft.Practices.ServiceLocation.IServiceLocator)">
            <summary>
            Initializes a new instance of the <see cref="T:Caliburn.PresentationFramework.Filters.FilterManager"/> class.
            </summary>
            <param name="targetType">Type of the target.</param>
            <param name="member">The member.</param>
            <param name="serviceLocator">The serviceLocator.</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.Filters.FilterManager.#ctor(System.Type,System.Reflection.MemberInfo,Microsoft.Practices.ServiceLocation.IServiceLocator,System.Collections.Generic.IEnumerable{Caliburn.PresentationFramework.Filters.IPreProcessor},System.Collections.Generic.IEnumerable{Caliburn.PresentationFramework.Filters.IPreProcessor},System.Collections.Generic.IEnumerable{Caliburn.PresentationFramework.Filters.IPostProcessor},System.Collections.Generic.IEnumerable{Caliburn.PresentationFramework.Filters.IHandlerAware},System.Collections.Generic.IEnumerable{Caliburn.PresentationFramework.Filters.IRescue})">
            <summary>
            Initializes a new instance of the <see cref="T:Caliburn.PresentationFramework.Filters.FilterManager"/> class.
            </summary>
            <param name="serviceLocator">The service locator.</param>
            <param name="preExecute">The pre execute.</param>
            <param name="triggerEffects">The trigger effects.</param>
            <param name="postExecute">The post execute.</param>
            <param name="instanceAwareFilters">The instance aware.</param>
            <param name="rescues">The rescues</param>
            <param name="targetType">The target type.</param>
            <param name="member">The member.</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.Filters.FilterManager.Add(Caliburn.PresentationFramework.Filters.IFilter)">
            <summary>
            Adds the specified filter.
            </summary>
            <param name="filter">The filter.</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.Filters.FilterManager.Combine(Caliburn.PresentationFramework.Filters.IFilterManager)">
            <summary>
            Combines the filters from the specified manager with the current instance.
            </summary>
            <param name="filterManager">The filter manager.</param>
            <returns>A new filter manager representing the filter combinations.</returns>
        </member>
        <member name="P:Caliburn.PresentationFramework.Filters.FilterManager.PreProcessors">
            <summary>
            Gets the filters that execute before something else.
            </summary>
            <value>The pre execute.</value>
        </member>
        <member name="P:Caliburn.PresentationFramework.Filters.FilterManager.TriggerEffects">
            <summary>
            Gets the trigger affecting filters.
            </summary>
            <value>The trigger effects.</value>
        </member>
        <member name="P:Caliburn.PresentationFramework.Filters.FilterManager.PostProcessors">
            <summary>
            Gets the filters that execute after something else.
            </summary>
            <value>The post execute.</value>
        </member>
        <member name="P:Caliburn.PresentationFramework.Filters.FilterManager.HandlerAware">
            <summary>
            Gets the instance aware filters.
            </summary>
            <value>The instance aware filters.</value>
        </member>
        <member name="P:Caliburn.PresentationFramework.Filters.FilterManager.Rescues">
            <summary>
            Gets a filter that performs a resuce.
            </summary>
            <value>The rescue.</value>
        </member>
        <member name="T:Caliburn.PresentationFramework.Filters.IPreProcessor">
            <summary>
            A <see cref="T:Caliburn.PresentationFramework.Filters.IFilter"/> that is executing before something.
            </summary>
        </member>
        <member name="M:Caliburn.PresentationFramework.Filters.IPreProcessor.Execute(Caliburn.PresentationFramework.RoutedMessaging.IRoutedMessage,Caliburn.PresentationFramework.RoutedMessaging.IInteractionNode,System.Object[])">
            <summary>
            Executes the filter.
            </summary>
            <param name="message">The message.</param>
            <param name="parameters">The parameters.</param>
            <param name="handlingNode">The handling node.</param>
            <returns></returns>
        </member>
        <member name="P:Caliburn.PresentationFramework.Filters.IPreProcessor.AffectsTriggers">
            <summary>
            Gets a value indicating whether this filter affects triggers.
            </summary>
            <value><c>true</c> if affects triggers; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:Caliburn.PresentationFramework.Filters.IRescue">
            <summary>
            A <see cref="T:Caliburn.PresentationFramework.Filters.IFilter"/> that performs a rescue.
            </summary>
        </member>
        <member name="M:Caliburn.PresentationFramework.Filters.IRescue.Handle(Caliburn.PresentationFramework.RoutedMessaging.IRoutedMessage,Caliburn.PresentationFramework.RoutedMessaging.IInteractionNode,System.Exception)">
            <summary>
            Handles an <see cref="T:System.Exception"/>.
            </summary>
            <param name="exception">The exception.</param>
            <param name="message">The message.</param>
            <param name="handlingNode">The handling node.</param>
            <returns>true if the exception was handled, false otherwise</returns>
        </member>
        <member name="T:Caliburn.PresentationFramework.Filters.MethodCallFilterBase">
            <summary>
            A base class for filters that make method calls.
            </summary>
        </member>
        <member name="F:Caliburn.PresentationFramework.Filters.MethodCallFilterBase._method">
            <summary>
            The method.
            </summary>
        </member>
        <member name="M:Caliburn.PresentationFramework.Filters.MethodCallFilterBase.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Caliburn.PresentationFramework.Filters.MethodCallFilterBase"/> class.
            </summary>
            <param name="methodName">Name of the method.</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.Filters.MethodCallFilterBase.#ctor(Caliburn.Core.Invocation.IMethod)">
            <summary>
            Initializes a new instance of the <see cref="T:Caliburn.PresentationFramework.Filters.MethodCallFilterBase"/> class.
            </summary>
        </member>
        <member name="M:Caliburn.PresentationFramework.Filters.MethodCallFilterBase.Initialize(System.Type,System.Reflection.MemberInfo,Microsoft.Practices.ServiceLocation.IServiceLocator)">
            <summary>
            Initializes the filter.
            </summary>
            <param name="targetType">Type of the target.</param>
            <param name="member">The metadata container.</param>
            <param name="serviceLocator">The serviceLocator.</param>
        </member>
        <member name="P:Caliburn.PresentationFramework.Filters.MethodCallFilterBase.Priority">
            <summary>
            Gets the order the filter will be evaluated in.
            </summary>
            <value>The order.</value>
        </member>
        <member name="P:Caliburn.PresentationFramework.Filters.MethodCallFilterBase.MethodName">
            <summary>
            Gets the name of the method.
            </summary>
            <value>The name of the method.</value>
        </member>
        <member name="P:Caliburn.PresentationFramework.Filters.MethodCallFilterBase.IsGetter">
            <summary>
            Indicates whether the preview method is actually a property getter.
            </summary>
            <value><c>true</c> if this instance points to a getter; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Caliburn.PresentationFramework.Filters.MethodCallFilterBase.Member">
            <summary>
            Gets the target.
            </summary>
            <value>The target.</value>
        </member>
        <member name="T:Caliburn.PresentationFramework.Filters.PreviewAttribute">
            <summary>
            A basic pre execution filter.
            </summary>
        </member>
        <member name="M:Caliburn.PresentationFramework.Filters.PreviewAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Caliburn.PresentationFramework.Filters.PreviewAttribute"/> class.
            </summary>
            <param name="methodName">Name of the method.</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.Filters.PreviewAttribute.#ctor(Caliburn.Core.Invocation.IMethod)">
            <summary>
            Initializes a new instance of the <see cref="T:Caliburn.PresentationFramework.Filters.PreviewAttribute"/> class.
            </summary>
            <param name="method">The method.</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.Filters.PreviewAttribute.Initialize(System.Type,System.Reflection.MemberInfo,Microsoft.Practices.ServiceLocation.IServiceLocator)">
            <summary>
            Initializes the filter.
            </summary>
            <param name="targetType">Type of the target.</param>
            <param name="member">The member.</param>
            <param name="serviceLocator">The serviceLocator.</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.Filters.PreviewAttribute.Execute(Caliburn.PresentationFramework.RoutedMessaging.IRoutedMessage,Caliburn.PresentationFramework.RoutedMessaging.IInteractionNode,System.Object[])">
            <summary>
            Executes the filter.
            </summary>
            <param name="message">The message.</param>
            <param name="handlingNode">The handling node.</param>
            <param name="parameters">The parameters.</param>
            <returns></returns>
        </member>
        <member name="M:Caliburn.PresentationFramework.Filters.PreviewAttribute.MakeAwareOf(Caliburn.PresentationFramework.RoutedMessaging.IRoutedMessageHandler)">
            <summary>
            Makes the filter aware of the <see cref="T:Caliburn.PresentationFramework.RoutedMessaging.IRoutedMessageHandler"/>.
            </summary>
            <param name="messageHandler">The message handler.</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.Filters.PreviewAttribute.MakeAwareOf(Caliburn.PresentationFramework.RoutedMessaging.IRoutedMessageHandler,Caliburn.PresentationFramework.RoutedMessaging.IMessageTrigger)">
            <summary>
            Makes the filter aware of the <see cref="T:Caliburn.PresentationFramework.RoutedMessaging.IMessageTrigger"/>.
            </summary>
            <param name="messageHandler">The message handler.</param>
            <param name="trigger">The trigger.</param>
        </member>
        <member name="P:Caliburn.PresentationFramework.Filters.PreviewAttribute.AffectsTriggers">
            <summary>
            Gets a value indicating whether this filter affects triggers.
            </summary>
            <value><c>true</c> if affects triggers; otherwise, <c>false</c>.</value>
            <remarks>True by default.</remarks>
        </member>
        <member name="T:Caliburn.PresentationFramework.Filters.PropertyPathMonitor">
            <summary>
            A class used to monitor changes in a property path.
            </summary>
            
        </member>
        <member name="M:Caliburn.PresentationFramework.Filters.PropertyPathMonitor.#ctor(Caliburn.Core.Invocation.IMethodFactory,System.ComponentModel.INotifyPropertyChanged,System.String,Caliburn.PresentationFramework.Filters.IChangeMonitorNode)">
            <summary>
            Initializes a new instance of the <see cref="T:Caliburn.PresentationFramework.Filters.PropertyPathMonitor"/> class.
            </summary>
            <param name="methodFactory">The method factory.</param>
            <param name="notifier">The notifier.</param>
            <param name="propertyPath">The property path.</param>
            <param name="onPathChanged">The on path changed.</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.Filters.PropertyPathMonitor.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="T:Caliburn.PresentationFramework.Filters.RescueAttribute">
            <summary>
            A basic rescue filter.
            </summary>
        </member>
        <member name="M:Caliburn.PresentationFramework.Filters.RescueAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Caliburn.PresentationFramework.Filters.RescueAttribute"/> class.
            </summary>
            <param name="methodName">Name of the method.</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.Filters.RescueAttribute.Handle(Caliburn.PresentationFramework.RoutedMessaging.IRoutedMessage,Caliburn.PresentationFramework.RoutedMessaging.IInteractionNode,System.Exception)">
            <summary>
            Handles an <see cref="T:System.Exception"/>.
            </summary>
            <param name="message">The message.</param>
            <param name="handlingNode">The handling node.</param>
            <param name="exception">The exception.</param>
            <returns>
            true if the exception was handled, false otherwise
            </returns>
        </member>
        <member name="T:Caliburn.PresentationFramework.Invocation.BatchingDispatcher">
            <summary>
            An impelementation of <see cref="T:Caliburn.PresentationFramework.Invocation.IDispatcher"/> that efficiently batches updates to the UI thread.
            </summary>
        </member>
        <member name="T:Caliburn.PresentationFramework.Invocation.IDispatcher">
            <summary>
            Abstracts a dispatcher capable of executing code on a background or UI thread.
            </summary>
        </member>
        <member name="M:Caliburn.PresentationFramework.Invocation.IDispatcher.ExecuteOnBackgroundThread(System.Action,System.ComponentModel.RunWorkerCompletedEventHandler,System.ComponentModel.ProgressChangedEventHandler)">
            <summary>
            Executes code on the background thread.
            </summary>
            <param name="backgroundAction">The background action.</param>
            <param name="uiCallback">The UI callback.</param>
            <param name="progressChanged">The progress change callback.</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.Invocation.IDispatcher.ExecuteOnUIThread(System.Action)">
            <summary>
            Executes code on the UI thread.
            </summary>
            <param name="uiAction">The UI action.</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.Invocation.IDispatcher.BeginExecuteOnUIThread(System.Action)">
            <summary>
            Executes code on the UI thread asynchronously.
            </summary>
            <param name="uiAction">The UI action.</param>
        </member>
        <member name="P:Caliburn.PresentationFramework.Invocation.IDispatcher.DefaultPriority">
            <summary>
            Gets or sets the default dispatcher priority.
            </summary>
            <value>The default priority.</value>
        </member>
        <member name="M:Caliburn.PresentationFramework.Invocation.BatchingDispatcher.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Caliburn.PresentationFramework.Invocation.BatchingDispatcher"/> class.
            </summary>
        </member>
        <member name="M:Caliburn.PresentationFramework.Invocation.BatchingDispatcher.ExecuteOnBackgroundThread(System.Action,System.ComponentModel.RunWorkerCompletedEventHandler,System.ComponentModel.ProgressChangedEventHandler)">
            <summary>
            Executes code on the background thread.
            </summary>
            <param name="backgroundAction">The background action.</param>
            <param name="uiCallback">The UI callback.</param>
            <param name="progressChanged">The progress change callback.</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.Invocation.BatchingDispatcher.ExecuteOnUIThread(System.Action)">
            <summary>
            Executes code on the UI thread.
            </summary>
            <param name="uiAction">The UI action.</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.Invocation.BatchingDispatcher.BeginExecuteOnUIThread(System.Action)">
            <summary>
            Executes code on the UI thread asynchronously.
            </summary>
            <param name="uiAction">The UI action.</param>
        </member>
        <member name="P:Caliburn.PresentationFramework.Invocation.BatchingDispatcher.DefaultPriority">
            <summary>
            Gets or sets the default dispatcher priority.
            </summary>
            <value>The default priority.</value>
        </member>
        <member name="T:Caliburn.PresentationFramework.Invocation.DefaultDispatcher">
            <summary>
            An implementation of <see cref="T:Caliburn.PresentationFramework.Invocation.IDispatcher"/> for WPF.
            </summary>
        </member>
        <member name="M:Caliburn.PresentationFramework.Invocation.DefaultDispatcher.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Caliburn.PresentationFramework.Invocation.DefaultDispatcher"/> class.
            </summary>
        </member>
        <member name="M:Caliburn.PresentationFramework.Invocation.DefaultDispatcher.GetDispatcher">
            <summary>
            Gets the dispatcher.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Caliburn.PresentationFramework.Invocation.DefaultDispatcher.ExecuteOnBackgroundThread(System.Action,System.ComponentModel.RunWorkerCompletedEventHandler,System.ComponentModel.ProgressChangedEventHandler)">
            <summary>
            Executes code on the background thread.
            </summary>
            <param name="backgroundAction">The background action.</param>
            <param name="uiCallback">The UI callback.</param>
            <param name="progressChanged">The progress change callback.</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.Invocation.DefaultDispatcher.ExecuteOnUIThread(System.Action)">
            <summary>
            Executes code on the UI thread.
            </summary>
            <param name="uiAction">The UI action.</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.Invocation.DefaultDispatcher.BeginExecuteOnUIThread(System.Action)">
            <summary>
            Executes code on the UI thread asynchronously.
            </summary>
            <param name="uiAction">The UI action.</param>
        </member>
        <member name="P:Caliburn.PresentationFramework.Invocation.DefaultDispatcher.DefaultPriority">
            <summary>
            Gets or sets the default dispatcher priority.
            </summary>
            <value>The default priority.</value>
        </member>
        <member name="T:Caliburn.PresentationFramework.Invocation.DispatcherOperationProxy">
            <summary>
            An implemenation of <see cref="T:Caliburn.PresentationFramework.Invocation.IDispatcherOperation"/>.
            </summary>
        </member>
        <member name="T:Caliburn.PresentationFramework.Invocation.IDispatcherOperation">
            <summary>
            Represents an object that is used to interact with an operation that has been posted to 
            the System.Windows.Threading.Dispatcher queue.
            </summary>
        </member>
        <member name="M:Caliburn.PresentationFramework.Invocation.IDispatcherOperation.Abort">
            <summary>
            Aborts the operation.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Caliburn.PresentationFramework.Invocation.IDispatcherOperation.Wait">
            <summary>
            Waits for the operation to complete
            </summary>
        </member>
        <member name="P:Caliburn.PresentationFramework.Invocation.IDispatcherOperation.Result">
            <summary>
            Gets the result of the operation after it has completed.
            </summary>
            <value>The result.</value>
        </member>
        <member name="E:Caliburn.PresentationFramework.Invocation.IDispatcherOperation.Aborted">
            <summary>
            Occurs when the operation is aborted.
            </summary>
        </member>
        <member name="E:Caliburn.PresentationFramework.Invocation.IDispatcherOperation.Completed">
            <summary>
            Occurs when the operation has completed.
            </summary>
        </member>
        <member name="M:Caliburn.PresentationFramework.Invocation.DispatcherOperationProxy.#ctor(System.Windows.Threading.DispatcherOperation)">
            <summary>
            Initializes a new instance of the <see cref="T:Caliburn.PresentationFramework.Invocation.DispatcherOperationProxy"/> class.
            </summary>
            <param name="operation">The operation.</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.Invocation.DispatcherOperationProxy.Abort">
            <summary>
            Aborts the operation.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Caliburn.PresentationFramework.Invocation.DispatcherOperationProxy.Wait">
            <summary>
            Waits for the operation to complete
            </summary>
        </member>
        <member name="P:Caliburn.PresentationFramework.Invocation.DispatcherOperationProxy.Result">
            <summary>
            Gets the result of the operation after it has completed.
            </summary>
            <value>The result.</value>
        </member>
        <member name="E:Caliburn.PresentationFramework.Invocation.DispatcherOperationProxy.Aborted">
            <summary>
            Occurs when the operation is aborted.
            </summary>
        </member>
        <member name="E:Caliburn.PresentationFramework.Invocation.DispatcherOperationProxy.Completed">
            <summary>
            Occurs when the operation has completed.
            </summary>
        </member>
        <member name="T:Caliburn.PresentationFramework.Invocation.Execute">
            <summary>
            Utility methods supporting various forms of method execution.
            </summary>
        </member>
        <member name="M:Caliburn.PresentationFramework.Invocation.Execute.Initialize(Caliburn.PresentationFramework.Invocation.IDispatcher)">
            <summary>
            Initializes for execution.
            </summary>
            <param name="dispatcher">The dispatcher.</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.Invocation.Execute.OnBackgroundThread(System.Action)">
            <summary>
            Executes the backgroundAction on a background thread.
            </summary>
            <param name="backgroundAction">The action.</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.Invocation.Execute.OnBackgroundThread(System.Action,System.ComponentModel.RunWorkerCompletedEventHandler)">
            <summary>
            Executes the backgroundAction on a background thread.
            </summary>
            <param name="backgroundAction">The action.</param>
            <param name="uiCallback">The UI callback.</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.Invocation.Execute.OnBackgroundThread(System.Action,System.ComponentModel.RunWorkerCompletedEventHandler,System.ComponentModel.ProgressChangedEventHandler)">
            <summary>
            Executes the backgroundAction on a background thread.
            </summary>
            <param name="backgroundAction">The action.</param>
            <param name="uiCallback">The UI callback.</param>
            <param name="progressChanged">The progress change callback.</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.Invocation.Execute.OnBackgroundThread(System.Action,System.ComponentModel.ProgressChangedEventHandler)">
            <summary>
            Executes the backgroundAction on a background thread.
            </summary>
            <param name="backgroundAction">The action.</param>
            <param name="progressChanged">The progress change callback.</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.Invocation.Execute.OnUIThread(System.Action)">
            <summary>
            Executes the action on the UI thread.
            </summary>
            <param name="action">The action.</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.Invocation.Execute.OnUIThreadAsync(System.Action)">
            <summary>
            Executes the action on the UI thread asynchronously.
            </summary>
            <param name="action">The action.</param>
        </member>
        <member name="T:Caliburn.PresentationFramework.RoutedMessaging.Parsers.AttachedEventTriggerParser">
            <summary>
            An implementation of <see cref="T:Caliburn.PresentationFramework.RoutedMessaging.Parsers.ITriggerParser"/> that parses routed/attached events.
            </summary>
        </member>
        <member name="T:Caliburn.PresentationFramework.RoutedMessaging.Parsers.ITriggerParser">
            <summary>
            Parses the trigger specific aspects of an <see cref="T:Caliburn.PresentationFramework.RoutedMessaging.IMessageTrigger"/>.
            </summary>
        </member>
        <member name="M:Caliburn.PresentationFramework.RoutedMessaging.Parsers.ITriggerParser.Parse(System.Windows.DependencyObject,System.String)">
            <summary>
            Parses the specified trigger text.
            </summary>
            <param name="target">The targeted ui element.</param>
            <param name="triggerText">The trigger text.</param>
            <returns></returns>
        </member>
        <member name="M:Caliburn.PresentationFramework.RoutedMessaging.Parsers.AttachedEventTriggerParser.Parse(System.Windows.DependencyObject,System.String)">
            <summary>
            Parses the specified trigger text.
            </summary>
            <param name="target">The targeted ui element.</param>
            <param name="triggerText">The trigger text.</param>
            <returns></returns>
        </member>
        <member name="M:Caliburn.PresentationFramework.RoutedMessaging.Parsers.AttachedEventTriggerParser.GetRoutedEvent(System.Windows.DependencyObject,System.String)">
            <summary>
            Locates the routed event.
            </summary>
            <param name="target">The target.</param>
            <param name="triggerText">The trigger text.</param>
            <returns></returns>
        </member>
        <member name="M:Caliburn.PresentationFramework.RoutedMessaging.Parsers.AttachedEventTriggerParser.GetSearchableAssemblies">
            <summary>
            Gets the assemblies that should be inspected for routed events.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Caliburn.PresentationFramework.RoutedMessaging.Parsers.AttachedEventTriggerParser.IsDynamicAssembly(System.Reflection.Assembly)">
            <summary>
            Checks if an assembly is dynamically generated (it doesn't support GetExportedTypes)
            </summary>
            <param name="test">the assembly being test</param>
            <returns></returns>
        </member>
        <member name="T:Caliburn.PresentationFramework.RoutedMessaging.Parsers.CommandTriggerParser">
            <summary>
            An implementation of <see cref="T:Caliburn.PresentationFramework.RoutedMessaging.Parsers.ITriggerParser"/> that parses command source hookups.
            </summary>
        </member>
        <member name="M:Caliburn.PresentationFramework.RoutedMessaging.Parsers.CommandTriggerParser.Parse(System.Windows.DependencyObject,System.String)">
            <summary>
            Parses the specified trigger text.
            </summary>
            <param name="target">The targeted ui element.</param>
            <param name="triggerText">The trigger text.</param>
            <returns></returns>
        </member>
        <member name="T:Caliburn.PresentationFramework.RoutedMessaging.Parsers.DefaultParser">
            <summary>
            An implementation of <see cref="T:Caliburn.PresentationFramework.RoutedMessaging.Parsers.IParser"/>.
            </summary>
        </member>
        <member name="T:Caliburn.PresentationFramework.RoutedMessaging.Parsers.IParser">
            <summary>
            Parses text into a fully functional <see cref="T:Caliburn.PresentationFramework.RoutedMessaging.IMessageTrigger"/>.
            </summary>
        </member>
        <member name="M:Caliburn.PresentationFramework.RoutedMessaging.Parsers.IParser.SetDefaultMessageParser(System.String)">
            <summary>
            Sets the default message parser.
            </summary>
            <param name="key">The key.</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.RoutedMessaging.Parsers.IParser.RegisterTriggerParser(System.String,Caliburn.PresentationFramework.RoutedMessaging.Parsers.ITriggerParser)">
            <summary>
            Registers a trigger parser.
            </summary>
            <param name="key">The key.</param>
            <param name="parser">The parser.</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.RoutedMessaging.Parsers.IParser.RegisterMessageParser(System.String,Caliburn.PresentationFramework.RoutedMessaging.Parsers.IMessageParser)">
            <summary>
            Registers a message parser.
            </summary>
            <param name="key">The key.</param>
            <param name="parser">The parser.</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.RoutedMessaging.Parsers.IParser.Parse(System.Windows.DependencyObject,System.String)">
            <summary>
            Parses the specified message text.
            </summary>
            <param name="target">The target.</param>
            <param name="messageText">The message text.</param>
            <returns>The triggers parsed from the text.</returns>
        </member>
        <member name="P:Caliburn.PresentationFramework.RoutedMessaging.Parsers.IParser.MessageDelimiter">
            <summary>
            Gets or sets the message delimiter.
            </summary>
            <value>The message delimiter.</value>
        </member>
        <member name="M:Caliburn.PresentationFramework.RoutedMessaging.Parsers.DefaultParser.#ctor(Caliburn.PresentationFramework.Conventions.IConventionManager)">
            <summary>
            Initializes a new instance of the <see cref="T:Caliburn.PresentationFramework.RoutedMessaging.Parsers.DefaultParser"/> class.
            </summary>
        </member>
        <member name="M:Caliburn.PresentationFramework.RoutedMessaging.Parsers.DefaultParser.SetDefaultMessageParser(System.String)">
            <summary>
            Sets the default message parser.
            </summary>
            <param name="key">The key.</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.RoutedMessaging.Parsers.DefaultParser.RegisterTriggerParser(System.String,Caliburn.PresentationFramework.RoutedMessaging.Parsers.ITriggerParser)">
            <summary>
            Registers a trigger parser.
            </summary>
            <param name="key">The key.</param>
            <param name="parser">The parser.</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.RoutedMessaging.Parsers.DefaultParser.RegisterMessageParser(System.String,Caliburn.PresentationFramework.RoutedMessaging.Parsers.IMessageParser)">
            <summary>
            Registers a message parser.
            </summary>
            <param name="key">The key.</param>
            <param name="parser">The parser.</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.RoutedMessaging.Parsers.DefaultParser.Parse(System.Windows.DependencyObject,System.String)">
            <summary>
            Parses the specified message text.
            </summary>
            <param name="target">The target.</param>
            <param name="messageText">The message text.</param>
            <returns>The triggers parsed from the text.</returns>
        </member>
        <member name="M:Caliburn.PresentationFramework.RoutedMessaging.Parsers.DefaultParser.ParseMessage(System.String,System.Windows.DependencyObject)">
            <summary>
            Parses the specified message text.
            </summary>
            <param name="target">The target.</param>
            <param name="messageText">The message text.</param>
            <returns>The triggers parsed from the text.</returns>
        </member>
        <member name="P:Caliburn.PresentationFramework.RoutedMessaging.Parsers.DefaultParser.MessageDelimiter">
            <summary>
            Gets or sets the message delimiter.
            </summary>
            <value>The message delimiter.</value>
        </member>
        <member name="T:Caliburn.PresentationFramework.RoutedMessaging.Parsers.EventTriggerParser">
            <summary>
            An implementation of <see cref="T:Caliburn.PresentationFramework.RoutedMessaging.Parsers.ITriggerParser"/> that parses standard events.
            </summary>
        </member>
        <member name="M:Caliburn.PresentationFramework.RoutedMessaging.Parsers.EventTriggerParser.Parse(System.Windows.DependencyObject,System.String)">
            <summary>
            Parses the specified trigger text.
            </summary>
            <param name="target">The targeted ui element.</param>
            <param name="triggerText">The trigger text.</param>
            <returns></returns>
        </member>
        <member name="T:Caliburn.PresentationFramework.RoutedMessaging.Parsers.GestureTriggerParser">
            <summary>
            An implementation of <see cref="T:Caliburn.PresentationFramework.RoutedMessaging.Parsers.ITriggerParser"/> that parses gestures.
            </summary>
        </member>
        <member name="M:Caliburn.PresentationFramework.RoutedMessaging.Parsers.GestureTriggerParser.Parse(System.Windows.DependencyObject,System.String)">
            <summary>
            Parses the specified trigger text.
            </summary>
            <param name="target">The targeted ui element.</param>
            <param name="triggerText">The trigger text.</param>
            <returns></returns>
        </member>
        <member name="T:Caliburn.PresentationFramework.RoutedMessaging.Triggers.Support.UnrestrictedKeyGesture">
            <summary>
            This is an import of System.Windows.Input.KeyGesture, with the validation behaviour disabled.
            </summary>
            <remarks>
            The default KeyGesture supplied with WPF is hard-coded to validate the key combination, and does
            so based on an arbitary rule to disallow any alpha-numeric keys without modifiers. This decision
            makes it very difficult to create a mouseless application with WPF and Caliburn.
            </remarks>
        </member>
        <member name="M:Caliburn.PresentationFramework.RoutedMessaging.Triggers.Support.UnrestrictedKeyGesture.#ctor(System.Windows.Input.Key)">
            <summary>
            Initializes a new instance of the <see cref="T:Caliburn.PresentationFramework.RoutedMessaging.Triggers.Support.UnrestrictedKeyGesture"/> class.
            </summary>
            <param name="key">The key.</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.RoutedMessaging.Triggers.Support.UnrestrictedKeyGesture.#ctor(System.Windows.Input.Key,System.Windows.Input.ModifierKeys)">
            <summary>
            Initializes a new instance of the <see cref="T:Caliburn.PresentationFramework.RoutedMessaging.Triggers.Support.UnrestrictedKeyGesture"/> class.
            </summary>
            <param name="key">The key.</param>
            <param name="modifiers">The modifiers.</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.RoutedMessaging.Triggers.Support.UnrestrictedKeyGesture.#ctor(System.Windows.Input.Key,System.Windows.Input.ModifierKeys,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Caliburn.PresentationFramework.RoutedMessaging.Triggers.Support.UnrestrictedKeyGesture"/> class.
            </summary>
            <param name="key">The key.</param>
            <param name="modifiers">The modifiers.</param>
            <param name="validateGesture">if set to <c>true</c> [validate gesture].</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.RoutedMessaging.Triggers.Support.UnrestrictedKeyGesture.#ctor(System.Windows.Input.Key,System.Windows.Input.ModifierKeys,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Caliburn.PresentationFramework.RoutedMessaging.Triggers.Support.UnrestrictedKeyGesture"/> class.
            </summary>
            <param name="key">The key.</param>
            <param name="modifiers">The modifiers.</param>
            <param name="displayString">The display string.</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.RoutedMessaging.Triggers.Support.UnrestrictedKeyGesture.GetDisplayStringForCulture(System.Globalization.CultureInfo)">
            <summary>
            Gets the display string for culture.
            </summary>
            <param name="culture">The culture.</param>
            <returns></returns>
        </member>
        <member name="M:Caliburn.PresentationFramework.RoutedMessaging.Triggers.Support.UnrestrictedKeyGesture.Matches(System.Object,System.Windows.Input.InputEventArgs)">
            <summary>
            When overridden in a derived class, determines whether the specified <see cref="T:System.Windows.Input.InputGesture"/> matches the input associated with the specified <see cref="T:System.Windows.Input.InputEventArgs"/> object.
            </summary>
            <param name="targetElement">The target of the command.</param>
            <param name="inputEventArgs">The input event data to compare this gesture to.</param>
            <returns>
            true if the gesture matches the input; otherwise, false.
            </returns>
        </member>
        <member name="P:Caliburn.PresentationFramework.RoutedMessaging.Triggers.Support.UnrestrictedKeyGesture.DisplayString">
            <summary>
            Gets the display string.
            </summary>
            <value>The display string.</value>
        </member>
        <member name="P:Caliburn.PresentationFramework.RoutedMessaging.Triggers.Support.UnrestrictedKeyGesture.Key">
            <summary>
            Gets the key.
            </summary>
            <value>The key.</value>
        </member>
        <member name="P:Caliburn.PresentationFramework.RoutedMessaging.Triggers.Support.UnrestrictedKeyGesture.Modifiers">
            <summary>
            Gets the modifiers.
            </summary>
            <value>The modifiers.</value>
        </member>
        <member name="T:Caliburn.PresentationFramework.RoutedMessaging.Triggers.Support.UnrestrictedKeyGestureConverter">
            <summary>
            This is an import of System.Windows.Input.KeyGestureConverter, unmodified except for references
            to KeyGesture replaced with UnrestrictedKeyGesture.
            </summary>
        </member>
        <member name="M:Caliburn.PresentationFramework.RoutedMessaging.Triggers.Support.UnrestrictedKeyGestureConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Returns whether this converter can convert an object of the given type to the type of this converter, using the specified context.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
            <param name="sourceType">A <see cref="T:System.Type"/> that represents the type you want to convert from.</param>
            <returns>
            true if this converter can perform the conversion; otherwise, false.
            </returns>
        </member>
        <member name="M:Caliburn.PresentationFramework.RoutedMessaging.Triggers.Support.UnrestrictedKeyGestureConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Returns whether this converter can convert the object to the specified type, using the specified context.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
            <param name="destinationType">A <see cref="T:System.Type"/> that represents the type you want to convert to.</param>
            <returns>
            true if this converter can perform the conversion; otherwise, false.
            </returns>
        </member>
        <member name="M:Caliburn.PresentationFramework.RoutedMessaging.Triggers.Support.UnrestrictedKeyGestureConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Converts from.
            </summary>
            <param name="context">The context.</param>
            <param name="culture">The culture.</param>
            <param name="source">The source.</param>
            <returns></returns>
        </member>
        <member name="M:Caliburn.PresentationFramework.RoutedMessaging.Triggers.Support.UnrestrictedKeyGestureConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
            Converts the given value object to the specified type, using the specified context and culture information.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
            <param name="culture">A <see cref="T:System.Globalization.CultureInfo"/>. If null is passed, the current culture is assumed.</param>
            <param name="value">The <see cref="T:System.Object"/> to convert.</param>
            <param name="destinationType">The <see cref="T:System.Type"/> to convert the <paramref name="value"/> parameter to.</param>
            <returns>
            An <see cref="T:System.Object"/> that represents the converted value.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="destinationType"/> parameter is null.
            </exception>
            <exception cref="T:System.NotSupportedException">
            The conversion cannot be performed.
            </exception>
        </member>
        <member name="T:Caliburn.PresentationFramework.RoutedMessaging.Triggers.Support.UnrestrictedKeyGestureValueSerializer">
            <summary>
            This is an import of System.Windows.Input.KeyGestureValueSerializer, unmodified except for references
            to KeyGesture replaced with UnrestrictedKeyGesture.
            </summary>
        </member>
        <member name="M:Caliburn.PresentationFramework.RoutedMessaging.Triggers.Support.UnrestrictedKeyGestureValueSerializer.CanConvertFromString(System.String,System.Windows.Markup.IValueSerializerContext)">
            <summary>
            Determines whether the specified <see cref="T:System.String"/> can be converted to an instance of the type that the implementation of <see cref="T:System.Windows.Markup.ValueSerializer"/> supports.
            </summary>
            <param name="value">String to evaluate for conversion.</param>
            <param name="context">Context information that is used for conversion.</param>
            <returns>
            true if the value can be converted; otherwise, false.
            </returns>
        </member>
        <member name="M:Caliburn.PresentationFramework.RoutedMessaging.Triggers.Support.UnrestrictedKeyGestureValueSerializer.CanConvertToString(System.Object,System.Windows.Markup.IValueSerializerContext)">
            <summary>
            Determines whether the specified object can be converted into a <see cref="T:System.String"/>.
            </summary>
            <param name="value">The object to evaluate for conversion.</param>
            <param name="context">Context information that is used for conversion.</param>
            <returns>
            true if the <paramref name="value"/> can be converted into a <see cref="T:System.String"/>; otherwise, false.
            </returns>
        </member>
        <member name="M:Caliburn.PresentationFramework.RoutedMessaging.Triggers.Support.UnrestrictedKeyGestureValueSerializer.ConvertFromString(System.String,System.Windows.Markup.IValueSerializerContext)">
            <summary>
            Converts a <see cref="T:System.String"/> to an instance of the type that the implementation of <see cref="T:System.Windows.Markup.ValueSerializer"/> supports.
            </summary>
            <param name="value">The string to convert.</param>
            <param name="context">Context information that is used for conversion.</param>
            <returns>
            A new instance of the type that the implementation of <see cref="T:System.Windows.Markup.ValueSerializer"/> supports based on the supplied <paramref name="value"/>.
            </returns>
            <exception cref="T:System.NotSupportedException">
            	<paramref name="value"/> cannot be converted.
            </exception>
        </member>
        <member name="M:Caliburn.PresentationFramework.RoutedMessaging.Triggers.Support.UnrestrictedKeyGestureValueSerializer.ConvertToString(System.Object,System.Windows.Markup.IValueSerializerContext)">
            <summary>
            Converts the specified object to a <see cref="T:System.String"/>.
            </summary>
            <param name="value">The object to convert into a string.</param>
            <param name="context">Context information that is used for conversion.</param>
            <returns>
            A string representation of the specified object.
            </returns>
            <exception cref="T:System.NotSupportedException">
            	<paramref name="value"/> cannot be converted.
            </exception>
        </member>
        <member name="T:Caliburn.PresentationFramework.RoutedMessaging.Triggers.AttachedEventMessageTrigger">
            <summary>
            A message trigger that triggers by routed/attached events.
            </summary>
        </member>
        <member name="T:Caliburn.PresentationFramework.RoutedMessaging.BaseMessageTrigger">
            <summary>
            A base class to ease the implementation of <see cref="T:Caliburn.PresentationFramework.RoutedMessaging.IMessageTrigger"/>.
            </summary>
        </member>
        <member name="T:Caliburn.PresentationFramework.RoutedMessaging.IMessageTrigger">
            <summary>
            Implementors enable various methods of triggering the sending of messages.
            </summary>
        </member>
        <member name="M:Caliburn.PresentationFramework.RoutedMessaging.IMessageTrigger.Attach(Caliburn.PresentationFramework.RoutedMessaging.IInteractionNode)">
            <summary>
            Attaches the trigger to the interaction hierarchy.
            </summary>
            <param name="node">The node.</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.RoutedMessaging.IMessageTrigger.UpdateAvailabilty(System.Boolean)">
            <summary>
            Updates the UI to reflect the availabilty of the trigger.
            </summary>
            <param name="isAvailable">if set to <c>true</c> [is available].</param>
        </member>
        <member name="P:Caliburn.PresentationFramework.RoutedMessaging.IMessageTrigger.Node">
            <summary>
            Gets the node within the interaction hierarchy that this trigger is a part of.
            </summary>
            <value>The node.</value>
        </member>
        <member name="P:Caliburn.PresentationFramework.RoutedMessaging.IMessageTrigger.Message">
            <summary>
            Gets the message that this trigger will send.
            </summary>
            <value>The message.</value>
        </member>
        <member name="F:Caliburn.PresentationFramework.RoutedMessaging.BaseMessageTrigger.MessageProperty">
            <summary>
            A dependency property used to store the message sent by the trigger.
            </summary>
        </member>
        <member name="M:Caliburn.PresentationFramework.RoutedMessaging.BaseMessageTrigger.Attach(Caliburn.PresentationFramework.RoutedMessaging.IInteractionNode)">
            <summary>
            Wires the trigger into the interaction hierarchy.
            </summary>
            <param name="node">The node.</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.RoutedMessaging.BaseMessageTrigger.UpdateAvailabilty(System.Boolean)">
            <summary>
            Updates the UI to reflect the availabilty of the trigger.
            </summary>
            <param name="isAvailable">if set to <c>true</c> [is available].</param>
        </member>
        <member name="P:Caliburn.PresentationFramework.RoutedMessaging.BaseMessageTrigger.Node">
            <summary>
            Gets the node within the interaction hierarchy that this trigger is a part of.
            </summary>
            <value>The node.</value>
        </member>
        <member name="P:Caliburn.PresentationFramework.RoutedMessaging.BaseMessageTrigger.Message">
            <summary>
            Gets the action details that this trigger will send.
            </summary>
            <value>The action details.</value>
        </member>
        <member name="F:Caliburn.PresentationFramework.RoutedMessaging.Triggers.AttachedEventMessageTrigger.RoutedEventProperty">
            <summary>
            A dependency property representing the routed event's value.
            </summary>
        </member>
        <member name="M:Caliburn.PresentationFramework.RoutedMessaging.Triggers.AttachedEventMessageTrigger.Attach(Caliburn.PresentationFramework.RoutedMessaging.IInteractionNode)">
            <summary>
            Wires the trigger into the interaction hierarchy.
            </summary>
            <param name="node">The node.</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.RoutedMessaging.Triggers.AttachedEventMessageTrigger.CreateInstanceCore">
            <summary>
            When implemented in a derived class, creates a new instance of the <see cref="T:System.Windows.Freezable"/> derived class.
            </summary>
            <returns>The new instance.</returns>
        </member>
        <member name="M:Caliburn.PresentationFramework.RoutedMessaging.Triggers.AttachedEventMessageTrigger.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="P:Caliburn.PresentationFramework.RoutedMessaging.Triggers.AttachedEventMessageTrigger.RoutedEvent">
            <summary>
            Gets or sets the routed event.
            </summary>
            <value>The routed event.</value>
        </member>
        <member name="T:Caliburn.PresentationFramework.RoutedMessaging.Triggers.CommandMessageTrigger">
            <summary>
            A message trigger that triggers from command execution of an ICommandSource.
            </summary>
        </member>
        <member name="M:Caliburn.PresentationFramework.RoutedMessaging.Triggers.CommandMessageTrigger.CreateInstanceCore">
            <summary>
            When implemented in a derived class, creates a new instance of the <see cref="T:System.Windows.Freezable"/> derived class.
            </summary>
            <returns>The new instance.</returns>
        </member>
        <member name="M:Caliburn.PresentationFramework.RoutedMessaging.Triggers.CommandMessageTrigger.Attach(Caliburn.PresentationFramework.RoutedMessaging.IInteractionNode)">
            <summary>
            Wires the trigger into the interaction hierarchy.
            </summary>
            <param name="node">The node.</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.RoutedMessaging.Triggers.CommandMessageTrigger.UpdateAvailabilty(System.Boolean)">
            <summary>
            Updates the UI to reflect the availabilty of the trigger.
            </summary>
            <param name="isAvailable">if set to <c>true</c> [is available].</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.RoutedMessaging.Triggers.CommandMessageTrigger.System#Windows#Input#ICommand#Execute(System.Object)">
            <summary>
            Defines the method to be called when the command is invoked.
            </summary>
            <param name="parameter">Data used by the command.  If the command does not require data to be passed, this object can be set to null.</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.RoutedMessaging.Triggers.CommandMessageTrigger.System#Windows#Input#ICommand#CanExecute(System.Object)">
            <summary>
            Defines the method that determines whether the command can execute in its current state.
            </summary>
            <returns>
            true if this command can be executed; otherwise, false.
            </returns>
            <param name="parameter">Data used by the command.  If the command does not require data to be passed, this object can be set to null.</param>
        </member>
        <member name="E:Caliburn.PresentationFramework.RoutedMessaging.Triggers.CommandMessageTrigger.System#Windows#Input#ICommand#CanExecuteChanged">
            <summary>
            Occurs when changes occur that affect whether or not the command should execute.
            </summary>
        </member>
        <member name="T:Caliburn.PresentationFramework.RoutedMessaging.Triggers.EventMessageTrigger">
            <summary>
            A message trigger that triggers by standard CLR events.
            </summary>
        </member>
        <member name="F:Caliburn.PresentationFramework.RoutedMessaging.Triggers.EventMessageTrigger.EventNameProperty">
            <summary>
            A dependency property representing the event name's value.
            </summary>
        </member>
        <member name="M:Caliburn.PresentationFramework.RoutedMessaging.Triggers.EventMessageTrigger.Attach(Caliburn.PresentationFramework.RoutedMessaging.IInteractionNode)">
            <summary>
            Wires the trigger into the interaction hierarchy.
            </summary>
            <param name="node">The node.</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.RoutedMessaging.Triggers.EventMessageTrigger.OnEvent(System.Object,System.EventArgs)">
            <summary>
            Called when the event trigger is raised.
            </summary>
            <param name="sender">The sender.</param>
            <param name="args">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.RoutedMessaging.Triggers.EventMessageTrigger.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:Caliburn.PresentationFramework.RoutedMessaging.Triggers.EventMessageTrigger.CreateInstanceCore">
            <summary>
            When implemented in a derived class, creates a new instance of the <see cref="T:System.Windows.Freezable"/> derived class.
            </summary>
            <returns>The new instance.</returns>
        </member>
        <member name="P:Caliburn.PresentationFramework.RoutedMessaging.Triggers.EventMessageTrigger.EventName">
            <summary>
            Gets or sets the name of the event.
            </summary>
            <value>The name of the event.</value>
        </member>
        <member name="T:Caliburn.PresentationFramework.RoutedMessaging.Triggers.GestureMessageTrigger">
            <summary>
            An implentation of <see cref="T:System.Windows.Input.InputGesture"/> that enables triggers based on an <see cref="T:Caliburn.PresentationFramework.RoutedMessaging.IMessageTrigger"/>.
            </summary>
        </member>
        <member name="F:Caliburn.PresentationFramework.RoutedMessaging.Triggers.GestureMessageTrigger.KeyProperty">
            <summary>
            A dependency property representing the key's value.
            </summary>
        </member>
        <member name="F:Caliburn.PresentationFramework.RoutedMessaging.Triggers.GestureMessageTrigger.ModifiersProperty">
            <summary>
            A dependency property representing the modifier's value.
            </summary>
        </member>
        <member name="F:Caliburn.PresentationFramework.RoutedMessaging.Triggers.GestureMessageTrigger.MouseActionProperty">
            <summary>
            A dependency property representing the mouse action's value.
            </summary>
        </member>
        <member name="M:Caliburn.PresentationFramework.RoutedMessaging.Triggers.GestureMessageTrigger.Attach(Caliburn.PresentationFramework.RoutedMessaging.IInteractionNode)">
            <summary>
            Wires the trigger into the interactin hierarchy.
            </summary>
            <param name="node">The node.</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.RoutedMessaging.Triggers.GestureMessageTrigger.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:Caliburn.PresentationFramework.RoutedMessaging.Triggers.GestureMessageTrigger.UpdateAvailabilty(System.Boolean)">
            <summary>
            Updates the UI to reflect the availabilty of the trigger.
            </summary>
            <param name="isAvailable">if set to <c>true</c> [is available].</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.RoutedMessaging.Triggers.GestureMessageTrigger.CreateInstanceCore">
            <summary>
            When implemented in a derived class, creates a new instance of the <see cref="T:System.Windows.Freezable"/> derived class.
            </summary>
            <returns>The new instance.</returns>
        </member>
        <member name="P:Caliburn.PresentationFramework.RoutedMessaging.Triggers.GestureMessageTrigger.Key">
            <summary>
            Gets or sets the key.
            </summary>
            <value>The key.</value>
        </member>
        <member name="P:Caliburn.PresentationFramework.RoutedMessaging.Triggers.GestureMessageTrigger.Modifiers">
            <summary>
            Gets or sets the modifiers.
            </summary>
            <value>The modifiers.</value>
        </member>
        <member name="P:Caliburn.PresentationFramework.RoutedMessaging.Triggers.GestureMessageTrigger.MouseAction">
            <summary>
            Gets or sets the mouse action.
            </summary>
            <value>The mouse action.</value>
        </member>
        <member name="T:Caliburn.PresentationFramework.RoutedMessaging.Triggers.GestureMessageTrigger.GestureCommand">
            <summary>
            Used to attach gestures.
            </summary>
        </member>
        <member name="M:Caliburn.PresentationFramework.RoutedMessaging.Triggers.GestureMessageTrigger.GestureCommand.#ctor(System.Windows.Input.InputGesture)">
            <summary>
            Initializes a new instance of the <see cref="T:Caliburn.PresentationFramework.RoutedMessaging.Triggers.GestureMessageTrigger.GestureCommand"/> class.
            </summary>
            <param name="gesture">The gesture.</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.RoutedMessaging.Triggers.GestureMessageTrigger.GestureCommand.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with the current <see cref="T:System.Object"/>.</param>
            <returns>
            true if the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>; otherwise, false.
            </returns>
            <exception cref="T:System.NullReferenceException">
            The <paramref name="obj"/> parameter is null.
            </exception>
        </member>
        <member name="M:Caliburn.PresentationFramework.RoutedMessaging.Triggers.GestureMessageTrigger.GestureCommand.GetHashCode">
            <summary>
            Serves as a hash function for a particular type.
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="M:Caliburn.PresentationFramework.RoutedMessaging.Triggers.GestureMessageTrigger.GestureCommand.op_Equality(Caliburn.PresentationFramework.RoutedMessaging.Triggers.GestureMessageTrigger.GestureCommand,Caliburn.PresentationFramework.RoutedMessaging.Triggers.GestureMessageTrigger.GestureCommand)">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="x">The x.</param>
            <param name="y">The y.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:Caliburn.PresentationFramework.RoutedMessaging.Triggers.GestureMessageTrigger.GestureCommand.op_Inequality(Caliburn.PresentationFramework.RoutedMessaging.Triggers.GestureMessageTrigger.GestureCommand,Caliburn.PresentationFramework.RoutedMessaging.Triggers.GestureMessageTrigger.GestureCommand)">
            <summary>
            Implements the operator !=.
            </summary>
            <param name="x">The x.</param>
            <param name="y">The y.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:Caliburn.PresentationFramework.RoutedMessaging.Triggers.GestureMessageTrigger.GestureCommand.AddTrigger(Caliburn.PresentationFramework.RoutedMessaging.Triggers.GestureMessageTrigger)">
            <summary>
            Adds the trigger.
            </summary>
            <param name="trigger">The trigger.</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.RoutedMessaging.Triggers.GestureMessageTrigger.GestureCommand.Execute(System.Object)">
            <summary>
            Defines the method to be called when the command is invoked.
            </summary>
            <param name="parameter">Data used by the command.  If the command does not require data to be passed, this object can be set to null.</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.RoutedMessaging.Triggers.GestureMessageTrigger.GestureCommand.CanExecute(System.Object)">
            <summary>
            Defines the method that determines whether the command can execute in its current state.
            </summary>
            <param name="parameter">Data used by the command.  If the command does not require data to be passed, this object can be set to null.</param>
            <returns>
            true if this command can be executed; otherwise, false.
            </returns>
        </member>
        <member name="P:Caliburn.PresentationFramework.RoutedMessaging.Triggers.GestureMessageTrigger.GestureCommand.Gesture">
            <summary>
            Gets the gesture.
            </summary>
            <value>The gesture.</value>
        </member>
        <member name="E:Caliburn.PresentationFramework.RoutedMessaging.Triggers.GestureMessageTrigger.GestureCommand.System#Windows#Input#ICommand#CanExecuteChanged">
            <summary>
            Occurs when changes occur that affect whether or not the command should execute.
            </summary>
        </member>
        <member name="T:Caliburn.PresentationFramework.RoutedMessaging.AvailabilityEffect">
            <summary>
            Common implementations of <see cref="T:Caliburn.PresentationFramework.RoutedMessaging.IAvailabilityEffect"/>.
            </summary>
        </member>
        <member name="F:Caliburn.PresentationFramework.RoutedMessaging.AvailabilityEffect.None">
            <summary>
            The element is not affected by changes in availability.
            </summary>
        </member>
        <member name="F:Caliburn.PresentationFramework.RoutedMessaging.AvailabilityEffect.Disable">
            <summary>
            This effect can disable the UI.
            </summary>
        </member>
        <member name="F:Caliburn.PresentationFramework.RoutedMessaging.AvailabilityEffect.Hide">
            <summary>
            This effect can hide the UI.
            </summary>
        </member>
        <member name="F:Caliburn.PresentationFramework.RoutedMessaging.AvailabilityEffect.Collapse">
            <summary>
            This effect can collapse the UI.
            </summary>
        </member>
        <member name="T:Caliburn.PresentationFramework.RoutedMessaging.AvailabilityEffect.NoneEffect">
            <summary>
            The element is not affected by changes in availability.
            </summary>
        </member>
        <member name="T:Caliburn.PresentationFramework.RoutedMessaging.IAvailabilityEffect">
            <summary>
            Describes how a UI is affected by the availability of a message.
            </summary>
        </member>
        <member name="M:Caliburn.PresentationFramework.RoutedMessaging.IAvailabilityEffect.ApplyTo(System.Windows.DependencyObject,System.Boolean)">
            <summary>
            Applies the effect to the target.
            </summary>
            <param name="target">The element.</param>
            <param name="isAvailable">Determines how the effect will be applied to the target.</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.RoutedMessaging.AvailabilityEffect.NoneEffect.ApplyTo(System.Windows.DependencyObject,System.Boolean)">
            <summary>
            Applies the effect to the target.
            </summary>
            <param name="target">The element.</param>
            <param name="isAvailable">Determines how the effect will be applied to the target.</param>
        </member>
        <member name="T:Caliburn.PresentationFramework.RoutedMessaging.AvailabilityEffect.DisableEffect">
            <summary>
            This effect can disable the UI.
            </summary>
        </member>
        <member name="M:Caliburn.PresentationFramework.RoutedMessaging.AvailabilityEffect.DisableEffect.ApplyTo(System.Windows.DependencyObject,System.Boolean)">
            <summary>
            Applies the effect to the target.
            </summary>
            <param name="target">The element.</param>
            <param name="isAvailable">Determines how the effect will be applied to the target.</param>
        </member>
        <member name="T:Caliburn.PresentationFramework.RoutedMessaging.AvailabilityEffect.HideEffect">
            <summary>
            This effect can hide the UI.
            </summary>
        </member>
        <member name="M:Caliburn.PresentationFramework.RoutedMessaging.AvailabilityEffect.HideEffect.ApplyTo(System.Windows.DependencyObject,System.Boolean)">
            <summary>
            Applies the effect to the target.
            </summary>
            <param name="target">The element.</param>
            <param name="isAvailable">Determines how the effect will be applied to the target.</param>
        </member>
        <member name="T:Caliburn.PresentationFramework.RoutedMessaging.AvailabilityEffect.CollapseEffect">
            <summary>
            This effect can collapse the UI.
            </summary>
        </member>
        <member name="M:Caliburn.PresentationFramework.RoutedMessaging.AvailabilityEffect.CollapseEffect.ApplyTo(System.Windows.DependencyObject,System.Boolean)">
            <summary>
            Applies the effect to the target.
            </summary>
            <param name="target">The element.</param>
            <param name="isAvailable">Determines how the effect will be applied to the target.</param>
        </member>
        <member name="T:Caliburn.PresentationFramework.RoutedMessaging.AvailabilityEffectConverter">
            <summary>
            A <see cref="T:System.ComponentModel.TypeConverter"/> capable of converting strings to <see cref="T:Caliburn.PresentationFramework.RoutedMessaging.IAvailabilityEffect"/> instances.
            </summary>
        </member>
        <member name="M:Caliburn.PresentationFramework.RoutedMessaging.AvailabilityEffectConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Returns whether this converter can convert an object of the given type to the type of this converter, using the specified context.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
            <param name="sourceType">A <see cref="T:System.Type"/> that represents the type you want to convert from.</param>
            <returns>
            true if this converter can perform the conversion; otherwise, false.
            </returns>
        </member>
        <member name="M:Caliburn.PresentationFramework.RoutedMessaging.AvailabilityEffectConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Converts the given object to the type of this converter, using the specified context and culture information.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
            <param name="culture">The <see cref="T:System.Globalization.CultureInfo"/> to use as the current culture.</param>
            <param name="value">The <see cref="T:System.Object"/> to convert.</param>
            <returns>
            An <see cref="T:System.Object"/> that represents the converted value.
            </returns>
            <exception cref="T:System.NotSupportedException">
            The conversion cannot be performed.
            </exception>
        </member>
        <member name="T:Caliburn.PresentationFramework.RoutedMessaging.DefaultMessageBinder">
            <summary>
            The default implementation of <see cref="T:Caliburn.PresentationFramework.RoutedMessaging.IMessageBinder"/>.
            </summary>
        </member>
        <member name="T:Caliburn.PresentationFramework.RoutedMessaging.IMessageBinder">
            <summary>
            A service that is capable of properly binding values to a methods parameters and return.
            </summary>
        </member>
        <member name="M:Caliburn.PresentationFramework.RoutedMessaging.IMessageBinder.IsSpecialValue(System.String)">
            <summary>
            Determines whether the supplied value is recognized as a specialy treated value.
            </summary>
            <param name="potential">The potential value.</param>
            <returns>
            	<c>true</c> if a special value; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Caliburn.PresentationFramework.RoutedMessaging.IMessageBinder.AddValueHandler(System.String,System.Func{Caliburn.PresentationFramework.RoutedMessaging.IInteractionNode,System.Object,System.Object})">
            <summary>
            Identifies a special value along with its handler.
            </summary>
            <param name="specialValue">The special value.</param>
            <param name="handler">The handler.</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.RoutedMessaging.IMessageBinder.DetermineParameters(Caliburn.PresentationFramework.RoutedMessaging.IRoutedMessage,System.Collections.Generic.IList{Caliburn.PresentationFramework.RoutedMessaging.RequiredParameter},Caliburn.PresentationFramework.RoutedMessaging.IInteractionNode,System.Object)">
            <summary>
            Determines the parameters that a method should be invoked with.
            </summary>
            <param name="message">The message to determine the parameters for.</param>
            <param name="requiredParameters">The requirements for method binding.</param>
            <param name="handlingNode">The handling node.</param>
            <param name="context">The context.</param>
            <returns>The actual parameters</returns>
        </member>
        <member name="M:Caliburn.PresentationFramework.RoutedMessaging.IMessageBinder.CreateResult(Caliburn.PresentationFramework.RoutedMessaging.MessageProcessingOutcome)">
            <summary>
            Creates a result from the message outcome.
            </summary>
            <param name="outcome">The outcome of processing the message.</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.RoutedMessaging.DefaultMessageBinder.#ctor(Caliburn.PresentationFramework.Conventions.IConventionManager)">
            <summary>
            Initializes a new instance of the <see cref="T:Caliburn.PresentationFramework.RoutedMessaging.DefaultMessageBinder"/> class.
            </summary>
        </member>
        <member name="M:Caliburn.PresentationFramework.RoutedMessaging.DefaultMessageBinder.IsSpecialValue(System.String)">
            <summary>
            Determines whether the supplied value is recognized as a specialy treated value.
            </summary>
            <param name="potential">The potential value.</param>
            <returns>
            	<c>true</c> if a special value; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Caliburn.PresentationFramework.RoutedMessaging.DefaultMessageBinder.AddValueHandler(System.String,System.Func{Caliburn.PresentationFramework.RoutedMessaging.IInteractionNode,System.Object,System.Object})">
            <summary>
            Identifies a special value along with its handler.
            </summary>
            <param name="specialValue">The special value.</param>
            <param name="handler">The handler.</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.RoutedMessaging.DefaultMessageBinder.DetermineParameters(Caliburn.PresentationFramework.RoutedMessaging.IRoutedMessage,System.Collections.Generic.IList{Caliburn.PresentationFramework.RoutedMessaging.RequiredParameter},Caliburn.PresentationFramework.RoutedMessaging.IInteractionNode,System.Object)">
            <summary>
            Determines the parameters that a method should be invoked with.
            </summary>
            <param name="message">The message to determine the parameters for.</param>
            <param name="requiredParameters">The requirements for method binding.</param>
            <param name="handlingNode">The handling node.</param>
            <param name="context">The context.</param>
            <returns>The actual parameter values.</returns>
        </member>
        <member name="M:Caliburn.PresentationFramework.RoutedMessaging.DefaultMessageBinder.CreateResult(Caliburn.PresentationFramework.RoutedMessaging.MessageProcessingOutcome)">
            <summary>
            Binds the return value to the UI.
            </summary>
            <param name="outcome">The outcome or processing the message.</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.RoutedMessaging.DefaultMessageBinder.LocateAndCoerceValues(System.Collections.Generic.IList{Caliburn.PresentationFramework.RoutedMessaging.RequiredParameter},Caliburn.PresentationFramework.RoutedMessaging.IInteractionNode,Caliburn.PresentationFramework.RoutedMessaging.IInteractionNode,System.Object)">
            <summary>
            Locates and perofrms type coercion for the required parameters.
            </summary>
            <param name="requiredParameters">The required parameters.</param>
            <param name="sourceNode">The source node.</param>
            <param name="handlingNode">The handling node.</param>
            <param name="context">The context.</param>
            <returns></returns>
        </member>
        <member name="M:Caliburn.PresentationFramework.RoutedMessaging.DefaultMessageBinder.CoerceValues(System.Collections.Generic.IList{Caliburn.PresentationFramework.RoutedMessaging.RequiredParameter},System.Object[],Caliburn.PresentationFramework.RoutedMessaging.IInteractionNode,System.Object)">
            <summary>
            Coerces the values.
            </summary>
            <param name="requiredParameters">The required parameters.</param>
            <param name="providedValues">The provided values.</param>
            <param name="sourceNode">The source node.</param>
            <param name="context">The context.</param>
            <returns></returns>
        </member>
        <member name="M:Caliburn.PresentationFramework.RoutedMessaging.DefaultMessageBinder.DetermineSpecialValue(System.String,Caliburn.PresentationFramework.RoutedMessaging.IInteractionNode,System.Object,System.Object@)">
            <summary>
            Determines if the key is a special value.
            </summary>
            <param name="possibleKey">The possible key.</param>
            <param name="sourceNode">The source node.</param>
            <param name="context">The context.</param>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:Caliburn.PresentationFramework.RoutedMessaging.DefaultMessageBinder.ResolveSpecialValue(System.String,Caliburn.PresentationFramework.RoutedMessaging.IInteractionNode,System.Object)">
            <summary>
            Resolves the special value.
            </summary>
            <param name="potential">The possible special value.</param>
            <param name="sourceNode">The source node.</param>
            <param name="context">The context.</param>
            <returns></returns>
        </member>
        <member name="M:Caliburn.PresentationFramework.RoutedMessaging.DefaultMessageBinder.CoerceParameter(Caliburn.PresentationFramework.RoutedMessaging.RequiredParameter,System.Object)">
            <summary>
            Coerces the parameter.
            </summary>
            <param name="parameter">The required parameter.</param>
            <param name="providedValue">The provided value.</param>
            <returns></returns>
        </member>
        <member name="M:Caliburn.PresentationFramework.RoutedMessaging.DefaultMessageBinder.CoerceValueCore(System.Type,System.Object)">
            <summary>
            Coerces the provided value to the destination type.
            </summary>
            <param name="destinationType">The destination type.</param>
            <param name="providedValue">The provided value.</param>
            <returns>The coerced value.</returns>
        </member>
        <member name="M:Caliburn.PresentationFramework.RoutedMessaging.DefaultMessageBinder.GetDefaultValue(System.Type)">
            <summary>
            Gets the default value for a type.
            </summary>
            <param name="type">The type.</param>
            <returns>The default value.</returns>
        </member>
        <member name="M:Caliburn.PresentationFramework.RoutedMessaging.DefaultMessageBinder.InitializeDefaultValueHandlers">
            <summary>
            Creates the default value handlers.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Caliburn.PresentationFramework.RoutedMessaging.DefaultMessageBinder.CreateGetter(System.Object,System.String[])">
            <summary>
            Finds the property setter.
            </summary>
            <param name="target">The target.</param>
            <param name="propertyPath">The property path.</param>
            <returns></returns>
        </member>
        <member name="T:Caliburn.PresentationFramework.RoutedMessaging.IResult">
            <summary>
            Allows custom code to execute after the return of an action.
            </summary>
        </member>
        <member name="M:Caliburn.PresentationFramework.RoutedMessaging.IResult.Execute(Caliburn.PresentationFramework.RoutedMessaging.ResultExecutionContext)">
            <summary>
            Executes the result using the specified context.
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="E:Caliburn.PresentationFramework.RoutedMessaging.IResult.Completed">
            <summary>
            Occurs when execution has completed.
            </summary>
        </member>
        <member name="T:Caliburn.PresentationFramework.RoutedMessaging.DefaultResult">
            <summary>
            The default behavior for handling return values of bound methods.
            </summary>
        </member>
        <member name="M:Caliburn.PresentationFramework.RoutedMessaging.DefaultResult.#ctor(Caliburn.PresentationFramework.Conventions.IConventionManager,Caliburn.PresentationFramework.RoutedMessaging.MessageProcessingOutcome)">
            <summary>
            Initializes a new instance of the <see cref="T:Caliburn.PresentationFramework.RoutedMessaging.DefaultResult"/> class.
            </summary>
            <param name="conventionManager">The convention manager.</param>
            <param name="outcome">The outcome of processing the message.</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.RoutedMessaging.DefaultResult.Execute(Caliburn.PresentationFramework.RoutedMessaging.ResultExecutionContext)">
            <summary>
            Executes the result within the specified context.
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.RoutedMessaging.DefaultResult.CreateSetter(System.Object,System.String[])">
            <summary>
            Finds the property setter.
            </summary>
            <param name="target">The target.</param>
            <param name="propertyPath">The property path.</param>
            <returns></returns>
        </member>
        <member name="E:Caliburn.PresentationFramework.RoutedMessaging.DefaultResult.Completed">
            <summary>
            Occurs when execution has completed.
            </summary>
        </member>
        <member name="T:Caliburn.PresentationFramework.RoutedMessaging.DefaultRoutedMessageController">
            <summary>
            An implementation of <see cref="T:Caliburn.PresentationFramework.RoutedMessaging.IRoutedMessageController"/>.
            </summary>
        </member>
        <member name="T:Caliburn.PresentationFramework.RoutedMessaging.IRoutedMessageController">
            <summary>
            A service that manages all aspects of Caliburn's routed message mechanism.
            </summary>
        </member>
        <member name="M:Caliburn.PresentationFramework.RoutedMessaging.IRoutedMessageController.AddHandler(System.Windows.DependencyObject,Caliburn.PresentationFramework.RoutedMessaging.IRoutedMessageHandler,System.Boolean)">
            <summary>
            Adds a message handler at the specified location in the UI hierarchy.
            </summary>
            <param name="uiElement">The UI element.</param>
            <param name="handler">The message handler.</param>
            <param name="setContext">if set to <c>true</c> the handler will also be stored in the element's DataContext.</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.RoutedMessaging.IRoutedMessageController.AttachTrigger(System.Windows.DependencyObject,Caliburn.PresentationFramework.RoutedMessaging.IMessageTrigger)">
            <summary>
            Attaches the trigger to the UI and prepares it to send messages.
            </summary>
            <param name="uiElement">The UI element.</param>
            <param name="trigger">The trigger.</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.RoutedMessaging.IRoutedMessageController.GetParent(System.Windows.DependencyObject)">
            <summary>
            Gets the parent.
            </summary>
            <param name="uiElement">The UI element to retrieve the parent for.</param>
            <returns></returns>
        </member>
        <member name="F:Caliburn.PresentationFramework.RoutedMessaging.DefaultRoutedMessageController.NodeProperty">
            <summary>
            Used to maintain the state of the interaction hierarchy.
            </summary>
        </member>
        <member name="M:Caliburn.PresentationFramework.RoutedMessaging.DefaultRoutedMessageController.AddHandler(System.Windows.DependencyObject,Caliburn.PresentationFramework.RoutedMessaging.IRoutedMessageHandler,System.Boolean)">
            <summary>
            Adds a message handler at the specified location in the UI hierarchy.
            </summary>
            <param name="uiElement">The UI element.</param>
            <param name="handler">The message handler.</param>
            <param name="setContext">if set to <c>true</c> the handler will also be stored in the element's DataContext and ViewMetadata will be set.</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.RoutedMessaging.DefaultRoutedMessageController.AttachTrigger(System.Windows.DependencyObject,Caliburn.PresentationFramework.RoutedMessaging.IMessageTrigger)">
            <summary>
            Attaches the trigger and prepares it to send actions.
            </summary>
            <param name="uiElement">The UI element.</param>
            <param name="trigger">The trigger.</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.RoutedMessaging.DefaultRoutedMessageController.GetParent(System.Windows.DependencyObject)">
            <summary>
            Gets the parent.
            </summary>
            <param name="uiElement">The UI element to retrieve the parent for.</param>
            <returns></returns>
        </member>
        <member name="T:Caliburn.PresentationFramework.RoutedMessaging.EnumerableResults">
            <summary>
            Hosts extension methods and method overrides for execution of <see cref="T:Caliburn.PresentationFramework.RoutedMessaging.IResult"/> and <see cref="T:System.Collections.Generic.IEnumerable`1"/>
            </summary>
        </member>
        <member name="M:Caliburn.PresentationFramework.RoutedMessaging.EnumerableResults.Initialize(Microsoft.Practices.ServiceLocation.IServiceLocator)">
            <summary>
            Initializes the helper with the service locator.
            </summary>
            <param name="serviceLocator">The service locator.</param>
        </member>
        <member name="F:Caliburn.PresentationFramework.RoutedMessaging.EnumerableResults.ExecuteEnumerableResultCore">
            <summary>
            Executes an <see cref="T:System.Collections.Generic.IEnumerable`1"/>, optionally looking up the <see cref="T:Caliburn.PresentationFramework.RoutedMessaging.IInteractionNode"/>.
            </summary>
        </member>
        <member name="F:Caliburn.PresentationFramework.RoutedMessaging.EnumerableResults.ExecuteResultCore">
            <summary>
            Executes an <see cref="T:Caliburn.PresentationFramework.RoutedMessaging.IResult"/>, optionally looking up the <see cref="T:Caliburn.PresentationFramework.RoutedMessaging.IInteractionNode"/>.
            </summary>
        </member>
        <member name="F:Caliburn.PresentationFramework.RoutedMessaging.EnumerableResults.GetInteractionNodeFromView">
            <summary>
            Get the <see cref="T:Caliburn.PresentationFramework.RoutedMessaging.IInteractionNode"/> associated with the view.
            </summary>
        </member>
        <member name="F:Caliburn.PresentationFramework.RoutedMessaging.EnumerableResults.GetViewInstanceFromModel">
            <summary>
            Gets the view instance associated with the model.
            </summary>
        </member>
        <member name="M:Caliburn.PresentationFramework.RoutedMessaging.EnumerableResults.Execute(Caliburn.PresentationFramework.RoutedMessaging.IResult)">
            <summary>
            Executes the specified result.
            </summary>
            <param name="result">The result.</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.RoutedMessaging.EnumerableResults.Execute(System.Collections.Generic.IEnumerable{Caliburn.PresentationFramework.RoutedMessaging.IResult})">
            <summary>
            Executes the specified results.
            </summary>
            <param name="results">The results.</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.RoutedMessaging.EnumerableResults.Execute(System.Collections.Generic.IEnumerable{Caliburn.PresentationFramework.RoutedMessaging.IResult},System.EventHandler{Caliburn.PresentationFramework.RoutedMessaging.ResultCompletionEventArgs})">
            <summary>
            Executes the specified results.
            </summary>
            <param name="results">The results.</param>
            <param name="callback">Called when enumeration completes.</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.RoutedMessaging.EnumerableResults.ExecuteFor(Caliburn.PresentationFramework.RoutedMessaging.IResult,System.Object)">
            <summary>
            Executes the result for the model.
            </summary>
            <param name="result">The result.</param>
            <param name="model">The model.</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.RoutedMessaging.EnumerableResults.ExecuteFor(Caliburn.PresentationFramework.RoutedMessaging.IResult,System.Object,System.Object)">
            <summary>
            Executes the result for the model within the given context.
            </summary>
            <param name="result">The result.</param>
            <param name="model">The model.</param>
            <param name="context">The context.</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.RoutedMessaging.EnumerableResults.ExecuteFor(System.Collections.Generic.IEnumerable{Caliburn.PresentationFramework.RoutedMessaging.IResult},System.Object)">
            <summary>
            Executes the results for the model.
            </summary>
            <param name="results">The results.</param>
            <param name="model">The model.</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.RoutedMessaging.EnumerableResults.ExecuteFor(System.Collections.Generic.IEnumerable{Caliburn.PresentationFramework.RoutedMessaging.IResult},System.Object,System.EventHandler{Caliburn.PresentationFramework.RoutedMessaging.ResultCompletionEventArgs})">
            <summary>
            Executes the results for the model.
            </summary>
            <param name="results">The results.</param>
            <param name="model">The model.</param>
            <param name="callback">Called when enumeration completes.</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.RoutedMessaging.EnumerableResults.ExecuteFor(System.Collections.Generic.IEnumerable{Caliburn.PresentationFramework.RoutedMessaging.IResult},System.Object,System.Object)">
            <summary>
            Executes the results for the model within the given context.
            </summary>
            <param name="results">The results.</param>
            <param name="model">The model.</param>
            <param name="context">The context.</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.RoutedMessaging.EnumerableResults.ExecuteFor(System.Collections.Generic.IEnumerable{Caliburn.PresentationFramework.RoutedMessaging.IResult},System.Object,System.Object,System.EventHandler{Caliburn.PresentationFramework.RoutedMessaging.ResultCompletionEventArgs})">
            <summary>
            Executes the results for the model within the given context.
            </summary>
            <param name="results">The results.</param>
            <param name="model">The model.</param>
            <param name="context">The context.</param>
            <param name="callback">Called when enumeration completes.</param>
        </member>
        <member name="T:Caliburn.PresentationFramework.RoutedMessaging.IInteractionNode">
            <summary>
            Represents a node within the interaction hierarchy.
            </summary>
        </member>
        <member name="M:Caliburn.PresentationFramework.RoutedMessaging.IInteractionNode.FindParent">
            <summary>
            Finds the parent of this node.
            </summary>
            <returns>The parent or null if not found.</returns>
        </member>
        <member name="M:Caliburn.PresentationFramework.RoutedMessaging.IInteractionNode.Handles(Caliburn.PresentationFramework.RoutedMessaging.IRoutedMessage)">
            <summary>
            Determines whether this node can handle the specified message.
            </summary>
            <param name="message">The message.</param>
            <returns></returns>
        </member>
        <member name="M:Caliburn.PresentationFramework.RoutedMessaging.IInteractionNode.ProcessMessage(Caliburn.PresentationFramework.RoutedMessaging.IRoutedMessage,System.Object)">
            <summary>
            Processes the message.
            </summary>
            <param name="message">The message.</param>
            <param name="context">An object that provides additional context for message processing.</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.RoutedMessaging.IInteractionNode.UpdateAvailability(Caliburn.PresentationFramework.RoutedMessaging.IMessageTrigger)">
            <summary>
            Updates the availability of the trigger.
            </summary>
            <param name="trigger">The trigger.</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.RoutedMessaging.IInteractionNode.RegisterHandler(Caliburn.PresentationFramework.RoutedMessaging.IRoutedMessageHandler)">
            <summary>
            Sets the message handler for this node.
            </summary>
            <param name="messageHandler">The message handler.</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.RoutedMessaging.IInteractionNode.AddTrigger(Caliburn.PresentationFramework.RoutedMessaging.IMessageTrigger)">
            <summary>
            Adds the trigger.
            </summary>
            <param name="trigger">The trigger.</param>
        </member>
        <member name="P:Caliburn.PresentationFramework.RoutedMessaging.IInteractionNode.MessageHandler">
            <summary>
            Gets the message target.
            </summary>
            <value>The action target.</value>
        </member>
        <member name="P:Caliburn.PresentationFramework.RoutedMessaging.IInteractionNode.Triggers">
            <summary>
            Gets the triggers.
            </summary>
            <value>The triggers.</value>
        </member>
        <member name="P:Caliburn.PresentationFramework.RoutedMessaging.IInteractionNode.UIElement">
            <summary>
            Gets the UI element.
            </summary>
            <value>The UI element.</value>
        </member>
        <member name="T:Caliburn.PresentationFramework.RoutedMessaging.InteractionNode">
            <summary>
            Represents a node within the interaction hierarchy.
            </summary>
        </member>
        <member name="M:Caliburn.PresentationFramework.RoutedMessaging.InteractionNode.#ctor(System.Windows.DependencyObject,Caliburn.PresentationFramework.RoutedMessaging.IRoutedMessageController)">
            <summary>
            Initializes a new instance of the <see cref="T:Caliburn.PresentationFramework.RoutedMessaging.InteractionNode"/> class.
            </summary>
            <param name="uiElement">The UI element.</param>
            <param name="controller">The routed message controller.</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.RoutedMessaging.InteractionNode.FindParent">
            <summary>
            Finds the parent of this node.
            </summary>
            <returns>The parent or null if not found.</returns>
        </member>
        <member name="M:Caliburn.PresentationFramework.RoutedMessaging.InteractionNode.Handles(Caliburn.PresentationFramework.RoutedMessaging.IRoutedMessage)">
            <summary>
            Determines whether this node can handle the specified message.
            </summary>
            <param name="message">The message.</param>
            <returns></returns>
        </member>
        <member name="M:Caliburn.PresentationFramework.RoutedMessaging.InteractionNode.ProcessMessage(Caliburn.PresentationFramework.RoutedMessaging.IRoutedMessage,System.Object)">
            <summary>
            Processes the message.
            </summary>
            <param name="message">The message.</param>
            <param name="context">An object that provides additional context for message processing.</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.RoutedMessaging.InteractionNode.UpdateAvailability(Caliburn.PresentationFramework.RoutedMessaging.IMessageTrigger)">
            <summary>
            Updates the availability of the trigger.
            </summary>
            <param name="trigger">The trigger.</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.RoutedMessaging.InteractionNode.RegisterHandler(Caliburn.PresentationFramework.RoutedMessaging.IRoutedMessageHandler)">
            <summary>
            Sets the message handler for this node.
            </summary>
            <param name="messageHandler">The message handler.</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.RoutedMessaging.InteractionNode.AddTrigger(Caliburn.PresentationFramework.RoutedMessaging.IMessageTrigger)">
            <summary>
            Adds the trigger.
            </summary>
            <param name="trigger">The trigger.</param>
        </member>
        <member name="P:Caliburn.PresentationFramework.RoutedMessaging.InteractionNode.MessageHandler">
            <summary>
            Gets the action target.
            </summary>
            <value>The action target.</value>
        </member>
        <member name="P:Caliburn.PresentationFramework.RoutedMessaging.InteractionNode.Triggers">
            <summary>
            Gets the triggers.
            </summary>
            <value>The triggers.</value>
        </member>
        <member name="P:Caliburn.PresentationFramework.RoutedMessaging.InteractionNode.UIElement">
            <summary>
            Gets the UI element.
            </summary>
            <value>The UI element.</value>
        </member>
        <member name="T:Caliburn.PresentationFramework.RoutedMessaging.Message">
            <summary>
            Hosts attached properties related to routed UI messaging.
            </summary>
        </member>
        <member name="F:Caliburn.PresentationFramework.RoutedMessaging.Message.TriggersProperty">
            <summary>
            A property definition representing a collection of triggers.
            </summary>
        </member>
        <member name="F:Caliburn.PresentationFramework.RoutedMessaging.Message.AttachProperty">
            <summary>
            A property definition representing attached triggers and messages.
            </summary>
        </member>
        <member name="F:Caliburn.PresentationFramework.RoutedMessaging.Message.AvailabilityEffectProperty">
            <summary>
            A property representing the availability effect of a given message.
            </summary>
        </member>
        <member name="M:Caliburn.PresentationFramework.RoutedMessaging.Message.Initialize(Caliburn.PresentationFramework.RoutedMessaging.IRoutedMessageController,Caliburn.PresentationFramework.RoutedMessaging.Parsers.IParser)">
            <summary>
            Initializes the message property host.
            </summary>
            <param name="controller">The controller.</param>
            <param name="parser">The parser.</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.RoutedMessaging.Message.SetTriggers(System.Windows.DependencyObject,Caliburn.PresentationFramework.RoutedMessaging.RoutedMessageTriggerCollection)">
            <summary>
            Sets the triggers.
            </summary>
            <param name="d">The d.</param>
            <param name="triggers">The triggers.</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.RoutedMessaging.Message.GetTriggers(System.Windows.DependencyObject)">
            <summary>
            Gets the triggers.
            </summary>
            <param name="d">The d.</param>
            <returns></returns>
        </member>
        <member name="M:Caliburn.PresentationFramework.RoutedMessaging.Message.SetAttach(System.Windows.DependencyObject,System.String)">
            <summary>
            Sets the attached triggers and messages.
            </summary>
            <param name="d">The element to attach to.</param>
            <param name="attachText">The parsable attachment text.</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.RoutedMessaging.Message.GetAttach(System.Windows.DependencyObject)">
            <summary>
            Gets the attached triggers and messages.
            </summary>
            <param name="d">The element that was attached to.</param>
            <returns>The parsable attachment text.</returns>
        </member>
        <member name="M:Caliburn.PresentationFramework.RoutedMessaging.Message.SetAvailabilityEffect(System.Windows.DependencyObject,Caliburn.PresentationFramework.RoutedMessaging.IAvailabilityEffect)">
            <summary>
            Sets the availability effect.
            </summary>
            <param name="d">The d.</param>
            <param name="effect">The effect.</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.RoutedMessaging.Message.GetAvailabilityEffect(System.Windows.DependencyObject)">
            <summary>
            Gets the availability effect.
            </summary>
            <param name="d">The d.</param>
            <returns></returns>
        </member>
        <member name="T:Caliburn.PresentationFramework.RoutedMessaging.MessageProcessingOutcome">
            <summary>
            The outcome of processing a message.
            </summary>
        </member>
        <member name="M:Caliburn.PresentationFramework.RoutedMessaging.MessageProcessingOutcome.#ctor(System.Object,System.Type,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Caliburn.PresentationFramework.RoutedMessaging.MessageProcessingOutcome"/> class.
            </summary>
            <param name="result">The result.</param>
            <param name="resultType">Type of the result.</param>
            <param name="wasCancelled">if set to <c>true</c> [was cancelled].</param>
        </member>
        <member name="P:Caliburn.PresentationFramework.RoutedMessaging.MessageProcessingOutcome.WasCancelled">
            <summary>
            Gets or sets a value indicating whether message processing was cancelled.
            </summary>
            <value><c>true</c> if cancelled; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Caliburn.PresentationFramework.RoutedMessaging.MessageProcessingOutcome.ResultType">
            <summary>
            Gets or sets the type of the result.
            </summary>
            <value>The type of the result.</value>
        </member>
        <member name="P:Caliburn.PresentationFramework.RoutedMessaging.MessageProcessingOutcome.Result">
            <summary>
            Gets or sets the result.
            </summary>
            <value>The result.</value>
        </member>
        <member name="T:Caliburn.PresentationFramework.RoutedMessaging.MessagingExtensions">
            <summary>
            Extensions related to routed UI messaging.
            </summary>
        </member>
        <member name="M:Caliburn.PresentationFramework.RoutedMessaging.MessagingExtensions.Bind(Caliburn.PresentationFramework.RoutedMessaging.Parameter,System.Windows.DependencyObject,System.String,System.String)">
            <summary>
            Binds the specified parameter to an element's property without using databinding.
            Rather, event name conventions are used to wire to property changes and push updates to the parameter value.
            </summary>
            <param name="parameter">The parameter.</param>
            <param name="element">The element.</param>
            <param name="elementName">Name of the element.</param>
            <param name="path">The path.</param>
        </member>
        <member name="T:Caliburn.PresentationFramework.RoutedMessaging.Parameter">
            <summary>
            Represents a parameter of a message.
            </summary>
        </member>
        <member name="F:Caliburn.PresentationFramework.RoutedMessaging.Parameter.ValueProperty">
            <summary>
            A dependency property representing the parameter's value.
            </summary>
        </member>
        <member name="M:Caliburn.PresentationFramework.RoutedMessaging.Parameter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Caliburn.PresentationFramework.RoutedMessaging.Parameter"/> class.
            </summary>
        </member>
        <member name="M:Caliburn.PresentationFramework.RoutedMessaging.Parameter.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Caliburn.PresentationFramework.RoutedMessaging.Parameter"/> class.
            </summary>
            <param name="value">The value of the parameter.</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.RoutedMessaging.Parameter.CreateInstanceCore">
            <summary>
            When implemented in a derived class, creates a new instance of the <see cref="T:System.Windows.Freezable"/> derived class.
            </summary>
            <returns>The new instance.</returns>
        </member>
        <member name="M:Caliburn.PresentationFramework.RoutedMessaging.Parameter.Wire(System.Object,System.Reflection.EventInfo,System.Func{System.Object})">
            <summary>
            Wires the parameter for value updates.
            </summary>
            <param name="source">The source.</param>
            <param name="eventInfo">The event info.</param>
            <param name="updater">The updater.</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.RoutedMessaging.Parameter.OnUpdate(System.Object,System.EventArgs)">
            <summary>
            Called when the parameter value needs to update.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="P:Caliburn.PresentationFramework.RoutedMessaging.Parameter.Value">
            <summary>
            Gets or sets the value of the parameter.
            </summary>
            <value>The value.</value>
        </member>
        <member name="E:Caliburn.PresentationFramework.RoutedMessaging.Parameter.ValueChanged">
            <summary>
            Occurs when [value changed].
            </summary>
        </member>
        <member name="T:Caliburn.PresentationFramework.RoutedMessaging.RequiredParameter">
            <summary>
            Represents a parameter that is required for message binding.
            </summary>
        </member>
        <member name="M:Caliburn.PresentationFramework.RoutedMessaging.RequiredParameter.#ctor(System.String,System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Caliburn.PresentationFramework.RoutedMessaging.RequiredParameter"/> class.
            </summary>
            <param name="name">The name.</param>
            <param name="type">The type.</param>
        </member>
        <member name="P:Caliburn.PresentationFramework.RoutedMessaging.RequiredParameter.Name">
            <summary>
            Gets or sets the name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:Caliburn.PresentationFramework.RoutedMessaging.RequiredParameter.Type">
            <summary>
            Gets or sets the type.
            </summary>
            <value>The type.</value>
        </member>
        <member name="T:Caliburn.PresentationFramework.RoutedMessaging.ResultCompletionEventArgs">
            <summary>
            The event args for the Completed event of an <see cref="T:Caliburn.PresentationFramework.RoutedMessaging.IResult"/>.
            </summary>
        </member>
        <member name="P:Caliburn.PresentationFramework.RoutedMessaging.ResultCompletionEventArgs.Error">
            <summary>
            Gets or sets the error if one occurred.
            </summary>
            <value>The error.</value>
        </member>
        <member name="P:Caliburn.PresentationFramework.RoutedMessaging.ResultCompletionEventArgs.WasCancelled">
            <summary>
            Gets or sets a value indicating whether the result was cancelled.
            </summary>
            <value><c>true</c> if cancelled; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:Caliburn.PresentationFramework.RoutedMessaging.ResultExecutionContext">
            <summary>
            The context in which an <see cref="T:Caliburn.PresentationFramework.RoutedMessaging.IResult"/> executes.
            </summary>
        </member>
        <member name="M:Caliburn.PresentationFramework.RoutedMessaging.ResultExecutionContext.#ctor(Microsoft.Practices.ServiceLocation.IServiceLocator,Caliburn.PresentationFramework.RoutedMessaging.IRoutedMessageWithOutcome,Caliburn.PresentationFramework.RoutedMessaging.IInteractionNode)">
            <summary>
            Initializes a new instance of the <see cref="T:Caliburn.PresentationFramework.RoutedMessaging.ResultExecutionContext"/> class.
            </summary>
            <param name="serviceLocator">The service locator.</param>
            <param name="message">The message.</param>
            <param name="handlingNode">The handling node.</param>
        </member>
        <member name="P:Caliburn.PresentationFramework.RoutedMessaging.ResultExecutionContext.Message">
            <summary>
            Gets the message.
            </summary>
            <value>The message.</value>
        </member>
        <member name="P:Caliburn.PresentationFramework.RoutedMessaging.ResultExecutionContext.HandlingNode">
            <summary>
            Gets the handling node.
            </summary>
            <value>The handling node.</value>
        </member>
        <member name="P:Caliburn.PresentationFramework.RoutedMessaging.ResultExecutionContext.ServiceLocator">
            <summary>
            Gets the service locator.
            </summary>
            <value>The service locator.</value>
        </member>
        <member name="T:Caliburn.PresentationFramework.RoutedMessaging.RoutedMessageTriggerCollection">
            <summary>
            A collection of triggers for routing messages through the UI.
            </summary>
        </member>
        <member name="M:Caliburn.PresentationFramework.RoutedMessaging.RoutedMessageTriggerCollection.CreateInstanceCore">
            <summary>
            Creates a new instance of the <see cref="T:System.Windows.FreezableCollection`1"/>.
            </summary>
            <returns>The new instance.</returns>
        </member>
        <member name="T:Caliburn.PresentationFramework.RoutedMessaging.SequentialResult">
            <summary>
            An implementation of <see cref="T:Caliburn.PresentationFramework.RoutedMessaging.IResult"/> that enables sequential execution of multiple results.
            </summary>
        </member>
        <member name="M:Caliburn.PresentationFramework.RoutedMessaging.SequentialResult.#ctor(System.Collections.Generic.IEnumerable{Caliburn.PresentationFramework.RoutedMessaging.IResult})">
            <summary>
            Initializes a new instance of the <see cref="T:Caliburn.PresentationFramework.RoutedMessaging.SequentialResult"/> class.
            </summary>
            <param name="children">The children.</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.RoutedMessaging.SequentialResult.Execute(Caliburn.PresentationFramework.RoutedMessaging.ResultExecutionContext)">
            <summary>
            Executes the result using the specified context.
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="E:Caliburn.PresentationFramework.RoutedMessaging.SequentialResult.Completed">
            <summary>
            Occurs when execution has completed.
            </summary>
        </member>
        <member name="T:Caliburn.PresentationFramework.Screens.ActivationProcessedEventArgs">
            <summary>
            Contains details about the success or failure of an items activation through an <see cref="T:Caliburn.PresentationFramework.Screens.IConductor"/>.
            </summary>
        </member>
        <member name="F:Caliburn.PresentationFramework.Screens.ActivationProcessedEventArgs.Item">
            <summary>
            The item whose activation was processed.
            </summary>
        </member>
        <member name="F:Caliburn.PresentationFramework.Screens.ActivationProcessedEventArgs.Success">
            <summary>
            Gets or sets a value indicating whether the activation was a success.
            </summary>
            <value><c>true</c> if success; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:Caliburn.PresentationFramework.Screens.Conductor`1">
            <summary>
            An implementation of <see cref="T:Caliburn.PresentationFramework.Screens.IConductor"/> that holds on to and activates only one item at a time.
            </summary>
        </member>
        <member name="T:Caliburn.PresentationFramework.Screens.ConductorBase`1">
            <summary>
            A base class for various implementations of <see cref="T:Caliburn.PresentationFramework.Screens.IConductor"/>.
            </summary>
            <typeparam name="T">The type that is being conducted.</typeparam>
        </member>
        <member name="T:Caliburn.PresentationFramework.Screens.Screen">
            <summary>
            A base implementation of <see cref="T:Caliburn.PresentationFramework.Screens.IScreen"/>.
            </summary>
        </member>
        <member name="T:Caliburn.PresentationFramework.Screens.IScreen">
            <summary>
            Denotes an instance which implements <see cref="T:Caliburn.PresentationFramework.Screens.IHaveDisplayName"/>, <see cref="T:Caliburn.PresentationFramework.Screens.IActivate"/>, <see cref="T:Caliburn.PresentationFramework.Screens.IDeactivate"/>, <see cref="T:Caliburn.PresentationFramework.Screens.IGuardClose"/> and <see cref="T:Caliburn.PresentationFramework.INotifyPropertyChangedEx"/>
            </summary>
        </member>
        <member name="T:Caliburn.PresentationFramework.Screens.IActivate">
            <summary>
            Denotes an instance which requireds activation.
            </summary>
        </member>
        <member name="M:Caliburn.PresentationFramework.Screens.IActivate.Activate">
            <summary>
            Activates this instance.
            </summary>
        </member>
        <member name="P:Caliburn.PresentationFramework.Screens.IActivate.IsActive">
            <summary>
             Indicates whether or not this instace is active.
            </summary>
        </member>
        <member name="E:Caliburn.PresentationFramework.Screens.IActivate.Activated">
            <summary>
            Raised after activation occurs.
            </summary>
        </member>
        <member name="T:Caliburn.PresentationFramework.Screens.IDeactivate">
            <summary>
            Denotes an instance which requires deactivation.
            </summary>
        </member>
        <member name="M:Caliburn.PresentationFramework.Screens.IDeactivate.Deactivate(System.Boolean)">
            <summary>
            Deactivates this instance.
            </summary>
            <param name="close">Inidcates whether or not this instance is being closed.</param>
        </member>
        <member name="E:Caliburn.PresentationFramework.Screens.IDeactivate.AttemptingDeactivation">
            <summary>
            Raised before deactivation.
            </summary>
        </member>
        <member name="E:Caliburn.PresentationFramework.Screens.IDeactivate.Deactivated">
            <summary>
            Raised after deactivation.
            </summary>
        </member>
        <member name="T:Caliburn.PresentationFramework.Screens.IGuardClose">
            <summary>
            Denotes an instance which may prevent closing.
            </summary>
        </member>
        <member name="M:Caliburn.PresentationFramework.Screens.IGuardClose.CanClose(System.Action{System.Boolean})">
            <summary>
            Called to check whether or not this instance can close.
            </summary>
            <param name="callback">The implementor calls this action with the result of the close check.</param>
        </member>
        <member name="T:Caliburn.PresentationFramework.Screens.IChild`1">
            <summary>
            Denotes a node within a parent/child hierarchy.
            </summary>
            <typeparam name="TParent">The type of parent.</typeparam>
        </member>
        <member name="P:Caliburn.PresentationFramework.Screens.IChild`1.Parent">
            <summary>
            Gets or Sets the Parent
            </summary>
        </member>
        <member name="T:Caliburn.PresentationFramework.Views.IViewAware">
            <summary>
            Indicates that a model should be made aware of its view.
            </summary>
        </member>
        <member name="M:Caliburn.PresentationFramework.Views.IViewAware.AttachView(System.Object,System.Object)">
            <summary>
            Attaches a view to this instance.
            </summary>
            <param name="view">The view.</param>
            <param name="context">The context.</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.Views.IViewAware.GetView(System.Object)">
            <summary>
            Gets the view.
            </summary>
            <param name="context">The context.</param>
            <returns>The view</returns>
        </member>
        <member name="E:Caliburn.PresentationFramework.Views.IViewAware.ViewAttached">
            <summary>
            Raised when a view is attached.
            </summary>
        </member>
        <member name="M:Caliburn.PresentationFramework.Screens.Screen.#ctor">
            <summary>
            Creates an instance of the screen.
            </summary>
        </member>
        <member name="M:Caliburn.PresentationFramework.Screens.Screen.OnInitialize">
            <summary>
            Called when initializing.
            </summary>
        </member>
        <member name="M:Caliburn.PresentationFramework.Screens.Screen.OnActivate">
            <summary>
            Called when activating.
            </summary>
        </member>
        <member name="M:Caliburn.PresentationFramework.Screens.Screen.OnDeactivate(System.Boolean)">
            <summary>
            Called when deactivating.
            </summary>
            <param name="close">Inidicates whether this instance will be closed.</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.Screens.Screen.CanClose(System.Action{System.Boolean})">
            <summary>
            Called to check whether or not this instance can close.
            </summary>
            <param name="callback">The implementor calls this action with the result of the close check.</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.Screens.Screen.AttachView(System.Object,System.Object)">
            <summary>
            Attaches a view to this instance.
            </summary>
            <param name="view">The view.</param>
            <param name="context">The context in which the view appears.</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.Screens.Screen.OnViewLoaded(System.Object)">
            <summary>
            Called when an attached view's Loaded event fires.
            </summary>
            <param name="view"></param>
        </member>
        <member name="M:Caliburn.PresentationFramework.Screens.Screen.GetView(System.Object)">
            <summary>
            Gets a view previously attached to this instance.
            </summary>
            <param name="context">The context denoting which view to retrieve.</param>
            <returns>The view.</returns>
        </member>
        <member name="M:Caliburn.PresentationFramework.Screens.Screen.TryClose">
            <summary>
            Tries to close this instance by asking its Parent to initiate shutdown or by asking it's corresponding default view to close.
            </summary>
        </member>
        <member name="M:Caliburn.PresentationFramework.Screens.Screen.TryClose(System.Nullable{System.Boolean})">
            <summary>
            Closes this instance by asking its Parent to initiate shutdown or by asking it's corresponding default view to close.
            This overload also provides an opportunity to pass a dialog result to it's corresponding default view.
            </summary>
            <param name="dialogResult">The dialog result.</param>
        </member>
        <member name="P:Caliburn.PresentationFramework.Screens.Screen.Parent">
            <summary>
            Gets or Sets the Parent <see cref="T:Caliburn.PresentationFramework.Screens.IConductor"/>
            </summary>
        </member>
        <member name="P:Caliburn.PresentationFramework.Screens.Screen.DisplayName">
            <summary>
            Gets or Sets the Display Name
            </summary>
        </member>
        <member name="P:Caliburn.PresentationFramework.Screens.Screen.IsActive">
            <summary>
            Indicates whether or not this instance is currently active.
            </summary>
        </member>
        <member name="P:Caliburn.PresentationFramework.Screens.Screen.IsInitialized">
            <summary>
            Indicates whether or not this instance is currently initialized.
            </summary>
        </member>
        <member name="E:Caliburn.PresentationFramework.Screens.Screen.Activated">
            <summary>
            Raised after activation occurs.
            </summary>
        </member>
        <member name="E:Caliburn.PresentationFramework.Screens.Screen.AttemptingDeactivation">
            <summary>
            Raised after deactivation.
            </summary>
        </member>
        <member name="E:Caliburn.PresentationFramework.Screens.Screen.Deactivated">
            <summary>
            Raised after deactivation.
            </summary>
        </member>
        <member name="E:Caliburn.PresentationFramework.Screens.Screen.ViewAttached">
            <summary>
            Raised when a view is attached.
            </summary>
        </member>
        <member name="T:Caliburn.PresentationFramework.Screens.IConductor">
            <summary>
            Denotes an instance which conducts other objects by managing an ActiveItem and maintaining a strict lifecycle.
            </summary>
            <remarks>Conducted instances can optin to the lifecycle by impelenting any of the follosing <see cref="T:Caliburn.PresentationFramework.Screens.IActivate"/>, <see cref="T:Caliburn.PresentationFramework.Screens.IDeactivate"/>, <see cref="T:Caliburn.PresentationFramework.Screens.IGuardClose"/>.</remarks>
        </member>
        <member name="M:Caliburn.PresentationFramework.Screens.IConductor.GetConductedItems">
            <summary>
            Gets all the items that are being conducted.
            </summary>
        </member>
        <member name="M:Caliburn.PresentationFramework.Screens.IConductor.ActivateItem(System.Object)">
            <summary>
            Activates the specified item.
            </summary>
            <param name="item">The item to activate.</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.Screens.IConductor.CloseItem(System.Object)">
            <summary>
            Closes the specified item.
            </summary>
            <param name="item">The item to close.</param>
        </member>
        <member name="P:Caliburn.PresentationFramework.Screens.IConductor.ActiveItem">
            <summary>
            The currently active item.
            </summary>
        </member>
        <member name="E:Caliburn.PresentationFramework.Screens.IConductor.ActivationProcessed">
            <summary>
            Occurs when an activation request is processed.
            </summary>
        </member>
        <member name="M:Caliburn.PresentationFramework.Screens.ConductorBase`1.GetConductedItems">
            <summary>
            Gets all the items currently being conducted.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Caliburn.PresentationFramework.Screens.ConductorBase`1.ActivateItem(`0)">
            <summary>
            Activates the specified item.
            </summary>
            <param name="item">The item to activate.</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.Screens.ConductorBase`1.CloseItem(`0)">
            <summary>
            Closes the specified item.
            </summary>
            <param name="item">The item to close.</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.Screens.ConductorBase`1.OnActivationProcessed(`0,System.Boolean)">
            <summary>
            Called by a subclass when an activation needs processing.
            </summary>
            <param name="item">The item on which activation was attempted.</param>
            <param name="success">if set to <c>true</c> activation was successful.</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.Screens.ConductorBase`1.ChangeActiveItem(`0,System.Boolean)">
            <summary>
            Changes the active item.
            </summary>
            <param name="newItem">The new item to activate.</param>
            <param name="closePrevious">Indicates whether or not to close the previous active item.</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.Screens.ConductorBase`1.EnsureItem(`0)">
            <summary>
            Ensures that an item is ready to be activated.
            </summary>
            <param name="newItem"></param>
            <returns>The item to be activated.</returns>
        </member>
        <member name="P:Caliburn.PresentationFramework.Screens.ConductorBase`1.CloseStrategy">
            <summary>
            Gets or sets the close strategy.
            </summary>
            <value>The close strategy.</value>
        </member>
        <member name="P:Caliburn.PresentationFramework.Screens.ConductorBase`1.ActiveItem">
            <summary>
            The currently active item.
            </summary>
        </member>
        <member name="E:Caliburn.PresentationFramework.Screens.ConductorBase`1.ActivationProcessed">
            <summary>
            Occurs when an activation request is processed.
            </summary>
        </member>
        <member name="M:Caliburn.PresentationFramework.Screens.Conductor`1.ActivateItem(`0)">
            <summary>
            Activates the specified item.
            </summary>
            <param name="item">The item to activate.</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.Screens.Conductor`1.CloseItem(`0)">
            <summary>
            Closes the specified item.
            </summary>
            <param name="item">The item to close.</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.Screens.Conductor`1.CanClose(System.Action{System.Boolean})">
            <summary>
            Called to check whether or not this instance can close.
            </summary>
            <param name="callback">The implementor calls this action with the result of the close check.</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.Screens.Conductor`1.OnActivate">
            <summary>
            Called when activating.
            </summary>
        </member>
        <member name="M:Caliburn.PresentationFramework.Screens.Conductor`1.OnDeactivate(System.Boolean)">
            <summary>
            Called when deactivating.
            </summary>
            <param name="close">Inidicates whether this instance will be closed.</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.Screens.Conductor`1.GetConductedItems">
            <summary>
            Gets all the items currently being conducted.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Caliburn.PresentationFramework.Screens.Conductor`1.Collection">
            <summary>
            An implementation of <see cref="T:Caliburn.PresentationFramework.Screens.IConductor"/> that holds on many items.
            </summary>
            <summary>
            An implementation of <see cref="T:Caliburn.PresentationFramework.Screens.IConductor"/> that holds on many items.
            </summary>
        </member>
        <member name="T:Caliburn.PresentationFramework.Screens.Conductor`1.Collection.AllActive">
            <summary>
            An implementation of <see cref="T:Caliburn.PresentationFramework.Screens.IConductor"/> that holds on to many items wich are all activated.
            </summary>
        </member>
        <member name="M:Caliburn.PresentationFramework.Screens.Conductor`1.Collection.AllActive.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Caliburn.PresentationFramework.Screens.Conductor`1.Collection.AllActive"/> class.
            </summary>
            <param name="openPublicItems">if set to <c>true</c> opens public items that are properties of this class.</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.Screens.Conductor`1.Collection.AllActive.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Caliburn.PresentationFramework.Screens.Conductor`1.Collection.AllActive"/> class.
            </summary>
        </member>
        <member name="M:Caliburn.PresentationFramework.Screens.Conductor`1.Collection.AllActive.Caliburn#PresentationFramework#Screens#IConductor#GetConductedItems">
            <summary>
            Gets all the items that are being conducted.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Caliburn.PresentationFramework.Screens.Conductor`1.Collection.AllActive.Caliburn#PresentationFramework#Screens#IConductor#ActivateItem(System.Object)">
            <summary>
            Activates the specified item.
            </summary>
            <param name="item">The item to activate.</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.Screens.Conductor`1.Collection.AllActive.Caliburn#PresentationFramework#Screens#IConductor#CloseItem(System.Object)">
            <summary>
            Closes the specified item.
            </summary>
            <param name="item">The item to close.</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.Screens.Conductor`1.Collection.AllActive.OnActivate">
            <summary>
            Called when activating.
            </summary>
        </member>
        <member name="M:Caliburn.PresentationFramework.Screens.Conductor`1.Collection.AllActive.OnDeactivate(System.Boolean)">
            <summary>
            Called when deactivating.
            </summary>
            <param name="close">Inidicates whether this instance will be closed.</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.Screens.Conductor`1.Collection.AllActive.CanClose(System.Action{System.Boolean})">
            <summary>
            Called to check whether or not this instance can close.
            </summary>
            <param name="callback">The implementor calls this action with the result of the close check.</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.Screens.Conductor`1.Collection.AllActive.OnInitialize">
            <summary>
            Called when initializing.
            </summary>
        </member>
        <member name="M:Caliburn.PresentationFramework.Screens.Conductor`1.Collection.AllActive.ActivateItem(`0)">
            <summary>
            Activates the specified item.
            </summary>
            <param name="item">The item to activate.</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.Screens.Conductor`1.Collection.AllActive.CloseItem(`0)">
            <summary>
            Closes the specified item.
            </summary>
            <param name="item">The item to close.</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.Screens.Conductor`1.Collection.AllActive.OnActivationProcessed(`0,System.Boolean)">
            <summary>
            Called by a subclass when an activation needs processing.
            </summary>
            <param name="item">The item on which activation was attempted.</param>
            <param name="success">if set to <c>true</c> activation was successful.</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.Screens.Conductor`1.Collection.AllActive.EnsureItem(`0)">
            <summary>
            Ensures that an item is ready to be activated.
            </summary>
            <param name="newItem"></param>
            <returns>The item to be activated.</returns>
        </member>
        <member name="P:Caliburn.PresentationFramework.Screens.Conductor`1.Collection.AllActive.CloseStrategy">
            <summary>
            Gets or sets the close strategy.
            </summary>
            <value>The close strategy.</value>
        </member>
        <member name="P:Caliburn.PresentationFramework.Screens.Conductor`1.Collection.AllActive.Items">
            <summary>
            Gets the items that are currently being conducted.
            </summary>
        </member>
        <member name="P:Caliburn.PresentationFramework.Screens.Conductor`1.Collection.AllActive.Caliburn#PresentationFramework#Screens#IConductor#ActiveItem">
            <summary>
            The currently active item.
            </summary>
            <value></value>
        </member>
        <member name="E:Caliburn.PresentationFramework.Screens.Conductor`1.Collection.AllActive.ActivationProcessed">
            <summary>
            Occurs when an activation request is processed.
            </summary>
        </member>
        <member name="T:Caliburn.PresentationFramework.Screens.Conductor`1.Collection.OneActive">
            <summary>
            An implementation of <see cref="T:Caliburn.PresentationFramework.Screens.IConductor"/> that holds on many items but only activates on at a time.
            </summary>
        </member>
        <member name="M:Caliburn.PresentationFramework.Screens.Conductor`1.Collection.OneActive.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Caliburn.PresentationFramework.Screens.Conductor`1.Collection.OneActive"/> class.
            </summary>
        </member>
        <member name="M:Caliburn.PresentationFramework.Screens.Conductor`1.Collection.OneActive.GetConductedItems">
            <summary>
            Gets all the items currently being conducted.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Caliburn.PresentationFramework.Screens.Conductor`1.Collection.OneActive.ActivateItem(`0)">
            <summary>
            Activates the specified item.
            </summary>
            <param name="item">The item to activate.</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.Screens.Conductor`1.Collection.OneActive.CloseItem(`0)">
            <summary>
            Closes the specified item.
            </summary>
            <param name="item">The item to close.</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.Screens.Conductor`1.Collection.OneActive.DetermineNextItemToActivate(System.Int32)">
            <summary>
            Determines the next item to activate based on the last active index.
            </summary>
            <param name="lastIndex">The index of the last active item.</param>
            <returns>The next item to activate.</returns>
            <remarks>Called after an active item is closed.</remarks>
        </member>
        <member name="M:Caliburn.PresentationFramework.Screens.Conductor`1.Collection.OneActive.CanClose(System.Action{System.Boolean})">
            <summary>
            Called to check whether or not this instance can close.
            </summary>
            <param name="callback">The implementor calls this action with the result of the close check.</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.Screens.Conductor`1.Collection.OneActive.OnActivate">
            <summary>
            Called when activating.
            </summary>
        </member>
        <member name="M:Caliburn.PresentationFramework.Screens.Conductor`1.Collection.OneActive.OnDeactivate(System.Boolean)">
            <summary>
            Called when deactivating.
            </summary>
            <param name="close">Inidicates whether this instance will be closed.</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.Screens.Conductor`1.Collection.OneActive.EnsureItem(`0)">
            <summary>
            Ensures that an item is ready to be activated.
            </summary>
            <param name="newItem"></param>
            <returns>The item to be activated.</returns>
        </member>
        <member name="P:Caliburn.PresentationFramework.Screens.Conductor`1.Collection.OneActive.Items">
            <summary>
            Gets the items that are currently being conducted.
            </summary>
        </member>
        <member name="T:Caliburn.PresentationFramework.Screens.DefaultCloseStrategy`1">
            <summary>
            Used to gather the results from multiple child elements which may or may not prevent closing.
            </summary>
            <typeparam name="T">The type of child element.</typeparam>
        </member>
        <member name="T:Caliburn.PresentationFramework.Screens.ICloseStrategy`1">
            <summary>
            Used to gather the results from multiple child elements which may or may not prevent closing.
            </summary>
            <typeparam name="T">The type of child element.</typeparam>
        </member>
        <member name="M:Caliburn.PresentationFramework.Screens.ICloseStrategy`1.Execute(System.Collections.Generic.IEnumerable{`0},System.Action{System.Boolean,System.Collections.Generic.IEnumerable{`0}})">
            <summary>
            Executes the strategy.
            </summary>
            <param name="toClose">Items that are requesting close.</param>
            <param name="callback">The action to call when all enumeration is complete and the close results are aggregated.
            The bool indicates whether close can occur. The enumerable indicates which children should close if the parent cannot.</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.Screens.DefaultCloseStrategy`1.Execute(System.Collections.Generic.IEnumerable{`0},System.Action{System.Boolean,System.Collections.Generic.IEnumerable{`0}})">
            <summary>
            Executes the strategy.
            </summary>
            <param name="toClose">Items that are requesting close.</param>
            <param name="callback">The action to call when all enumeration is complete and the close results are aggregated.
            The bool indicates whether close can occur. The enumerable indicates which children should close if the parent cannot.</param>
        </member>
        <member name="T:Caliburn.PresentationFramework.Screens.ActivationEventArgs">
            <summary>
            EventArgs sent during activation.
            </summary>
        </member>
        <member name="F:Caliburn.PresentationFramework.Screens.ActivationEventArgs.WasInitialized">
            <summary>
            Inidicates whether the sender was initialized in addition to being activated.
            </summary>
        </member>
        <member name="T:Caliburn.PresentationFramework.Screens.DeactivationEventArgs">
            <summary>
            EventArgs sent during deactivation.
            </summary>
        </member>
        <member name="F:Caliburn.PresentationFramework.Screens.DeactivationEventArgs.WasClosed">
            <summary>
            Indicates whether the sender was closed in addition to being deactivated.
            </summary>
        </member>
        <member name="T:Caliburn.PresentationFramework.Screens.IHaveSubject">
            <summary>
            Indicates an item which has subject matter.
            </summary>
        </member>
        <member name="M:Caliburn.PresentationFramework.Screens.IHaveSubject.WithSubject(System.Object)">
            <summary>
            Configures the screen with the subject.
            </summary>
            <param name="subject">The subject.</param>
            <returns>Self</returns>
        </member>
        <member name="P:Caliburn.PresentationFramework.Screens.IHaveSubject.Subject">
            <summary>
            Gets the subject.
            </summary>
            <value>The subject.</value>
        </member>
        <member name="T:Caliburn.PresentationFramework.Screens.IHaveSubject`1">
            <summary>
            Indicates an item which has subject matter.
            </summary>
        </member>
        <member name="M:Caliburn.PresentationFramework.Screens.IHaveSubject`1.WithSubject(`0)">
            <summary>
            Configures the screen with the subject.
            </summary>
            <param name="subject">The subject.</param>
            <returns>Self</returns>
        </member>
        <member name="P:Caliburn.PresentationFramework.Screens.IHaveSubject`1.Subject">
            <summary>
            Gets the subject.
            </summary>
            <value>The subject.</value>
        </member>
        <member name="T:Caliburn.PresentationFramework.Screens.ISubjectSpecification">
            <summary>
            Matches screens with the same "subject" and is capable of creating screens for the encapsulated subject.
            </summary>
        </member>
        <member name="M:Caliburn.PresentationFramework.Screens.ISubjectSpecification.Matches(Caliburn.PresentationFramework.Screens.IHaveSubject)">
            <summary>
            Determines if the hosts' subjects match.
            </summary>
            <param name="iHaveSubject">The item which has a subject.</param>
            <returns><c>true</c> if the item's subject matches; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Caliburn.PresentationFramework.Screens.ISubjectSpecification.CreateSubjectHost(Caliburn.PresentationFramework.ViewModels.IViewModelFactory,System.Action{Caliburn.PresentationFramework.Screens.IHaveSubject})">
            <summary>
            Creates an item capable of hosting the the subject.
            </summary>
            <param name="factory">The factory.</param>
            <param name="constructionComplete">The construction completion callback.</param>
        </member>
        <member name="T:Caliburn.PresentationFramework.Screens.Screen`1">
            <summary>
            A basic implementation of <see cref="!:IScreen&lt;T&gt;"/>
            </summary>
            <typeparam name="T">The screen's type.</typeparam>
        </member>
        <member name="M:Caliburn.PresentationFramework.Screens.Screen`1.WithSubject(`0)">
            <summary>
            Configures the screen with the subject.
            </summary>
            <param name="subject">The subject.</param>
            <returns>Self</returns>
        </member>
        <member name="P:Caliburn.PresentationFramework.Screens.Screen`1.Subject">
            <summary>
            Gets the subject.
            </summary>
            <value>The subject.</value>
        </member>
        <member name="T:Caliburn.PresentationFramework.Screens.ScreenExtensions">
            <summary>
            Hosts extension methods for <see cref="T:Caliburn.PresentationFramework.Screens.IScreen"/> classes.
            </summary>
        </member>
        <member name="M:Caliburn.PresentationFramework.Screens.ScreenExtensions.Initialize(Caliburn.PresentationFramework.ViewModels.IViewModelFactory)">
            <summary>
            Initializes the extensions with the specified view model factory.
            </summary>
            <param name="viewModelFactory">The view model factory.</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.Screens.ScreenExtensions.ActivateSubject(Caliburn.PresentationFramework.Screens.IConductor,Caliburn.PresentationFramework.Screens.ISubjectSpecification,System.Action{System.Boolean})">
            <summary>
            Opens the specified screen.
            </summary>
            <param name="conductor">The conductor.</param>
            <param name="subjectSpecification">The subject.</param>
            <param name="callback">Is called with true if the screen is activated.</param>
        </member>
        <member name="T:Caliburn.PresentationFramework.Screens.SubjectSpecification`1">
            <summary>
            A simple implementation of <see cref="T:Caliburn.PresentationFramework.Screens.ISubjectSpecification"/>.
            </summary>
            <typeparam name="T">The screen subject's type.</typeparam>
        </member>
        <member name="M:Caliburn.PresentationFramework.Screens.SubjectSpecification`1.#ctor(`0)">
            <summary>
            Initializes a new instance of the <see cref="T:Caliburn.PresentationFramework.Screens.SubjectSpecification`1"/> class.
            </summary>
            <param name="subject">The subject.</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.Screens.SubjectSpecification`1.Matches(Caliburn.PresentationFramework.Screens.IHaveSubject)">
            <summary>
            Determines if the specified screen matches this subject.
            </summary>
            <param name="itemWithSubject">The screen.</param>
            <returns>
            	<c>true</c> if the screen matches the subject; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Caliburn.PresentationFramework.Screens.SubjectSpecification`1.CreateSubjectHost(Caliburn.PresentationFramework.ViewModels.IViewModelFactory,System.Action{Caliburn.PresentationFramework.Screens.IHaveSubject})">
            <summary>
            Creates the screen.
            </summary>
            <param name="factory">The factory.</param>
            <param name="constructionComplete">The construction completion callback.</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.Screens.SubjectSpecification`1.Equals(Caliburn.PresentationFramework.Screens.SubjectSpecification{`0})">
            <summary>
            Equalses the specified other.
            </summary>
            <param name="other">The other.</param>
            <returns>The result of the equality check.</returns>
        </member>
        <member name="M:Caliburn.PresentationFramework.Screens.SubjectSpecification`1.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with the current <see cref="T:System.Object"/>.</param>
            <returns>
            true if the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>; otherwise, false.
            </returns>
            <exception cref="T:System.NullReferenceException">
            The <paramref name="obj"/> parameter is null.
            </exception>
        </member>
        <member name="M:Caliburn.PresentationFramework.Screens.SubjectSpecification`1.GetHashCode">
            <summary>
            Serves as a hash function for a particular type.
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="T:Caliburn.PresentationFramework.ViewModels.Bind">
            <summary>
            Hosts dependency properties for binding.
            </summary>
        </member>
        <member name="M:Caliburn.PresentationFramework.ViewModels.Bind.Initialize(Caliburn.PresentationFramework.ViewModels.IViewModelBinder)">
            <summary>
            Initializes the binder attached properties.
            </summary>
            <param name="binder">The binder.</param>
        </member>
        <member name="F:Caliburn.PresentationFramework.ViewModels.Bind.ModelProperty">
            <summary>
            Allows binding on an existing view.
            </summary>
        </member>
        <member name="M:Caliburn.PresentationFramework.ViewModels.Bind.GetModel(System.Windows.DependencyObject)">
            <summary>
            Gets the model to bind to.
            </summary>
            <param name="dependencyObject">The dependency object to bind to.</param>
            <returns>The model.</returns>
        </member>
        <member name="M:Caliburn.PresentationFramework.ViewModels.Bind.SetModel(System.Windows.DependencyObject,System.Object)">
            <summary>
            Sets the model to bind to.
            </summary>
            <param name="dependencyObject">The dependency object to bind to.</param>
            <param name="value">The model.</param>
        </member>
        <member name="T:Caliburn.PresentationFramework.ViewModels.BindableEnum">
            <summary>
            A databindable enum with a display name.
            </summary>
        </member>
        <member name="M:Caliburn.PresentationFramework.ViewModels.BindableEnum.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="M:Caliburn.PresentationFramework.ViewModels.BindableEnum.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with the current <see cref="T:System.Object"/>.</param>
            <returns>
            true if the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>; otherwise, false.
            </returns>
            <exception cref="T:System.NullReferenceException">
            The <paramref name="obj"/> parameter is null.
            </exception>
        </member>
        <member name="M:Caliburn.PresentationFramework.ViewModels.BindableEnum.GetHashCode">
            <summary>
            Serves as a hash function for a particular type.
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="P:Caliburn.PresentationFramework.ViewModels.BindableEnum.UnderlyingValue">
            <summary>
            Gets or sets the underlying value.
            </summary>
            <value>The underlying value.</value>
        </member>
        <member name="P:Caliburn.PresentationFramework.ViewModels.BindableEnum.DisplayName">
            <summary>
            Gets or sets the display name.
            </summary>
            <value>The display name.</value>
        </member>
        <member name="P:Caliburn.PresentationFramework.ViewModels.BindableEnum.Value">
            <summary>
            Gets or sets the value.
            </summary>
            <value>The value.</value>
        </member>
        <member name="T:Caliburn.PresentationFramework.ViewModels.BindableEnumCollection`1">
            <summary>
            A collection of <see cref="T:Caliburn.PresentationFramework.ViewModels.BindableEnum"/> based on an <see cref="T:System.Enum"/>.
            </summary>
            <typeparam name="T">The Enum type.</typeparam>
        </member>
        <member name="T:Caliburn.PresentationFramework.BindableCollection`1">
            <summary>
            A base collection class that supports automatic UI thread marshalling.
            </summary>
            <typeparam name="T">The type of elements contained in the collection.</typeparam>
        </member>
        <member name="T:Caliburn.PresentationFramework.IObservableCollection`1">
            <summary>
            Represents a collection that is observable.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Caliburn.PresentationFramework.IObservableCollection`1.AddRange(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Adds the range.
            </summary>
            <param name="items">The items.</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.IObservableCollection`1.RemoveRange(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Removes the range.
            </summary>
            <param name="items">The items.</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.BindableCollection`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Caliburn.PresentationFramework.BindableCollection`1"/> class.
            </summary>
        </member>
        <member name="M:Caliburn.PresentationFramework.BindableCollection`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Caliburn.PresentationFramework.BindableCollection`1"/> class.
            </summary>
            <param name="collection">The collection from which the elements are copied.</param>
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="collection"/> parameter cannot be null.
            </exception>
        </member>
        <member name="M:Caliburn.PresentationFramework.BindableCollection`1.InsertItem(System.Int32,`0)">
            <summary>
            Inserts the item to the specified position.
            </summary>
            <param name="index">The index to insert at.</param>
            <param name="item">The item to be inserted.</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.BindableCollection`1.InsertItemBase(System.Int32,`0)">
            <summary>
            Exposes the base implementation fo the <see cref="M:Caliburn.PresentationFramework.BindableCollection`1.InsertItem(System.Int32,`0)"/> function.
            </summary>
            <param name="index">The index.</param>
            <param name="item">The item.</param>
            <remarks>Used to avoid compiler warning regarding unverificable code.</remarks>
        </member>
        <member name="M:Caliburn.PresentationFramework.BindableCollection`1.MoveItem(System.Int32,System.Int32)">
            <summary>
            Moves the item within the collection.
            </summary>
            <param name="oldIndex">The old position of the item.</param>
            <param name="newIndex">The new position of the item.</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.BindableCollection`1.MoveItemBase(System.Int32,System.Int32)">
            <summary>
            Exposes the base implementation fo the <see cref="M:Caliburn.PresentationFramework.BindableCollection`1.MoveItem(System.Int32,System.Int32)"/> function.
            </summary>
            <param name="oldIndex">The old index.</param>
            <param name="newIndex">The new index.</param>
            <remarks>Used to avoid compiler warning regarding unverificable code.</remarks>
        </member>
        <member name="M:Caliburn.PresentationFramework.BindableCollection`1.SetItem(System.Int32,`0)">
            <summary>
            Sets the item at the specified position.
            </summary>
            <param name="index">The index to set the item at.</param>
            <param name="item">The item to set.</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.BindableCollection`1.SetItemBase(System.Int32,`0)">
            <summary>
            Exposes the base implementation fo the <see cref="M:Caliburn.PresentationFramework.BindableCollection`1.SetItem(System.Int32,`0)"/> function.
            </summary>
            <param name="index">The index.</param>
            <param name="item">The item.</param>
            <remarks>Used to avoid compiler warning regarding unverificable code.</remarks>
        </member>
        <member name="M:Caliburn.PresentationFramework.BindableCollection`1.RemoveItem(System.Int32)">
            <summary>
            Removes the item at the specified position.
            </summary>
            <param name="index">The position used to identify the item to remove.</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.BindableCollection`1.RemoveItemBase(System.Int32)">
            <summary>
            Exposes the base implementation fo the <see cref="M:Caliburn.PresentationFramework.BindableCollection`1.RemoveItem(System.Int32)"/> function.
            </summary>
            <param name="index">The index.</param>
            <remarks>Used to avoid compiler warning regarding unverificable code.</remarks>
        </member>
        <member name="M:Caliburn.PresentationFramework.BindableCollection`1.ClearItems">
            <summary>
            Clears the items contained by the collection.
            </summary>
        </member>
        <member name="M:Caliburn.PresentationFramework.BindableCollection`1.ClearItemsBase">
            <summary>
            Exposes the base implementation of the <see cref="M:Caliburn.PresentationFramework.BindableCollection`1.ClearItems"/> function.
            </summary>
            <remarks>Used to avoid compiler warning regarding unverificable code.</remarks>
        </member>
        <member name="M:Caliburn.PresentationFramework.BindableCollection`1.OnCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Raises the <see cref="E:System.Collections.ObjectModel.ObservableCollection`1.CollectionChanged"/> event with the provided arguments.
            </summary>
            <param name="e">Arguments of the event being raised.</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.BindableCollection`1.AddRange(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Adds the range.
            </summary>
            <param name="items">The items.</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.BindableCollection`1.RemoveRange(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Removes the range.
            </summary>
            <param name="items">The items.</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.ViewModels.BindableEnumCollection`1.#ctor(`0[])">
            <summary>
            Initializes a new instance of the <see cref="T:Caliburn.PresentationFramework.ViewModels.BindableEnumCollection`1"/> class.
            </summary>
            <param name="values">The values.</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.ViewModels.BindableEnumCollection`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Caliburn.PresentationFramework.ViewModels.BindableEnumCollection`1"/> class.
            </summary>
        </member>
        <member name="T:Caliburn.PresentationFramework.ViewModels.DefaultViewModelBinder">
            <summary>
            The default implementation of <see cref="T:Caliburn.PresentationFramework.ViewModels.IViewModelBinder"/>.
            </summary>
        </member>
        <member name="T:Caliburn.PresentationFramework.ViewModels.IViewModelBinder">
            <summary>
            Implemented by services that bind a view to a view model.
            </summary>
        </member>
        <member name="M:Caliburn.PresentationFramework.ViewModels.IViewModelBinder.Bind(System.Object,System.Windows.DependencyObject,System.Object)">
            <summary>
            Binds the specified viewModel to the view.
            </summary>
            <param name="viewModel">The model.</param>
            <param name="view">The view.</param>
            <param name="context">The context.</param>
        </member>
        <member name="P:Caliburn.PresentationFramework.ViewModels.IViewModelBinder.ApplyConventionsByDefault">
            <summary>
            Gets or sets a value indicating whether to apply conventions by default.
            </summary>
            <value>
            	<c>true</c> if conventions should be applied by default; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:Caliburn.PresentationFramework.ViewModels.DefaultViewModelBinder.#ctor(Caliburn.PresentationFramework.ViewModels.IViewModelDescriptionFactory)">
            <summary>
            Initializes a new instance of the <see cref="T:Caliburn.PresentationFramework.ViewModels.DefaultViewModelBinder"/> class.
            </summary>
            <param name="viewModelDescriptionFactory"></param>
        </member>
        <member name="M:Caliburn.PresentationFramework.ViewModels.DefaultViewModelBinder.Bind(System.Object,System.Windows.DependencyObject,System.Object)">
            <summary>
            Binds the specified viewModel to the view.
            </summary>
            <param name="viewModel">The model.</param>
            <param name="view">The view.</param>
            <param name="context">The context.</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.ViewModels.DefaultViewModelBinder.BindCore(System.Object,System.Windows.DependencyObject,System.Object)">
            <summary>
            Attaches the view model and the view.
            </summary>
            <param name="viewModel">The view model.</param>
            <param name="view">The view.</param>
            <param name="context">The context.</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.ViewModels.DefaultViewModelBinder.ShouldApplyConventions(System.Object,System.Windows.DependencyObject,System.Object)">
            <summary>
            Indicates whether or not the conventions should be applied.
            </summary>
            <param name="viewModel">The view model.</param>
            <param name="view">The view.</param>
            <param name="context">The context.</param>
            <returns><c>true</c> if conventions should be applied; otherwise, <c>false</c></returns>
        </member>
        <member name="M:Caliburn.PresentationFramework.ViewModels.DefaultViewModelBinder.ApplyConventions(System.Object,System.Windows.DependencyObject)">
            <summary>
            Applies the conventions.
            </summary>
            <param name="viewModel">The view model.</param>
            <param name="view">The view.</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.ViewModels.DefaultViewModelBinder.GetModelType(System.Object)">
            <summary>
            Gets the type of the view model.
            </summary>
            <param name="viewModel">The view model.</param>
            <returns></returns>
        </member>
        <member name="P:Caliburn.PresentationFramework.ViewModels.DefaultViewModelBinder.ApplyConventionsByDefault">
            <summary>
            Gets or sets a value indicating whether to apply conventions by default.
            </summary>
            <value>
            	<c>true</c> if conventions should be applied by default; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:Caliburn.PresentationFramework.ViewModels.DefaultViewModelDescription">
            <summary>
            The default implementation of <see cref="T:Caliburn.PresentationFramework.ViewModels.IViewModelDescription"/>.
            </summary>
        </member>
        <member name="T:Caliburn.PresentationFramework.ViewModels.IViewModelDescription">
            <summary>
            Describes a View Model.
            </summary>
        </member>
        <member name="M:Caliburn.PresentationFramework.ViewModels.IViewModelDescription.SetConventionsFor(System.Type,System.Collections.Generic.IEnumerable{Caliburn.PresentationFramework.Views.IViewApplicable})">
            <summary>
            Sets the conventions for a particualr view type.
            </summary>
            <param name="viewType">Type of the view.</param>
            <param name="applicableConventions">The applicable conventions.</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.ViewModels.IViewModelDescription.GetConventionsFor(System.Windows.DependencyObject)">
            <summary>
            Gets the conventions for the specified view.
            </summary>
            <param name="view">The view.</param>
            <returns>The applicable conventions.</returns>
        </member>
        <member name="P:Caliburn.PresentationFramework.ViewModels.IViewModelDescription.Properties">
            <summary>
            Gets the properties.
            </summary>
            <value>The properties.</value>
        </member>
        <member name="M:Caliburn.PresentationFramework.ViewModels.DefaultViewModelDescription.#ctor(Caliburn.PresentationFramework.Conventions.IConventionManager,System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Caliburn.PresentationFramework.ViewModels.DefaultViewModelDescription"/> class.
            </summary>
            <param name="conventionManager">The convention manager.</param>
            <param name="targetType">Type of the target.</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.ViewModels.DefaultViewModelDescription.GetAction(Caliburn.PresentationFramework.Actions.ActionMessage)">
            <summary>
            Gets the action.
            </summary>
            <param name="message">The message.</param>
            <returns></returns>
        </member>
        <member name="M:Caliburn.PresentationFramework.ViewModels.DefaultViewModelDescription.AddAction(Caliburn.PresentationFramework.Actions.IAction)">
            <summary>
            Adds the action.
            </summary>
            <param name="action">The action.</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.ViewModels.DefaultViewModelDescription.SetConventionsFor(System.Type,System.Collections.Generic.IEnumerable{Caliburn.PresentationFramework.Views.IViewApplicable})">
            <summary>
            Sets the conventions for a particualr view type.
            </summary>
            <param name="viewType">Type of the view.</param>
            <param name="applicableConventions">The applicable conventions.</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.ViewModels.DefaultViewModelDescription.GetConventionsFor(System.Windows.DependencyObject)">
            <summary>
            Gets the conventions for the specified view.
            </summary>
            <param name="view">The view.</param>
            <returns>The applicable conventions.</returns>
        </member>
        <member name="P:Caliburn.PresentationFramework.ViewModels.DefaultViewModelDescription.TargetType">
            <summary>
            Gets the View Model's type.
            </summary>
            <value>The type of the View Model.</value>
        </member>
        <member name="P:Caliburn.PresentationFramework.ViewModels.DefaultViewModelDescription.Filters">
            <summary>
            Gets the filters.
            </summary>
            <value>The filters.</value>
        </member>
        <member name="P:Caliburn.PresentationFramework.ViewModels.DefaultViewModelDescription.Actions">
            <summary>
            Gets the actions.
            </summary>
            <value>The actions.</value>
        </member>
        <member name="P:Caliburn.PresentationFramework.ViewModels.DefaultViewModelDescription.Properties">
            <summary>
            Gets the properties.
            </summary>
            <value>The properties.</value>
        </member>
        <member name="T:Caliburn.PresentationFramework.ViewModels.DefaultViewModelDescriptionFactory">
            <summary>
            The default implementation of <see cref="T:Caliburn.PresentationFramework.ViewModels.IViewModelDescriptionFactory"/>.
            </summary>
        </member>
        <member name="T:Caliburn.PresentationFramework.ViewModels.IViewModelDescriptionFactory">
            <summary>
            A service responsible for creating instances of <see cref="T:Caliburn.PresentationFramework.ViewModels.IViewModelDescription"/>.
            </summary>
        </member>
        <member name="M:Caliburn.PresentationFramework.ViewModels.IViewModelDescriptionFactory.Create(System.Type)">
            <summary>
            Creates a description based on the target type.
            </summary>
            <param name="targetType">Type of the target.</param>
            <returns>A view model description.</returns>
        </member>
        <member name="M:Caliburn.PresentationFramework.ViewModels.DefaultViewModelDescriptionFactory.#ctor(Microsoft.Practices.ServiceLocation.IServiceLocator,Caliburn.PresentationFramework.Actions.IActionLocator,Caliburn.PresentationFramework.Conventions.IConventionManager)">
            <summary>
            Initializes a new instance of the <see cref="T:Caliburn.PresentationFramework.ViewModels.DefaultViewModelDescriptionFactory"/> class.
            </summary>
            <param name="serviceLocator">The service locator.</param>
            <param name="actionLocator">The action locator.</param>
            <param name="conventionManager">The convention manager.</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.ViewModels.DefaultViewModelDescriptionFactory.Create(System.Type)">
            <summary>
            Creates a description based on the target type.
            </summary>
            <param name="targetType">Type of the target.</param>
            <returns>A view model description.</returns>
        </member>
        <member name="M:Caliburn.PresentationFramework.ViewModels.DefaultViewModelDescriptionFactory.CreateCore(System.Type)">
            <summary>
            Creates the actual description.
            </summary>
            <param name="targetType">Type of the target.</param>
            <returns></returns>
        </member>
        <member name="T:Caliburn.PresentationFramework.ViewModels.DefaultViewModelFactory">
            <summary>
            The default implementation of <see cref="T:Caliburn.PresentationFramework.ViewModels.IViewModelFactory"/>.
            </summary>
        </member>
        <member name="T:Caliburn.PresentationFramework.ViewModels.IViewModelFactory">
            <summary>
            Implemented by services that create view models.
            </summary>
        </member>
        <member name="M:Caliburn.PresentationFramework.ViewModels.IViewModelFactory.Create``1">
            <summary>
            Creates a view model.
            </summary>
            <typeparam name="T">The view model's type.</typeparam>
            <returns>The view model.</returns>
        </member>
        <member name="M:Caliburn.PresentationFramework.ViewModels.IViewModelFactory.CreateFor``1(``0)">
            <summary>
            Creates an item to host the given subject.
            </summary>
            <typeparam name="T">The subject's type.</typeparam>
            <param name="subject">The subject.</param>
            <returns>The item which hosts the subject.</returns>
        </member>
        <member name="M:Caliburn.PresentationFramework.ViewModels.DefaultViewModelFactory.#ctor(Microsoft.Practices.ServiceLocation.IServiceLocator)">
            <summary>
            Initializes a new instance of the <see cref="T:Caliburn.PresentationFramework.ViewModels.DefaultViewModelFactory"/> class.
            </summary>
            <param name="serviceLocator">The service locator.</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.ViewModels.DefaultViewModelFactory.Create``1">
            <summary>
            Creates a view model.
            </summary>
            <typeparam name="T">The view model's type.</typeparam>
            <returns>The view model.</returns>
        </member>
        <member name="M:Caliburn.PresentationFramework.ViewModels.DefaultViewModelFactory.CreateFor``1(``0)">
            <summary>
            Creates a screen for the given subject.
            </summary>
            <typeparam name="T">The subject's type.</typeparam>
            <param name="subject">The subject.</param>
            <returns>The screen.</returns>
        </member>
        <member name="T:Caliburn.PresentationFramework.Views.DefaultViewLocator">
            <summary>
            The default implementation of <see cref="T:Caliburn.PresentationFramework.Views.IViewLocator"/>.
            </summary>
        </member>
        <member name="T:Caliburn.PresentationFramework.Views.IViewLocator">
            <summary>
            A strategy for determining which view to use for a given model.
            </summary>
        </member>
        <member name="M:Caliburn.PresentationFramework.Views.IViewLocator.Locate(System.Object,System.Windows.DependencyObject,System.Object)">
            <summary>
            Locates the view for the specified model instance.
            </summary>
            <param name="model">The model.</param>
            <param name="displayLocation">The display location.</param>
            <param name="context">The context.</param>
            <returns></returns>
        </member>
        <member name="M:Caliburn.PresentationFramework.Views.IViewLocator.Locate(System.Type,System.Windows.DependencyObject,System.Object)">
            <summary>
            Locates the View for the specified model type.
            </summary>
            <param name="modelType">Type of the model.</param>
            <param name="displayLocation">The display location.</param>
            <param name="context">The context.</param>
            <returns>The view.</returns>
        </member>
        <member name="F:Caliburn.PresentationFramework.Views.DefaultViewLocator.DefaultContext">
            <summary>
            The default view context.
            </summary>
        </member>
        <member name="M:Caliburn.PresentationFramework.Views.DefaultViewLocator.#ctor(Caliburn.Core.IAssemblySource,Microsoft.Practices.ServiceLocation.IServiceLocator)">
            <summary>
            Initializes a new instance of the <see cref="T:Caliburn.PresentationFramework.Views.DefaultViewLocator"/> class.
            </summary>
            <param name="assemblySource">The assembly source.</param>
            <param name="serviceLocator">The service locator.</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.Views.DefaultViewLocator.AddNamespaceAlias(System.String,System.String)">
            <summary>
            Allows for the explicit mapping of a model's namespace to a view's namespace. This overrides the implicit mapping.
            </summary>
            <param name="modelNamespace">The namespace that the model resides in.</param>
            <param name="viewNamespace">the namespace that the view resides in.</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.Views.DefaultViewLocator.Locate(System.Object,System.Windows.DependencyObject,System.Object)">
            <summary>
            Locates the view for the specified model instance.
            </summary>
            <param name="model">The model.</param>
            <param name="displayLocation">The display location.</param>
            <param name="context">The context.</param>
            <returns>The view.</returns>
        </member>
        <member name="M:Caliburn.PresentationFramework.Views.DefaultViewLocator.Locate(System.Type,System.Windows.DependencyObject,System.Object)">
            <summary>
            Locates the View for the specified model type.
            </summary>
            <param name="modelType">Type of the model.</param>
            <param name="displayLocation">The display location.</param>
            <param name="context">The context.</param>
            <returns>The view.</returns>
        </member>
        <member name="M:Caliburn.PresentationFramework.Views.DefaultViewLocator.DetermineCacheKey(System.Type,System.String)">
            <summary>
            Determines the cache key.
            </summary>
            <param name="modelType">Type of the model.</param>
            <param name="context">The context.</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.Views.DefaultViewLocator.GetOrCreateViewFromType(System.Type)">
            <summary>
            Queries the service locator for a view matching the type. If one is not found, it attempts to instantiate the type.
            If both options fail, it returns null.
            </summary>
            <param name="type">The candidate type for the view.</param>
            <returns>An instance of a view or null.</returns>
        </member>
        <member name="M:Caliburn.PresentationFramework.Views.DefaultViewLocator.GetTypeNamesToCheck(System.Type,System.String)">
            <summary>
            Gets the type names to check for view implementations.
            </summary>
            <param name="modelType">Type of the model.</param>
            <param name="context">Some additional context used to select the proper view.</param>
            <returns></returns>
        </member>
        <member name="M:Caliburn.PresentationFramework.Views.DefaultViewLocator.GetSingularKeywords">
            <summary>
            Gets the keywords used for namespace/type search and replace.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Caliburn.PresentationFramework.Views.DefaultViewLocator.ReplaceWithView(System.String,System.String)">
            <summary>
            Creates a set of possible type names based on the model type by replacing the toReplace text.
            </summary>
            <param name="part">The model name.</param>
            <param name="toReplace">To replace.</param>
            <returns></returns>
        </member>
        <member name="M:Caliburn.PresentationFramework.Views.DefaultViewLocator.MakeInterface(System.String)">
            <summary>
            Makes a type name into an interface name.
            </summary>
            <param name="part">The part.</param>
            <returns></returns>
        </member>
        <member name="M:Caliburn.PresentationFramework.Views.DefaultViewLocator.MakeNamespacePart(System.String)">
            <summary>
            Makes a type name part into a namespace part.
            </summary>
            <param name="part">The part.</param>
            <returns></returns>
        </member>
        <member name="T:Caliburn.PresentationFramework.Views.ViewAttachedEventArgs">
            <summary>
            The event args for the <see cref="E:Caliburn.PresentationFramework.Views.IViewAware.ViewAttached"/> event.
            </summary>
        </member>
        <member name="F:Caliburn.PresentationFramework.Views.ViewAttachedEventArgs.View">
            <summary>
            The view.
            </summary>
        </member>
        <member name="F:Caliburn.PresentationFramework.Views.ViewAttachedEventArgs.Context">
            <summary>
            The context.
            </summary>
        </member>
        <member name="T:Caliburn.PresentationFramework.Views.IViewStrategy">
            <summary>
            Applies a specific strategy for locating views to the annotated instance.
            </summary>
        </member>
        <member name="M:Caliburn.PresentationFramework.Views.IViewStrategy.Matches(System.Object)">
            <summary>
            Determines whether this strategy applies in the specified context.
            </summary>
            <param name="context">The context.</param>
            <returns>true if it matches the context; false otherwise</returns>
        </member>
        <member name="M:Caliburn.PresentationFramework.Views.IViewStrategy.Locate(System.Type,System.Windows.DependencyObject,System.Object)">
            <summary>
            Locates the View for the specified model type.
            </summary>
            <param name="modelType">Type of the model.</param>
            <param name="displayLocation">The display location.</param>
            <param name="context">The context.</param>
            <returns>The view.</returns>
        </member>
        <member name="T:Caliburn.PresentationFramework.Views.NotFoundView">
            <summary>
            A default view provided by Caliburn when an <see cref="T:Caliburn.PresentationFramework.Views.IViewLocator"/> is unable to locate one.
            </summary>
        </member>
        <member name="M:Caliburn.PresentationFramework.Views.NotFoundView.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Caliburn.PresentationFramework.Views.NotFoundView"/> class.
            </summary>
        </member>
        <member name="T:Caliburn.PresentationFramework.Views.View">
            <summary>
            Hosts attached properties related to view models.
            </summary>
        </member>
        <member name="M:Caliburn.PresentationFramework.Views.View.Initialize(Caliburn.PresentationFramework.Views.IViewLocator,Caliburn.PresentationFramework.ViewModels.IViewModelBinder)">
            <summary>
            Initializes the framework with the specified view locator and view model binder.
            </summary>
            <param name="viewLocator">The view locator.</param>
            <param name="viewModelBinder">The view model binder.</param>
        </member>
        <member name="F:Caliburn.PresentationFramework.Views.View.ContextProperty">
            <summary>
            A dependency property for assigning a context to a particular portion of the UI.
            </summary>
        </member>
        <member name="M:Caliburn.PresentationFramework.Views.View.GetContext(System.Windows.DependencyObject)">
            <summary>
            Gets the context.
            </summary>
            <param name="d">The element the context is attached to.</param>
            <returns>The context.</returns>
        </member>
        <member name="M:Caliburn.PresentationFramework.Views.View.SetContext(System.Windows.DependencyObject,System.Object)">
            <summary>
            Sets the context.
            </summary>
            <param name="d">The element to attach the context to.</param>
            <param name="value">The context.</param>
        </member>
        <member name="F:Caliburn.PresentationFramework.Views.View.ModelProperty">
            <summary>
            A dependency property for attaching a model to the UI.
            </summary>
        </member>
        <member name="M:Caliburn.PresentationFramework.Views.View.GetModel(System.Windows.DependencyObject)">
            <summary>
            Gets the model.
            </summary>
            <param name="d">The element the model is attached to.</param>
            <returns>The model.</returns>
        </member>
        <member name="M:Caliburn.PresentationFramework.Views.View.SetModel(System.Windows.DependencyObject,System.Object)">
            <summary>
            Sets the model.
            </summary>
            <param name="d">The element to attach the model to.</param>
            <param name="value">The model.</param>
        </member>
        <member name="F:Caliburn.PresentationFramework.Views.View.StrategyProperty">
            <summary>
            A dependency property for assigning an <see cref="T:Caliburn.PresentationFramework.Views.IViewLocator"/> to a UI element.
            </summary>
        </member>
        <member name="M:Caliburn.PresentationFramework.Views.View.GetStrategy(System.Windows.DependencyObject)">
            <summary>
            Gets the <see cref="T:Caliburn.PresentationFramework.Views.IViewLocator"/>.
            </summary>
            <param name="d">The element the strategy is attached to.</param>
            <returns>The strategy.</returns>
        </member>
        <member name="M:Caliburn.PresentationFramework.Views.View.SetStrategy(System.Windows.DependencyObject,Caliburn.PresentationFramework.Views.IViewLocator)">
            <summary>
            Sets the <see cref="T:Caliburn.PresentationFramework.Views.IViewLocator"/>.
            </summary>
            <param name="d">The element to attach the strategy to.</param>
            <param name="value">The strategy.</param>
        </member>
        <member name="F:Caliburn.PresentationFramework.Views.View.ApplyConventionsProperty">
            <summary>
            A dependency property which allows the override of convention application behavior.
            </summary>
        </member>
        <member name="M:Caliburn.PresentationFramework.Views.View.GetApplyConventions(System.Windows.DependencyObject)">
            <summary>
            Gets the convention application behavior.
            </summary>
            <param name="d">The element the property is attached to.</param>
            <returns>Whether or not to apply conventions.</returns>
        </member>
        <member name="M:Caliburn.PresentationFramework.Views.View.SetApplyConventions(System.Windows.DependencyObject,System.Nullable{System.Boolean})">
            <summary>
            Sets the convention application behavior.
            </summary>
            <param name="d">The element to attach the property to.</param>
            <param name="value">Whether or not to apply conventions.</param>
        </member>
        <member name="T:Caliburn.PresentationFramework.Views.ViewAttribute">
            <summary>
            An implementation of <see cref="T:Caliburn.PresentationFramework.Views.IViewLocator"/> that provides a basic lookup strategy for an attributed model.
            </summary>
        </member>
        <member name="M:Caliburn.PresentationFramework.Views.ViewAttribute.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Caliburn.PresentationFramework.Views.ViewAttribute"/> class.
            </summary>
            <param name="key">The key.</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.Views.ViewAttribute.Matches(System.Object)">
            <summary>
            Determines whether this strategy applies in the specified context.
            </summary>
            <param name="context">The context.</param>
            <returns>
            true if it matches the context; false otherwise
            </returns>
        </member>
        <member name="M:Caliburn.PresentationFramework.Views.ViewAttribute.Locate(System.Type,System.Windows.DependencyObject,System.Object)">
            <summary>
            Locates the View for the specified model type.
            </summary>
            <param name="modelType">Type of the model.</param>
            <param name="displayLocation">The display location.</param>
            <param name="context">The context.</param>
            <returns>The view.</returns>
        </member>
        <member name="P:Caliburn.PresentationFramework.Views.ViewAttribute.Key">
            <summary>
            Gets the key.
            </summary>
            <value>The key.</value>
        </member>
        <member name="P:Caliburn.PresentationFramework.Views.ViewAttribute.Context">
            <summary>
            Gets or sets the context.
            </summary>
            <value>The context.</value>
        </member>
        <member name="T:Caliburn.PresentationFramework.ElementExtensions">
            <summary>
            Hosts extension methods related to FrameworkElements and FrameworkContentElements.
            </summary>
        </member>
        <!-- El comentario XML con formato incorrecto se omite para el miembro "M:Caliburn.PresentationFramework.ElementExtensions.GetParent(System.Windows.DependencyObject)" -->
        <member name="M:Caliburn.PresentationFramework.ElementExtensions.GetTemplatedParent(System.Windows.DependencyObject)">
            <summary>
            Gets the templated parent.
            </summary>
            <param name="element">The element.</param>
            <returns></returns>
        </member>
        <member name="M:Caliburn.PresentationFramework.ElementExtensions.SetDataContext(System.Windows.DependencyObject,System.Object)">
            <summary>
            Sets the data context of the dependency object.
            </summary>
            <param name="dependencyObject">The dependency object.</param>
            <param name="dataContext">The data context value.</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.ElementExtensions.GetDataContext(System.Windows.DependencyObject)">
            <summary>
            Gets the data context of the depdendency object.
            </summary>
            <param name="dependencyObject">The dependency object.</param>
            <returns>The data context value.</returns>
        </member>
        <member name="M:Caliburn.PresentationFramework.ElementExtensions.OnLoad(System.Windows.DependencyObject,System.Windows.RoutedEventHandler)">
            <summary>
            Wires the delegate to the Loaded event of the element.
            </summary>
            <param name="dependencyObject">The dependency object.</param>
            <param name="callback">The callback.</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.ElementExtensions.SetBinding(System.Windows.DependencyObject,System.Windows.DependencyProperty,System.Windows.Data.Binding)">
            <summary>
            Sets the binding on the dependency object.
            </summary>
            <param name="dependencyObject">The dependency object.</param>
            <param name="dependencyProperty">The dependency property.</param>
            <param name="binding">The binding.</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.ElementExtensions.FindName(System.Windows.DependencyObject,System.String)">
            <summary>
            Finds a child element by name.
            </summary>
            <param name="parent">The parent.</param>
            <param name="name">The name.</param>
            <returns>The found element.</returns>
        </member>
        <member name="M:Caliburn.PresentationFramework.ElementExtensions.FindNameExhaustive``1(System.Windows.DependencyObject,System.String,System.Boolean)">
            <summary>
            Finds an element by name or fails.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="element">The element.</param>
            <param name="name">The name.</param>
            <param name="shouldFail">Indicates whether an exception should be throw if the named item is not found.</param>
            <returns>The found element.</returns>
        </member>
        <member name="M:Caliburn.PresentationFramework.ElementExtensions.GetName(System.Windows.DependencyObject)">
            <summary>
            Gets the value of the Name property of this instance.
            </summary>
            <param name="dependencyObject">The dependency object.</param>
            <returns>The name.</returns>
        </member>
        <member name="M:Caliburn.PresentationFramework.ElementExtensions.GetResource``1(System.Windows.DependencyObject,System.Object)">
            <summary>
            Gets the resource by searching the hierarchy of of elements.
            </summary>
            <typeparam name="T">The type of resource.</typeparam>
            <param name="element">The element.</param>
            <param name="key">The key.</param>
            <returns>The resource.</returns>
        </member>
        <member name="T:Caliburn.PresentationFramework.PresentationFrameworkExtensions">
            <summary>
            Extension methods related to the PresentationFramework classes.
            </summary>
        </member>
        <member name="F:Caliburn.PresentationFramework.PresentationFrameworkExtensions.GetModelTypeImplementation">
            <summary>
            The overridable implemenation of GetModelType.
            </summary>
        </member>
        <member name="M:Caliburn.PresentationFramework.PresentationFrameworkExtensions.GetModelType(System.Object)">
            <summary>
            Gets the type of the model.
            </summary>
            <param name="model">The model.</param>
            <returns></returns>
        </member>
        <member name="M:Caliburn.PresentationFramework.PresentationFrameworkExtensions.PresentationFramework(Caliburn.Core.Configuration.IModuleHook)">
            <summary>
            Adds the presentation framework module's configuration to the system.
            </summary>
            <param name="hook">The hook.</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.PresentationFrameworkExtensions.SafeToString(System.Object)">
            <summary>
            Safely converts an object to a string.
            </summary>
            <param name="value">The value to convert.</param>
            <returns>The converted string or null, if the value was null.</returns>
        </member>
        <member name="T:Caliburn.PresentationFramework.ResolveExtension">
            <summary>
            A Markup Extension that enables type resolution through the DI container in XAML.
            </summary>
        </member>
        <member name="M:Caliburn.PresentationFramework.ResolveExtension.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Caliburn.PresentationFramework.ResolveExtension"/> class.
            </summary>
        </member>
        <member name="M:Caliburn.PresentationFramework.ResolveExtension.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Caliburn.PresentationFramework.ResolveExtension"/> class.
            </summary>
            <param name="type">The type.</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.ResolveExtension.ProvideValue(System.IServiceProvider)">
            <summary>
            When implemented in a derived class, returns an object that is set as the value of the target property for this markup extension.
            </summary>
            <param name="serviceProvider">Object that can provide services for the markup extension.</param>
            <returns>
            The object value to set on the property where the extension is applied.
            </returns>
        </member>
        <member name="P:Caliburn.PresentationFramework.ResolveExtension.Type">
            <summary>
            Gets or sets the type.
            </summary>
            <value>The type.</value>
        </member>
        <member name="P:Caliburn.PresentationFramework.ResolveExtension.Key">
            <summary>
            Gets or sets the key.
            </summary>
            <value>The key.</value>
        </member>
        <member name="P:Caliburn.PresentationFramework.ResolveExtension.DesignTimeValue">
            <summary>
            Gets or sets the design time value.
            </summary>
            <value>The design time value.</value>
        </member>
    </members>
</doc>
