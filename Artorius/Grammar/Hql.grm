"Name"     = 'Hql'
"Author"   = 'Fabio Maulo'
"Version"  = '1.0.0'
"About"    = 'This grammar parses the query language for NHibernate'

"Start Symbol" = <Statement>

! ------------------------------------------------- Sets

{ID Head}      = {Letter} + [_]
{ID Tail}      = {Alphanumeric} + [_]
{String Chars} = {Printable} + {HT} - ["\]
{Hex Digit} = {Digit} + [abcdefABCDEF]

! ------------------------------------------------- Terminals

Comment Start		= '/*'
Comment End		= '*/'
Comment Line		= '--'

Identifier		= {ID Head}{ID Tail}*
Path			= {ID Head}{ID Tail}* ('.' {ID Head}{ID Tail}*)+
StringLiteral		= '"' ( {String Chars} | '\' {Printable} )* '"'
IntegerLiteral	= {Digit}+
FloatLiteral		= {Digit}+'.'{Digit}+
HexLiteral		= 0x{Hex Digit}+
ComparisonOperator	= '>' | '<' | '=' | '>=' | '<=' | '<>' | '!='
Parameter		= ':'{ID Head}{ID Tail}* | '?'

! ------------------------------------------------- Clauses
<Statement> ::= <SelectClause> <FromClause> | <FromClause>

<SelectClause>::= 'select' <AliasedExpressionList>

<FromClause> ::= 'from' <EntityName>
              |  'from' <AliasedEntityNameList>

! ------------------------------------------------- Rules

<EntityName> ::= Identifier | Path

<AliasedEntityName> ::= <EntityName> Identifier
                     |  <EntityName> 'as' Identifier
                     |  Identifier 'in' 'class' <EntityName>

<AliasedEntityNameList> ::= <AliasedEntityName> ',' <AliasedEntityNameList>
                         |  <AliasedEntityName>

<AliasedExpression> ::= <Expression> 'as' Identifier | <Expression>
<AliasedExpressionList> ::= <AliasedExpression> ',' <AliasedExpressionList>  | <AliasedExpression>

<Expression>  ::= <Expression> ComparisonOperator  <MathAddExpression>
               |  <MathAddExpression> 

<MathAddExpression> ::= <MathAddExpression> '+' <MathMultExpression>
               |  <MathAddExpression> '-' <MathMultExpression>
               |  <MathMultExpression>

<MathMultExpression>    ::= <MathMultExpression> '*' <MathNegateExpression> 
               |  <MathMultExpression> '/' <MathNegateExpression> 
               |  <MathNegateExpression> 

<MathNegateExpression>  ::= '-' <Value> |  <Value> 

<Value>       ::= Identifier | Path | StringLiteral | IntegerLiteral | FloatLiteral | HexLiteral | Parameter | '(' <Expression> ')'
