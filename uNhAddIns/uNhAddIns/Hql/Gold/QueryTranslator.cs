using System;
using System.Collections.Generic;
using System.Text;
using Iesi.Collections.Generic;

namespace uNhAddIns.Hql.Gold
{
	using System.Collections;
	using Iesi.Collections;
	using NHibernate;
	using NHibernate.Engine;
	using NHibernate.Hql;
	using NHibernate.Type;

	public class QueryTranslator : IQueryTranslator
	{
		#region Fields

		private readonly string queryIdentifier;
		private readonly string queryString;
		private readonly IDictionary<string, IFilter> filters;
		private readonly ISessionFactoryImplementor factory;

		private bool compiled = false;

		#endregion

		#region Ctor

		public QueryTranslator(string queryIdentifier, string queryString, IDictionary<string, IFilter> filters, ISessionFactoryImplementor factory)
		{
			this.queryIdentifier = queryIdentifier;
			this.queryString = queryString;
			this.filters = filters;
			this.factory = factory;
		}

		#endregion

		#region IQueryTranslator Members

		///<summary>
		///
		///            Compile a "normal" query. This method may be called multiple times. Subsequent invocations are no-ops.
		///            
		///</summary>
		///
		///<param name="replacements">Defined query substitutions.</param>
		///<param name="shallow">Does this represent a shallow (scalar or entity-id) select?</param>
		///<exception cref="T:NHibernate.QueryException">There was a problem parsing the query string.</exception>
		///<exception cref="T:NHibernate.MappingException">There was a problem querying defined mappings.</exception>
		public void Compile(IDictionary<string, string> replacements, bool shallow)
		{
			if (!compiled)
			{
				compiled = true;
			}
		}

		/// <summary>
		/// Perform a list operation given the underlying query definition.
		/// </summary>
		/// <param name="session">The session owning this query.</param>
		/// <param name="queryParameters">The query bind parameters.</param>
		/// <returns>The query list results.</returns>
		/// <exception cref="T:NHibernate.HibernateException"></exception>
		public IList List(ISessionImplementor session, QueryParameters queryParameters)
		{
			throw new NotImplementedException();
		}

		public IEnumerable GetEnumerable(QueryParameters queryParameters, ISessionImplementor session)
		{
			throw new NotImplementedException();
		}

		/// <summary>
		/// Perform a bulk update/delete operation given the underlying query defintion.
		/// </summary>
		/// <param name="queryParameters">The query bind parameters.</param>
		/// <param name="session">The session owning this query.</param>
		/// <returns>
		/// The number of entities updated or deleted.
		/// </returns>
		/// <exception cref="T:NHibernate.HibernateException"></exception>
		public int ExecuteUpdate(QueryParameters queryParameters, ISessionImplementor session)
		{
			throw new NotImplementedException();
		}

		/// <summary>
		/// Returns the column names in the generated SQL.
		/// </summary>
		/// <returns>the column names in the generated SQL.</returns>
		public string[][] GetColumnNames()
		{
			throw new NotImplementedException();
		}

		/// <summary>
		/// Information about any parameters encountered during translation.
		/// </summary>
		/// <returns></returns>
		public IParameterTranslations GetParameterTranslations()
		{
			throw new NotImplementedException();
		}

		///<summary>
		///
		///            The set of query spaces (table names) that the query referrs to.
		///            
		///</summary>
		///
		ISet<string> IQueryTranslator.QuerySpaces
		{
			get { throw new NotImplementedException(); }
		}

		/// <summary>
		/// The set of query spaces (table names) that the query referrs to.
		/// </summary>
		/// <value></value>
		public ISet QuerySpaces
		{
			get { throw new NotImplementedException(); }
		}

		/// <summary>
		/// The SQL string generated by the translator.
		/// </summary>
		/// <value></value>
		public string SQLString
		{
			get { throw new NotImplementedException(); }
		}

		IList<string> IQueryTranslator.CollectSqlStrings
		{
			get { throw new NotImplementedException(); }
		}

		public IList<string> CollectSqlStrings
		{
			get { throw new NotImplementedException(); }
		}

		/// <summary>
		/// The HQL string processed by the translator.
		/// </summary>
		/// <value></value>
		public string QueryString
		{
			get { throw new NotImplementedException(); }
		}

		/// <summary>
		/// Returns the filters enabled for this query translator.
		/// </summary>
		/// <value></value>
		/// <returns>
		/// Filters enabled for this query execution.
		/// </returns>
		public IDictionary<string, IFilter> EnabledFilters
		{
			get { throw new NotImplementedException(); }
		}

		/// <summary>
		/// Returns an array of Types represented in the query result.
		/// </summary>
		/// <value></value>
		/// <returns>
		/// Query return types.
		/// </returns>
		public IType[] ReturnTypes
		{
			get { throw new NotImplementedException(); }
		}

		/// <summary>
		/// Returns an array of HQL aliases
		/// </summary>
		/// <value></value>
		/// <returns>
		/// Returns an array of HQL aliases
		/// </returns>
		public string[] ReturnAliases
		{
			get { throw new NotImplementedException(); }
		}

		/// <summary>
		/// Does the translated query contain collection fetches?
		/// </summary>
		/// <value></value>
		/// <returns>
		/// True if the query does contain collection fetched; false otherwise.
		/// </returns>
		public bool ContainsCollectionFetches
		{
			get { throw new NotImplementedException(); }
		}

		public bool IsManipulationStatement
		{
			get { throw new NotImplementedException(); }
		}

		#endregion
	}
}
